<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Strategies on </title>
    <link>//localhost:50916/strategies/</link>
    <description>Recent content in Strategies on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Apr 2025 04:00:00 -0700</lastBuildDate>
    <atom:link href="//localhost:50916/strategies/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction to case studies</title>
      <link>//localhost:50916/strategies-intro/</link>
      <pubDate>Sat, 04 May 2024 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/strategies-intro/</guid>
      <description>This book&amp;rsquo;s Introduction started with a commitment to grounding its approach in concrete case studies. In this section, we&amp;rsquo;re living up to that commitment by presenting ten real-world strategies I&amp;rsquo;ve directly worked on or observed. These strategies take the somewhat abstract concepts we&amp;rsquo;ve covered thus far and materialize them into concrete ideas, hopefully making them easier to grasp and easier for you to apply.&#xA;The first five strategies are selected to show a varied mix of refinement techniques and operational mechanisms.</description>
    </item>
    <item>
      <title>Uber&#39;s service migration strategy circa 2014.</title>
      <link>//localhost:50916/uber-strategy/</link>
      <pubDate>Thu, 09 Jan 2025 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/uber-strategy/</guid>
      <description>In early 2014, I joined as an engineering manager for Uber&amp;rsquo;s Infrastructure team. We were responsible for a wide number of things, including provisioning new services. While the overall team I led grew significantly over time, the subset working on service provisioning never grew beyond four engineers.&#xA;Those four engineers successfully migrated 1,000+ services onto a new, future-proofed service platform. More importantly, they did it while absorbing the majority, although certainly not the entirety, of the migration workload onto that small team rather than spreading it across the 2,000+ engineers working at Uber at the time.</description>
    </item>
    <item>
      <title>Service onboarding model for Uber (2014).</title>
      <link>//localhost:50916/uber-strategy-model/</link>
      <pubDate>Thu, 09 Jan 2025 05:00:00 -0700</pubDate>
      <guid>//localhost:50916/uber-strategy-model/</guid>
      <description>At the core of Uber&amp;rsquo;s service migration strategy (2014) is understanding the service onboarding process, and identifying the levers to speed up that process. Here we&amp;rsquo;ll develop a system model representing that onboarding process, and exercise the model to test a number of hypotheses about how to best speed up provisioning.&#xA;In this chapter, we&amp;rsquo;ll cover:&#xA;Where the model of service onboarding suggested we focus on efforts Developing a system model using the lethain/systems package on Github.</description>
    </item>
    <item>
      <title>Wardley mapping the service orchestration ecosystem (2014).</title>
      <link>//localhost:50916/uber-strategy-wardley/</link>
      <pubDate>Thu, 10 Apr 2025 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/uber-strategy-wardley/</guid>
      <description>In Uber&amp;rsquo;s 2014 service migration strategy, we explore how to navigate the move from a Python monolith to a services-oriented architecture while also scaling with user traffic that doubled every six months.&#xA;This Wardley map explores how orchestration frameworks were evolving during that period to be used as an input into determining the most effective path forward for Uber&amp;rsquo;s Infrastructure Engineering team.&#xA;Reading this map To quickly understand this Wardley Map, read from top to bottom.</description>
    </item>
    <item>
      <title>How should you adopt LLMs?</title>
      <link>//localhost:50916/llm-adoption-strategy/</link>
      <pubDate>Tue, 14 May 2024 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/llm-adoption-strategy/</guid>
      <description>Whether you’re a product engineer, a product manager, or an engineering executive, you’ve probably been pushed to consider using Large Language Models (LLMs) to extend your product or enhance your processes. 2023-2024 is an interesting era for LLM adoption, where these capabilities have transitioned into the mainstream, with many companies worrying that they’re falling behind despite the fact that most integrations appear superficial.&#xA;That context makes LLM adoption a great topic for a strategy case study.</description>
    </item>
    <item>
      <title>Modeling impact of LLMs on Developer Experience.</title>
      <link>//localhost:50916/llm-adoption-model/</link>
      <pubDate>Sun, 06 Oct 2024 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/llm-adoption-model/</guid>
      <description>In How should you adopt Large Language Models? (LLMs), we considered how LLMs might impact a company&amp;rsquo;s developer experience. To support that exploration, I&amp;rsquo;ve developed a system model of the software development process at the company.&#xA;In this chapter, we&amp;rsquo;ll work through:&#xA;Summary results from this model How the model was developed, both sketching and building the model in a spreadsheet. (As discussed in the overview of systems modeling, I generally would recommend against using spreadsheets to develop most models, but it&amp;rsquo;s educational to attempt doing so once or twice.</description>
    </item>
    <item>
      <title>Wardley mapping the LLM ecosystem.</title>
      <link>//localhost:50916/wardley-llm-ecosystem/</link>
      <pubDate>Tue, 24 Dec 2024 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/wardley-llm-ecosystem/</guid>
      <description>In How should you adopt LLMs?, we explore how a theoretical ride sharing company, Theoretical Ride Sharing, should adopt Large Language Models (LLMs). Part of that strategy&amp;rsquo;s diagnosis depends on understanding the expected evolution of the LLM ecosystem, which we&amp;rsquo;ve built a Wardley map to better explore.&#xA;This map of the LLM space focuses on how product companies should address the proliferation of model providers such as Anthropic, Google and OpenAI, as well as the proliferation of LLM product patterns like agentic workflows, Retrieval Augmented Generation (RAG), and running evals to maintain performance as models change.</description>
    </item>
    <item>
      <title>Modeling driving onboarding.</title>
      <link>//localhost:50916/llm-onboarding-model/</link>
      <pubDate>Sat, 19 Oct 2024 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/llm-onboarding-model/</guid>
      <description>The How should you adopt LLMs? strategy explores how Theoretical Ride Sharing might adopt LLMs. It builds on several models, the first is about LLMs impact on Developer Experience. The second model, documented here, looks at whether LLMs might improve a core product and business problem: maximizing active drivers on their ridesharing platform.&#xA;In this chapter, we&amp;rsquo;ll cover:&#xA;Where the model of ridesharing drivers identifies opportunities for LLMs How the model was sketched and developed using lethain/systems package on Github Exercising this model to learn from it Let&amp;rsquo;s get started.</description>
    </item>
    <item>
      <title>Navigating Private Equity ownership.</title>
      <link>//localhost:50916/private-equity-strategy/</link>
      <pubDate>Mon, 11 Nov 2024 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/private-equity-strategy/</guid>
      <description>In 2020, you could credibly argue that ZIRP explains the world, but that&amp;rsquo;s an impossible argument to make in 2024 when zero-interest rate policy is only a fond memory. Instead, we&amp;rsquo;re seeing a number of companies designed for rapid expansion, learning to adapt to a world that expects immediate free cash flow rather than accepting the sweet promise of discounted future cash flow.&#xA;This chapter aims to tackle that problem head-on, taking the role of an engineering organization attempting to navigate new ownership by a private equity group.</description>
    </item>
    <item>
      <title>Eng org seniority-mix model.</title>
      <link>//localhost:50916/private-equity-model/</link>
      <pubDate>Sun, 27 Oct 2024 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/private-equity-model/</guid>
      <description>One of the trademarks of private equity ownership is the expectation that either the company maintains their current margin and grows revenue at 25-30%, or they instead grow slower and increase their free cash flow year over year. In many organizations, engineering costs have a major impact on their free cash flow. There are many costs to reduce, cloud hosting and such, but inevitably part of the discussion is addressing engineering headcount costs directly.</description>
    </item>
    <item>
      <title>How should we control access to user data?</title>
      <link>//localhost:50916/user-data-strategy/</link>
      <pubDate>Fri, 07 Feb 2025 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/user-data-strategy/</guid>
      <description>At some point in a startup&amp;rsquo;s lifecycle, they decide that they need to be ready to go public in 18 months, and a flurry of IPO-readiness activity kicks off. This strategy focuses on a company working on IPO readiness, which has identified a gap in internal controls for managing user data access. It&amp;rsquo;s a company that wants to meaningfully improve their security posture around user data access, but which has had a number of failed security initiatives over the years.</description>
    </item>
    <item>
      <title>Should we decompose our monolith?</title>
      <link>//localhost:50916/monolith-decomposition-strategy/</link>
      <pubDate>Sun, 15 Sep 2024 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/monolith-decomposition-strategy/</guid>
      <description>From their first introduction in 2005, the debate between adopting a microservices architecture, a monolithic service architecture, or a hybrid between the two has become one of the least-reversible decisions that most engineering organizations make. Even migrating to a different database technology is generally a less expensive change than moving from monolith to microservices or from microservices to monolith.&#xA;The industry has in many ways gone full circle on that debate, from most hyperscalers in the 2010s partaking in a multi-year monolith to microservices migration, to Kelsey Hightower&amp;rsquo;s iconic tweet on the perils of distributed monoliths:</description>
    </item>
    <item>
      <title>&#34;We&#39;re a product engineering company!&#34; — Engineering strategy at Calm.</title>
      <link>//localhost:50916/product-eng-strategy/</link>
      <pubDate>Thu, 23 Jan 2025 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/product-eng-strategy/</guid>
      <description>In my career, the majority of the strategy work I&amp;rsquo;ve done has been in non-executive roles, things like Uber&amp;rsquo;s service migration. Joining Calm was my first executive role, where I was able to not only propose but also mandate strategy.&#xA;Like almost all startups, the engineering team was scattered when I joined. Was our most important work creating more scalable infrastructure? Was our greatest risk the failure to adopt leading programming languages?</description>
    </item>
    <item>
      <title>How to resource Engineering-driven projects at Calm? (2020)</title>
      <link>//localhost:50916/project-resourcing-strategy/</link>
      <pubDate>Thu, 03 Apr 2025 05:00:00 -0700</pubDate>
      <guid>//localhost:50916/project-resourcing-strategy/</guid>
      <description>One of the recurring challenges in any organization is how to split your attention across long-term and short-term problems. Your software might be struggling to scale with ramping user load while also knowing that you have a series of meaningful security vulnerabilities that need to be closed sooner than later. How do you balance across them?&#xA;These sorts of balance questions occur at every level of an organization. A particularly frequent format is the debate between Product and Engineering about how much time goes towards developing new functionality versus improving what&amp;rsquo;s already been implemented.</description>
    </item>
    <item>
      <title>How should Stripe deprecate APIs? (~2016)</title>
      <link>//localhost:50916/api-deprecation-strategy/</link>
      <pubDate>Thu, 23 Jan 2025 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/api-deprecation-strategy/</guid>
      <description>While Stripe is a widely admired company for things like its creation of the Sorbet typer project, I personally think that Stripe&amp;rsquo;s most interesting strategy work is also among its most subtle: its willingness to significantly prioritize API stability.&#xA;This strategy is almost invisible externally. Internally, discussions around it were frequent and detailed, but mostly confined to dedicated API design conversations. API stability isn&amp;rsquo;t just a technical design quirk, it&amp;rsquo;s a foundational decision in an API-driven business, and I believe it is one of the unsung heroes of Stripe&amp;rsquo;s business success.</description>
    </item>
    <item>
      <title>Systems model of API deprecation</title>
      <link>//localhost:50916/api-deprecation-model/</link>
      <pubDate>Tue, 01 Apr 2025 05:00:00 -0700</pubDate>
      <guid>//localhost:50916/api-deprecation-model/</guid>
      <description>In How should Stripe deprecate APIs?, the diagnosis depends on the claim that deprecating APIs is a significant cause of customer churn. While there is internal data that can be used to correlate deprecation with churn, it&amp;rsquo;s also valuable to build a model to help us decide if we believe that correlation and causation are aligned in this case.&#xA;In this chapter, we&amp;rsquo;ll cover:&#xA;What we learn from modeling API deprecation&amp;rsquo;s impact on user retention Developing a system model using the lethain/systems package on GitHub.</description>
    </item>
    <item>
      <title>Why did Stripe build Sorbet? (~2017).</title>
      <link>//localhost:50916/stripe-sorbet-strategy/</link>
      <pubDate>Thu, 23 Jan 2025 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/stripe-sorbet-strategy/</guid>
      <description>Many hypergrowth companies of the 2010s battled increasing complexity in their codebase by decomposing their monoliths. Stripe was somewhat of an exception, largely delaying decomposition until it had grown beyond three thousand engineers and had accumulated a decade of development in its core Ruby monolith. Even now, significant portions of their product are maintained in the monolithic repository, and it&amp;rsquo;s safe to say this was only possible because of Sorbet&amp;rsquo;s impact.</description>
    </item>
    <item>
      <title>How to integrate Stripe&#39;s acquisition of Index? (2018)</title>
      <link>//localhost:50916/index-acquisition-strategy/</link>
      <pubDate>Thu, 27 Feb 2025 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/index-acquisition-strategy/</guid>
      <description>Discussions around acquisitions often focus on technical diligence and deciding whether to make the acquisition. However, the integration that follows afterwards can be even more complex. There are few irreversible trapdoor decisions in engineering, but decisions made early in an integration tend to be surprisingly durable.&#xA;This engineering strategy explores Stripe&amp;rsquo;s approach to integrating their 2018 acquisition of Index. While a business book would focus on the rationale for the acquisition itself, here that rationale is merely part of the diagnosis that defines the integration tradeoffs.</description>
    </item>
  </channel>
</rss>
