<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eng-Strategy-Book on </title>
    <link>//localhost:50916/tags/eng-strategy-book/</link>
    <description>Recent content in Eng-Strategy-Book on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Thu, 10 Apr 2025 05:00:00 -0700</lastBuildDate>
    <atom:link href="//localhost:50916/tags/eng-strategy-book/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Preface</title>
      <link>//localhost:50916/preface/</link>
      <pubDate>Sat, 15 Mar 2025 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/preface/</guid>
      <description>In 2015, the Mini Sky City skyscraper, with 57 floors, was built in Changsha, China, in 19 days. Driving to work over the past few years, I’ve watched a nine-story building in San Francisco get built over three years. There’s some argument that Mini Sky City’s record isn’t legitimate because it relied heavily on modular, pre-built architecture, but I can assure you that the three-years-and-counting building in San Francisco is similarly being built from modular components.</description>
    </item>
    <item>
      <title>Introduction</title>
      <link>//localhost:50916/intro/</link>
      <pubDate>Sat, 04 May 2024 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/intro/</guid>
      <description>I&amp;rsquo;ve worked alongside many talented people who spent years waiting for a chance to finally &amp;ldquo;do strategy.&amp;rdquo; My hope is this book convinces you—and maybe them—that waiting is optional. Strategy isn’t reserved for executives. It&amp;rsquo;s the art of making thoughtful decisions, and is accessible to everyone&amp;ndash;including you.&#xA;Even if you&amp;rsquo;d prefer to avoid strategy, it&amp;rsquo;s still happening all around you. My first big dose of strategy came managing the team responsible for Uber&amp;rsquo;s service migration, where we desperately tried to survive accelerating inbound requests for support.</description>
    </item>
    <item>
      <title>Is engineering strategy useful?</title>
      <link>//localhost:50916/is-useful/</link>
      <pubDate>Thu, 30 Jan 2025 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/is-useful/</guid>
      <description>While I frequently hear engineers bemoan a missing strategy, their complaints rarely articulate why the missing strategy matters. Instead, it serves as more of a truism: the economy used to be better, children used to respect their parents, and engineering organizations used to have an engineering strategy.&#xA;This chapter starts by exploring something I believe quite strongly: there&amp;rsquo;s always an engineering strategy, even if there&amp;rsquo;s nothing written down. From there, we&amp;rsquo;ll discuss why strategy, especially written strategy, is such a valuable opportunity for organizations that take it seriously.</description>
    </item>
    <item>
      <title>Who gets to do strategy?</title>
      <link>//localhost:50916/who-does-strategy/</link>
      <pubDate>Thu, 06 Mar 2025 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/who-does-strategy/</guid>
      <description>If you talk to enough aspiring leaders, you&amp;rsquo;ll become familiar with the prevalent idea that they need to be promoted before they can work on strategy. It&amp;rsquo;s widely accepted as true, but I&amp;rsquo;ve found this idea fundamentally incorrect: you can work on strategy from anywhere in an organization. It just requires different tactics to do so.&#xA;Both Staff Engineer and The Engineering Executive&amp;rsquo;s Primer have chapters on strategy. While the chapters&amp;rsquo; contents are quite different, both present a practical path to advancing your organization&amp;rsquo;s thinking about complex topics.</description>
    </item>
    <item>
      <title>When to write strategy, and how much?</title>
      <link>//localhost:50916/when-write-stratefy/</link>
      <pubDate>Sun, 25 Aug 2024 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/when-write-stratefy/</guid>
      <description>Even if you believe that strategy is generally useful, it is difficult to decide that today is the day to start writing engineering strategy. When you do start writing strategy, it&amp;rsquo;s easy to write so much strategy that your organization is overwhelmed and ignores your strategy rather than investing time into understanding it.&#xA;Fortunately, these are universal problems, and there are a handful of useful mental models to avoid both extremes.</description>
    </item>
    <item>
      <title>Steps to build an engineering strategy.</title>
      <link>//localhost:50916/strategy-steps/</link>
      <pubDate>Thu, 27 Mar 2025 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/strategy-steps/</guid>
      <description>Often you&amp;rsquo;ll see a disorganized collection of ideas labeled as a &amp;ldquo;strategy.&amp;rdquo; Even when they&amp;rsquo;re dense with ideas, such documents can be hard to parse, and are a major reason why most engineers will claim their company doesn&amp;rsquo;t have a clear strategy even though in my experience, all companies follow some strategy, even if it&amp;rsquo;s undocumented.&#xA;This chapter lays out a repeatable, structured approach to drafting strategy. It introduces each step of that approach, which are then detailed further in their respective chapters.</description>
    </item>
    <item>
      <title>Exploring</title>
      <link>//localhost:50916/explore/</link>
      <pubDate>Thu, 13 Feb 2025 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/explore/</guid>
      <description>A surprising number of strategies are doomed from inception because their authors get attached to one particular approach without considering alternatives that would work better for their current circumstances. This happens when engineers want to pick tools solely because they are trending, and when executives insist on adopting the tech stack from their prior organization where they felt comfortable.&#xA;Exploration is the antidote to early anchoring, forcing you to consider the problem widely before evaluating any of the paths forward.</description>
    </item>
    <item>
      <title>Diagnosis</title>
      <link>//localhost:50916/diagnosis/</link>
      <pubDate>Sat, 22 Feb 2025 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/diagnosis/</guid>
      <description>Once you&amp;rsquo;ve written your strategy&amp;rsquo;s exploration, the next step is working on its diagnosis. Diagnosis is understanding the constraints and challenges your strategy needs to address. In particular, it’s about slowing yourself down from jumping to solutions before fully understanding the nuances and constraints of the problem.&#xA;If you ever find yourself wanting to skip the diagnosis phase&amp;ndash;let&amp;rsquo;s get to the solution already!&amp;ndash;then maybe it&amp;rsquo;s worth acknowledging that every strategy that I&amp;rsquo;ve seen fail, did so due to a lazy or inaccurate diagnoses.</description>
    </item>
    <item>
      <title>Refining</title>
      <link>//localhost:50916/refine/</link>
      <pubDate>Sat, 28 Dec 2024 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/refine/</guid>
      <description>In Jim Collins&amp;rsquo; Great by Choice, he develops the concept of Fire Bullets, Then Cannonballs. His premise is that you should cheaply test new ideas before fully committing to them. Your organization can only afford firing a small number of cannonballs, but it can bankroll far more bullets. Why not use bullets to derisk your cannonballs&amp;rsquo; trajectories?&#xA;This chapter presents a series of concrete techniques that I have personally used to effectively refine strategies before reaching the cannonball stage.</description>
    </item>
    <item>
      <title>Setting policy</title>
      <link>//localhost:50916/policy/</link>
      <pubDate>Thu, 13 Mar 2025 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/policy/</guid>
      <description>This book&amp;rsquo;s introduction started by defining strategy as &amp;ldquo;making decisions.&amp;rdquo; Then we dug into exploration, diagnosis, and refinement. Those are three chapters where you could argue that we didn&amp;rsquo;t decide anything at all. Clarifying the problem to be solved is the prerequisite of effective decision making, but eventually decisions do have to be made. Here in this chapter on policy, and the following chapter on operations, we finally start making some decisions.</description>
    </item>
    <item>
      <title>Operations</title>
      <link>//localhost:50916/operations/</link>
      <pubDate>Thu, 20 Mar 2025 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/operations/</guid>
      <description>Even the best policies fail if they aren&amp;rsquo;t adopted by the teams they&amp;rsquo;re intended to serve. Can we persistently change our company&amp;rsquo;s behaviors with a one-time announcement? No, probably not.&#xA;I refer to the art of making policies work as &amp;ldquo;operations&amp;rdquo; or &amp;ldquo;strategy operations.&amp;rdquo; The good news is that effectively operating a policy is two-thirds avoiding common practices that simply don&amp;rsquo;t work. The other one-third takes some repetition, but can be practiced in any engineering role: there&amp;rsquo;s no need to wait until you&amp;rsquo;re an executive to start building mastery.</description>
    </item>
    <item>
      <title>Making engineering strategies more readable</title>
      <link>//localhost:50916/readable-strategy/</link>
      <pubDate>Sat, 18 May 2024 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/readable-strategy/</guid>
      <description>As discussed in Components of engineering strategy, a complete engineering strategy has five components: explore, diagnose, refine (map &amp;amp; model), policy, and operation. However, it&amp;rsquo;s actually quite challenging to read a strategy document written that way. That&amp;rsquo;s an effective sequence for creating a strategy, but it&amp;rsquo;s a challenging sequence for those trying to quickly read and apply a strategy without necessarily wanting to understand the complete thinking behind each decision.</description>
    </item>
    <item>
      <title>Bridging theory and practice in engineering strategy.</title>
      <link>//localhost:50916/theory-and-practice/</link>
      <pubDate>Thu, 16 Jan 2025 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/theory-and-practice/</guid>
      <description>Some people I&amp;rsquo;ve worked with have lost hope that engineering strategy actually exists within any engineering organizations. I imagine that they, reading through the steps to build engineering strategy, or the strategy for resourcing Engineering-driven projects, are not impressed. Instead, these ideas probably come across as theoretical at best. In less polite company, they might describe these ideas as fake constructs.&#xA;Let&amp;rsquo;s talk about it! Because they&amp;rsquo;re right. In fact, they&amp;rsquo;re right in two different ways.</description>
    </item>
    <item>
      <title>Introduction to refinement tools</title>
      <link>//localhost:50916/refinement-intro/</link>
      <pubDate>Sat, 04 May 2024 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/refinement-intro/</guid>
      <description>Perhaps the most important piece of the Steps to build an engineering strategy is strategy refinement. As we already worked through the overview of strategy refinement in the &amp;ldquo;Steps&amp;rdquo; section of this book, the goal of the &amp;ldquo;Refinement&amp;rdquo; section is to go into much greater detail about the three core mapping techniques: strategy testing, systems modeling, and Wardley mapping.&#xA;As we work through them, keep in mind that there are many other techniques out there, such as the many covered in Eben Hewitt&amp;rsquo;s Technology Strategy Patterns.</description>
    </item>
    <item>
      <title>Strategy testing: avoid the waterfall strategy trap with iterative refinement.</title>
      <link>//localhost:50916/strategy-testing/</link>
      <pubDate>Wed, 25 Sep 2024 17:00:00 -0700</pubDate>
      <guid>//localhost:50916/strategy-testing/</guid>
      <description>If I could only popularize one idea about technical strategy, it would be that prematurely applying pressure to a strategy&amp;rsquo;s rollout prevents evaluating whether the strategy is effective. Pressure changes behavior in profound ways, and many of those changes are intended to make you believe your strategy is working while minimizing change to the status quo (if you&amp;rsquo;re an executive) or get your strategy repealed (if you&amp;rsquo;re not an executive). Neither is particular helpful.</description>
    </item>
    <item>
      <title>Using systems modeling to refine strategy.</title>
      <link>//localhost:50916/systems-modeling/</link>
      <pubDate>Mon, 04 Nov 2024 07:00:00 -0700</pubDate>
      <guid>//localhost:50916/systems-modeling/</guid>
      <description>While I was probably late to learn the concept of strategy testing, I might have learned about systems modeling too early in my career, stumbling on Donella Meadows&amp;rsquo; Thinking in Systems: A Primer before I began my career in software. Over the years, I&amp;rsquo;ve discovered a number of ways to misuse systems modeling, but it remains the most effective, flexible tool I&amp;rsquo;ve found to debugging complex problems.&#xA;In this chapter, we&amp;rsquo;ll work through:</description>
    </item>
    <item>
      <title>Refining strategy with Wardley Mapping.</title>
      <link>//localhost:50916/wardley-mapping/</link>
      <pubDate>Thu, 02 Jan 2025 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/wardley-mapping/</guid>
      <description>The first time I heard about Wardley Mapping was from Charity Majors discussing it on Twitter. Of the three core strategy refinement techniques, this is the technique that I&amp;rsquo;ve personally used the least. Despite that, I decided to include it in this book because it highlights how many different techniques can be used for refining strategy, and also because it&amp;rsquo;s particularly effective at looking at the broader ecosystems your organization exists in.</description>
    </item>
    <item>
      <title>Introduction to case studies</title>
      <link>//localhost:50916/strategies-intro/</link>
      <pubDate>Sat, 04 May 2024 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/strategies-intro/</guid>
      <description>This book&amp;rsquo;s Introduction started with a commitment to grounding its approach in concrete case studies. In this section, we&amp;rsquo;re living up to that commitment by presenting ten real-world strategies I&amp;rsquo;ve directly worked on or observed. These strategies take the somewhat abstract concepts we&amp;rsquo;ve covered thus far and materialize them into concrete ideas, hopefully making them easier to grasp and easier for you to apply.&#xA;The first five strategies are selected to show a varied mix of refinement techniques and operational mechanisms.</description>
    </item>
    <item>
      <title>Uber&#39;s service migration strategy circa 2014.</title>
      <link>//localhost:50916/uber-strategy/</link>
      <pubDate>Thu, 09 Jan 2025 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/uber-strategy/</guid>
      <description>In early 2014, I joined as an engineering manager for Uber&amp;rsquo;s Infrastructure team. We were responsible for a wide number of things, including provisioning new services. While the overall team I led grew significantly over time, the subset working on service provisioning never grew beyond four engineers.&#xA;Those four engineers successfully migrated 1,000+ services onto a new, future-proofed service platform. More importantly, they did it while absorbing the majority, although certainly not the entirety, of the migration workload onto that small team rather than spreading it across the 2,000+ engineers working at Uber at the time.</description>
    </item>
    <item>
      <title>Service onboarding model for Uber (2014).</title>
      <link>//localhost:50916/uber-strategy-model/</link>
      <pubDate>Thu, 09 Jan 2025 05:00:00 -0700</pubDate>
      <guid>//localhost:50916/uber-strategy-model/</guid>
      <description>At the core of Uber&amp;rsquo;s service migration strategy (2014) is understanding the service onboarding process, and identifying the levers to speed up that process. Here we&amp;rsquo;ll develop a system model representing that onboarding process, and exercise the model to test a number of hypotheses about how to best speed up provisioning.&#xA;In this chapter, we&amp;rsquo;ll cover:&#xA;Where the model of service onboarding suggested we focus on efforts Developing a system model using the lethain/systems package on Github.</description>
    </item>
    <item>
      <title>Wardley mapping the service orchestration ecosystem (2014).</title>
      <link>//localhost:50916/uber-strategy-wardley/</link>
      <pubDate>Thu, 10 Apr 2025 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/uber-strategy-wardley/</guid>
      <description>In Uber&amp;rsquo;s 2014 service migration strategy, we explore how to navigate the move from a Python monolith to a services-oriented architecture while also scaling with user traffic that doubled every six months.&#xA;This Wardley map explores how orchestration frameworks were evolving during that period to be used as an input into determining the most effective path forward for Uber&amp;rsquo;s Infrastructure Engineering team.&#xA;Reading this map To quickly understand this Wardley Map, read from top to bottom.</description>
    </item>
    <item>
      <title>How should you adopt LLMs?</title>
      <link>//localhost:50916/llm-adoption-strategy/</link>
      <pubDate>Tue, 14 May 2024 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/llm-adoption-strategy/</guid>
      <description>Whether you’re a product engineer, a product manager, or an engineering executive, you’ve probably been pushed to consider using Large Language Models (LLMs) to extend your product or enhance your processes. 2023-2024 is an interesting era for LLM adoption, where these capabilities have transitioned into the mainstream, with many companies worrying that they’re falling behind despite the fact that most integrations appear superficial.&#xA;That context makes LLM adoption a great topic for a strategy case study.</description>
    </item>
    <item>
      <title>Modeling impact of LLMs on Developer Experience.</title>
      <link>//localhost:50916/llm-adoption-model/</link>
      <pubDate>Sun, 06 Oct 2024 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/llm-adoption-model/</guid>
      <description>In How should you adopt Large Language Models? (LLMs), we considered how LLMs might impact a company&amp;rsquo;s developer experience. To support that exploration, I&amp;rsquo;ve developed a system model of the software development process at the company.&#xA;In this chapter, we&amp;rsquo;ll work through:&#xA;Summary results from this model How the model was developed, both sketching and building the model in a spreadsheet. (As discussed in the overview of systems modeling, I generally would recommend against using spreadsheets to develop most models, but it&amp;rsquo;s educational to attempt doing so once or twice.</description>
    </item>
    <item>
      <title>Wardley mapping the LLM ecosystem.</title>
      <link>//localhost:50916/wardley-llm-ecosystem/</link>
      <pubDate>Tue, 24 Dec 2024 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/wardley-llm-ecosystem/</guid>
      <description>In How should you adopt LLMs?, we explore how a theoretical ride sharing company, Theoretical Ride Sharing, should adopt Large Language Models (LLMs). Part of that strategy&amp;rsquo;s diagnosis depends on understanding the expected evolution of the LLM ecosystem, which we&amp;rsquo;ve built a Wardley map to better explore.&#xA;This map of the LLM space focuses on how product companies should address the proliferation of model providers such as Anthropic, Google and OpenAI, as well as the proliferation of LLM product patterns like agentic workflows, Retrieval Augmented Generation (RAG), and running evals to maintain performance as models change.</description>
    </item>
    <item>
      <title>Modeling driving onboarding.</title>
      <link>//localhost:50916/llm-onboarding-model/</link>
      <pubDate>Sat, 19 Oct 2024 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/llm-onboarding-model/</guid>
      <description>The How should you adopt LLMs? strategy explores how Theoretical Ride Sharing might adopt LLMs. It builds on several models, the first is about LLMs impact on Developer Experience. The second model, documented here, looks at whether LLMs might improve a core product and business problem: maximizing active drivers on their ridesharing platform.&#xA;In this chapter, we&amp;rsquo;ll cover:&#xA;Where the model of ridesharing drivers identifies opportunities for LLMs How the model was sketched and developed using lethain/systems package on Github Exercising this model to learn from it Let&amp;rsquo;s get started.</description>
    </item>
    <item>
      <title>Navigating Private Equity ownership.</title>
      <link>//localhost:50916/private-equity-strategy/</link>
      <pubDate>Mon, 11 Nov 2024 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/private-equity-strategy/</guid>
      <description>In 2020, you could credibly argue that ZIRP explains the world, but that&amp;rsquo;s an impossible argument to make in 2024 when zero-interest rate policy is only a fond memory. Instead, we&amp;rsquo;re seeing a number of companies designed for rapid expansion, learning to adapt to a world that expects immediate free cash flow rather than accepting the sweet promise of discounted future cash flow.&#xA;This chapter aims to tackle that problem head-on, taking the role of an engineering organization attempting to navigate new ownership by a private equity group.</description>
    </item>
    <item>
      <title>Eng org seniority-mix model.</title>
      <link>//localhost:50916/private-equity-model/</link>
      <pubDate>Sun, 27 Oct 2024 04:00:00 -0700</pubDate>
      <guid>//localhost:50916/private-equity-model/</guid>
      <description>One of the trademarks of private equity ownership is the expectation that either the company maintains their current margin and grows revenue at 25-30%, or they instead grow slower and increase their free cash flow year over year. In many organizations, engineering costs have a major impact on their free cash flow. There are many costs to reduce, cloud hosting and such, but inevitably part of the discussion is addressing engineering headcount costs directly.</description>
    </item>
    <item>
      <title>How should we control access to user data?</title>
      <link>//localhost:50916/user-data-strategy/</link>
      <pubDate>Fri, 07 Feb 2025 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/user-data-strategy/</guid>
      <description>At some point in a startup&amp;rsquo;s lifecycle, they decide that they need to be ready to go public in 18 months, and a flurry of IPO-readiness activity kicks off. This strategy focuses on a company working on IPO readiness, which has identified a gap in internal controls for managing user data access. It&amp;rsquo;s a company that wants to meaningfully improve their security posture around user data access, but which has had a number of failed security initiatives over the years.</description>
    </item>
    <item>
      <title>Should we decompose our monolith?</title>
      <link>//localhost:50916/monolith-decomposition-strategy/</link>
      <pubDate>Sun, 15 Sep 2024 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/monolith-decomposition-strategy/</guid>
      <description>From their first introduction in 2005, the debate between adopting a microservices architecture, a monolithic service architecture, or a hybrid between the two has become one of the least-reversible decisions that most engineering organizations make. Even migrating to a different database technology is generally a less expensive change than moving from monolith to microservices or from microservices to monolith.&#xA;The industry has in many ways gone full circle on that debate, from most hyperscalers in the 2010s partaking in a multi-year monolith to microservices migration, to Kelsey Hightower&amp;rsquo;s iconic tweet on the perils of distributed monoliths:</description>
    </item>
    <item>
      <title>&#34;We&#39;re a product engineering company!&#34; — Engineering strategy at Calm.</title>
      <link>//localhost:50916/product-eng-strategy/</link>
      <pubDate>Thu, 23 Jan 2025 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/product-eng-strategy/</guid>
      <description>In my career, the majority of the strategy work I&amp;rsquo;ve done has been in non-executive roles, things like Uber&amp;rsquo;s service migration. Joining Calm was my first executive role, where I was able to not only propose but also mandate strategy.&#xA;Like almost all startups, the engineering team was scattered when I joined. Was our most important work creating more scalable infrastructure? Was our greatest risk the failure to adopt leading programming languages?</description>
    </item>
    <item>
      <title>How to resource Engineering-driven projects at Calm? (2020)</title>
      <link>//localhost:50916/project-resourcing-strategy/</link>
      <pubDate>Thu, 03 Apr 2025 05:00:00 -0700</pubDate>
      <guid>//localhost:50916/project-resourcing-strategy/</guid>
      <description>One of the recurring challenges in any organization is how to split your attention across long-term and short-term problems. Your software might be struggling to scale with ramping user load while also knowing that you have a series of meaningful security vulnerabilities that need to be closed sooner than later. How do you balance across them?&#xA;These sorts of balance questions occur at every level of an organization. A particularly frequent format is the debate between Product and Engineering about how much time goes towards developing new functionality versus improving what&amp;rsquo;s already been implemented.</description>
    </item>
    <item>
      <title>How should Stripe deprecate APIs? (~2016)</title>
      <link>//localhost:50916/api-deprecation-strategy/</link>
      <pubDate>Thu, 23 Jan 2025 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/api-deprecation-strategy/</guid>
      <description>While Stripe is a widely admired company for things like its creation of the Sorbet typer project, I personally think that Stripe&amp;rsquo;s most interesting strategy work is also among its most subtle: its willingness to significantly prioritize API stability.&#xA;This strategy is almost invisible externally. Internally, discussions around it were frequent and detailed, but mostly confined to dedicated API design conversations. API stability isn&amp;rsquo;t just a technical design quirk, it&amp;rsquo;s a foundational decision in an API-driven business, and I believe it is one of the unsung heroes of Stripe&amp;rsquo;s business success.</description>
    </item>
    <item>
      <title>Systems model of API deprecation</title>
      <link>//localhost:50916/api-deprecation-model/</link>
      <pubDate>Tue, 01 Apr 2025 05:00:00 -0700</pubDate>
      <guid>//localhost:50916/api-deprecation-model/</guid>
      <description>In How should Stripe deprecate APIs?, the diagnosis depends on the claim that deprecating APIs is a significant cause of customer churn. While there is internal data that can be used to correlate deprecation with churn, it&amp;rsquo;s also valuable to build a model to help us decide if we believe that correlation and causation are aligned in this case.&#xA;In this chapter, we&amp;rsquo;ll cover:&#xA;What we learn from modeling API deprecation&amp;rsquo;s impact on user retention Developing a system model using the lethain/systems package on GitHub.</description>
    </item>
    <item>
      <title>Why did Stripe build Sorbet? (~2017).</title>
      <link>//localhost:50916/stripe-sorbet-strategy/</link>
      <pubDate>Thu, 23 Jan 2025 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/stripe-sorbet-strategy/</guid>
      <description>Many hypergrowth companies of the 2010s battled increasing complexity in their codebase by decomposing their monoliths. Stripe was somewhat of an exception, largely delaying decomposition until it had grown beyond three thousand engineers and had accumulated a decade of development in its core Ruby monolith. Even now, significant portions of their product are maintained in the monolithic repository, and it&amp;rsquo;s safe to say this was only possible because of Sorbet&amp;rsquo;s impact.</description>
    </item>
    <item>
      <title>How to integrate Stripe&#39;s acquisition of Index? (2018)</title>
      <link>//localhost:50916/index-acquisition-strategy/</link>
      <pubDate>Thu, 27 Feb 2025 06:00:00 -0700</pubDate>
      <guid>//localhost:50916/index-acquisition-strategy/</guid>
      <description>Discussions around acquisitions often focus on technical diligence and deciding whether to make the acquisition. However, the integration that follows afterwards can be even more complex. There are few irreversible trapdoor decisions in engineering, but decisions made early in an integration tend to be surprisingly durable.&#xA;This engineering strategy explores Stripe&amp;rsquo;s approach to integrating their 2018 acquisition of Index. While a business book would focus on the rationale for the acquisition itself, here that rationale is merely part of the diagnosis that defines the integration tradeoffs.</description>
    </item>
    <item>
      <title>Is this strategy any good?</title>
      <link>//localhost:50916/evaluating-strategy/</link>
      <pubDate>Thu, 27 Mar 2025 05:00:00 -0700</pubDate>
      <guid>//localhost:50916/evaluating-strategy/</guid>
      <description>We&amp;rsquo;ve read a lot of strategy at this point in the book. We can judge a strategy&amp;rsquo;s format, and its construction: both are useful things. However, format is a predictor of quality, not quality itself. The remaining question is, how should we assess whether a strategy is any good?&#xA;Uber&amp;rsquo;s service migration strategy unlocked the entire organization to make rapid progress. It also led to a sprawling architecture problem down the line.</description>
    </item>
    <item>
      <title>How to get better at strategy?</title>
      <link>//localhost:50916/getting-better/</link>
      <pubDate>Thu, 10 Apr 2025 05:00:00 -0700</pubDate>
      <guid>//localhost:50916/getting-better/</guid>
      <description>One of the most memorable quotes in Arthur Miller&amp;rsquo;s The Death of a Salesman comes from Uncle Ben, who describes his path to becoming wealthy as, &amp;ldquo;When I was seventeen, I walked into the jungle, and when I was twenty-one I walked out. And by God I was rich.&amp;rdquo; I wish I could describe the path to learning engineering strategy in similar terms, but by all accounts it&amp;rsquo;s a much slower path.</description>
    </item>
    <item>
      <title>Strategy resources</title>
      <link>//localhost:50916/additional-resources/</link>
      <pubDate>Tue, 21 Nov 2023 05:00:00 -0600</pubDate>
      <guid>//localhost:50916/additional-resources/</guid>
      <description>One of the hardest parts of learning about engineering strategy is finding useful resources on a topic where so much is kept private. This appendix highlights some of the public resources that I&amp;rsquo;ve found valuable during my learning experience.&#xA;My prior writing Writing an engineering strategy is a chapter from The Engineering Executive&amp;rsquo;s Primer on setting engineering strategy as an executive Write five, then synthesize is a chapter from Staff Engineer on driving engineering strategy without executive authority (primarily through documentation) Books In addition to my own Staff Engineer and The Engineering Executive&amp;rsquo;s Primer, both of which have chapters on engineering strategy, related books that I would encourage reading are:</description>
    </item>
  </channel>
</rss>
