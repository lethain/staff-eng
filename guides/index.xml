<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guides on Staff Engineer: Leadership beyond the management track</title><link>https://staffeng.com/guides/</link><description>Recent content in Guides on Staff Engineer: Leadership beyond the management track</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Will Larson</copyright><lastBuildDate>Sat, 02 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://staffeng.com/guides/index.xml" rel="self" type="application/rss+xml"/><item><title>Adam Bender - Principal Software Engineer at Google</title><link>https://staffeng.com/stories/adam-bender/</link><pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/adam-bender/</guid><description>&lt;p>&lt;span class="date fr">October, 2022&lt;/span>
&lt;a href="https://www.linkedin.com/in/theadambender">linkedin&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Tell us a little about your current role: where do you work, your title and generally the sort of work do you and your team do.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I&amp;rsquo;m a Principal Engineer at Google. In my day job I lead a team developing web infrastructure for internal enterprise applications. We develop shared UI components, make deploying new applications easier, and coach teams on frontend architecture and accessibility. Google relies on 1000s of internal applications to power everything from our Code Review processes to our financial systems, and from our physical security systems to continuous integration tooling. Often these systems are built by smaller full-stack teams that have to figure out how to harness some very powerful, and complex infrastructure to solve Google-scale business problems. My team&amp;rsquo;s job is to provide tools and libraries to enable the creation of really great webserving options and great UX for our internal systems.&lt;/p>
&lt;p>Oh, and because this is Google I have a 20% project in which I am the tech lead for Google&amp;rsquo;s general engineering practices documentation (testing, code health, code review, handling build breakages, design doc guidance, etc.). Mostly, this job is about learning how to craft policy and guidelines that can work for tens of thousands of opinionated engineers across thousands of problem domains.&lt;/p>
&lt;p>&lt;strong>&lt;em>What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>At Google, Staff Engineer is the first job level where you are accountable for business strategy. Prior to Staff, you can be largely successful just by building good technical solutions. If the project fails for business reasons, it is rarely expected that lower level engineers are responsible. Staff engineers, however, are judged by not just the technical execution but by the choice and framing of the problems to be solved as understood by the business.&lt;/p>
&lt;p>My favorite explanation of Staff Eng at Google (which is Level 6) is this: promotion to levels 4 (SWE III) and 5 (Sr. Eng) are largely about doing more individually - getting more efficient with tooling, faster at problem solving, and learning to write piles and piles of code. At L5 we start to ask for signs of leadership (basic Tech Lead stuff) but on the whole, the skill difference for levels 3 through 5 is linear (steep, sure, but linear). L6, or Staff, is more like a change in job ladder. Staff Eng at Google shares far less transfer knowledge from previous levels - skills like writing code matter less than clear communication and ability to think strategically.&lt;/p>
&lt;p>Google&amp;rsquo;s Staff Engineers are expected to solve mostly open-ended problems where solutions are not-at-all clear to very senior people who need them solved. At a company of our scale, Staff also means a lot of coordination (read: meetings, docs, and emails). Google also makes a special point of calling out the importance of Staff engineers providing mentorship to more junior folks. Perhaps the quality most often cited during promotion attempts of Staff engineers is the &amp;ldquo;ability to reduce chaos from the system&amp;rdquo;. Which means their technical solutions actively reduce complexity and technical debt. Staff engineers are expected to model excellent engineering practices with a focus on improving Google&amp;rsquo;s overall technical health.&lt;/p>
&lt;p>Having been Staff+ for a number of years now, I think this explanation is a pretty good match to my daily life, though keep in mind Google is an enormous company and this is just one perspective.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you spend your time day-to-day?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Lately I have spent most of my time on a lot of meetings, doc writing, and thinking. It takes a lot of communication to keep large projects on track and ensure everyone working on them (UX, PM, Eng etc) stay closely connected. I work on internal infrastructure so it is very engineering-driven which means a lot of the vision and strategy starts with me. I also do a fair amount of mentoring. As far as I know mentoring is the most effective way to actually grow better engineers. I try to maintain at least one or two active mentoring relationships at times.&lt;/p>
&lt;p>Because I work on fairly large projects that span many teams I have to spend a lot of time writing - writing docs about our strategy, writing docs about values, and of course docs about system designs. When I&amp;rsquo;m not writing docs, I&amp;rsquo;m reading them - both to review and to learn what&amp;rsquo;s going on around the company. I&amp;rsquo;ve found you can really scale your own impact if you can get better at written communication. I&amp;rsquo;d like to think I&amp;rsquo;ve improved as a writer, which is a good thing because Google Docs is basically my IDE nowadays.&lt;/p>
&lt;p>&lt;strong>&lt;em>Where do you feel most impactful as a Staff-plus engineer? A specific story would be grand.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I think my super power as a Staff engineer has been working across teams to make connections that might otherwise be missed. In a company as large as Google it can be really common to find the pieces of a solution to the problem you are working on already exist. However, because the pieces can be very far apart organizationally, the people working on them may not realize anyone else is working on related stuff. This isn&amp;rsquo;t a problem that just Staff-level people can solve, but we are often at the perfect place in the organizational hierarchy to have cross-org visibility and still be close enough to the technical problems to understand how to put the pieces together. A level or two lower and you&amp;rsquo;re too focused on your local problems, a level or two higher and you can easily get lost in managing an organization. Staff really is the perfect level to get into trouble :).&lt;/p>
&lt;p>A good example of this comes from my current project where we have built a new system to more rapidly create and deploy web applications. When we started the project we knew some folks in Google had done similar work in the past and there were partial solutions laying around, however, they were all command line tools. We wanted a web application to drive the process. At first we were convinced that we had to build our own, however, I happened to hear about some random web app that was being used to create &amp;rsquo;low code&amp;rsquo; applications in our global business unit. I went and took a look and I could immediately see about 70% of the tool we wanted to build. I then spent a quarter or two working with SREs from another org to connect the service that powered one of their command line tools to this web UI and I could pretty quickly see that it was going to work. I was then able to put together a team to help me realize the vision. Altogether, there were bits and pieces from our Ads SREs, our Core Web infra, a Global biz team, and then my enterprise web infra team. I had to spend a lot of time building the relationships and connecting the various teams to each other. It took some time, but in the end we didn&amp;rsquo;t duplicate anything and were able to integrate best-in-company solutions.&lt;/p>
&lt;p>Without the experience and visibility I had as a Staff engineer, I think it would have been hard to find the opportunity and recognize it for what it was. In a large company it can be really easy to let your organizational boundaries prevent you from seeing what&amp;rsquo;s possible and sometimes being in a more senior position can help you peek over the wall and see what&amp;rsquo;s going on next door.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done before reaching that title?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>It&amp;rsquo;s probably less about the specific title, but there are definitely a set of skills I have honed over the last 4-5 years that I would not be able to do my current job without.&lt;/p>
&lt;ul>
&lt;li>Comfort with conflict - once you get to leading teams of a good size, or you are working on high pressure projects, conflict will come up. I was not as good at dealing with that as I am now. I used to beat myself up anytime someone was unhappy with me and it was really painful. I still don&amp;rsquo;t like making people unhappy, but I also have more courage and confidence in my abilities so I&amp;rsquo;m better at not letting it get to me.&lt;/li>
&lt;li>Seeing things from a systems perspective - Some might call it being strategic, but I like the idea of systems thinking. My job is now as much about how to solve today&amp;rsquo;s problem as it is understanding what might be a problem tomorrow. I need to understand what trends are happening inside and outside the company and figure out how that may start impacting my goals over the next N years. The corollary to that is I need to be able to take a very long view of success. For example, when migrating a fleet of 100s or 1000s of applications from one UI framework to another, success takes 5+ years to land. I have to pace myself and find a way to appreciate the progress we make during the journey.&lt;/li>
&lt;li>Understanding the role of values and culture - One of the challenges I had to wrestle with as I started growing at Google was that I couldn&amp;rsquo;t make all the decisions. I really really wanted to, but I just became a bottleneck. I&amp;rsquo;ve had to learn how to develop team-level values that create a specific culture that ultimately produces the kind of outcomes I want. I had to look way up stream from the problems I was seeing to recognize that the incentives and values I created for a team were the key to scaling my technical philosophy.&lt;/li>
&lt;li>Project management - I have found that being a project management geek has helped me understand how to navigate long running projects with high degrees of coordination.&lt;/li>
&lt;/ul>
&lt;p>These skills have allowed me to take on much bigger projects with much longer time horizons than I ever would have been able to tackle before. When I started at Google 10 years ago, I would have been happy planning a project that lasted 6 months and landing it the way I wanted. Now I&amp;rsquo;m comfortable trying to figure out what a 5-7 year effort will have to look like.&lt;/p>
&lt;p>&lt;strong>&lt;em>Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for? Can you share a story of influencing your organization?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I consider myself a full time advocate for a number of things:&lt;/p>
&lt;ul>
&lt;li>Frontend development - I am trying to improve both how we execute but also how Google values it. Frontend development is not always seen as a &amp;lsquo;hard engineering problem&amp;rsquo; at Google. I mean we work on a lot of hard things at Google so I get it, but I have spent a lot of time talking to managers and writing supporting guides for performance reviews to help Frontend engineers talk about their work in a way that highlights the difficulty.&lt;/li>
&lt;li>Engineering leadership - I run classes and internal conferences to help grow a new generation of technical leaders, hopefully helping them avoid some painful traps. This is probably the advocacy I&amp;rsquo;m most proud of. I learn so much about my own leadership skills when I teach and facilitate leadership classes. It&amp;rsquo;s made me appreciate how little our industry seems to be invested in growing people effectively.&lt;/li>
&lt;li>Engineering Excellence - I am Google&amp;rsquo;s Code Health Practices lead so I write, edit, and curate a set of documentation on how to improve the health of large, legacy code bases.&lt;/li>
&lt;/ul>
&lt;p>Most recently I advocated for changes to a couple engineering job ladders to make sure Code Health was explicitly called out as a key skill for Staff+ roles. I think the omission was an oversight, but it&amp;rsquo;s not trivial to advocate for changes to a job ladder that affects 10s of thousands of people.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you keep in touch with how things really work as you spend less time on hands-on development?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I stay curious. It&amp;rsquo;s a simple idea, but hard to practice. What it means day-to-day is that I read a lot of docs about all kinds of things happening at Google. I talk to a lot of engineers I work with. I try to still do code reviews from time-to-time. I lurk on 100+ mailing lists to hear what people are complaining about. I just try to really listen to what is going on around me and occasionally fall down a rabbit hole learning about some part of Google I never knew existed. I&amp;rsquo;m also starting to experiment with pairing office hours where I block an hour or two a week to just sit with engineers on my team while they write code.&lt;/p>
&lt;p>&lt;strong>&lt;em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I make an explicit point to be a sponsor for all the engineers on my team. I try to coach them through skills growth, advocate for them to our leadership, and when it comes time to promotion I&amp;rsquo;ll work with everyone of them to help get their promotion packages in good shape. In addition, I try to always have at least one or two folks outside my team that I am working with as a mentor. Investing in making people around me successful is probably one of the most rewarding things I do. It turns out that people really remember you when you invest in them and most are eager to pay you back when they can.&lt;/p>
&lt;p>&lt;strong>&lt;em>You first got the title Staff engineer at your current company. What was the process of getting promoted to Staff?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Mechanically, it&amp;rsquo;s really no different than getting promoted to any other level at Google. You may have read that Google&amp;rsquo;s promotion process is quite involved. There are “360 reviews” + independent committee assessments of the work you do. This historically has involved engineers writing something that looks like a thesis defense justifying their work. The process has undergone some substantial changes lately so this answer may be out of date by the time you read this :). If you are thinking about applying at Google, don&amp;rsquo;t let this part scare you off!&lt;/p>
&lt;p>If I think a little more deeply about the question, there is actually a step before promotion is possible, and that is identifying a Staff-level opportunity. At Google a promotion is typically given once you demonstrate that you can do the work of the next level sustainably. In practice that means that you need to deliver Staff caliber work for something like a year prior to going up for promotion. Depending on what part of the company you are in this can be easier or harder. Staff problems at Google usually involve setting the technical direction for multiple small teams (3-4 people) or one large team (15+). The projects will typically have time horizons of at least a year. Some teams don&amp;rsquo;t have many Staff sized problems and if those problems are already being worked on by other Staff engineers you may need to go find another project. Once you find the right opportunity then you just need to do the job and deliver. Googlers like to say that their promotion process is ‘eventually consistent’ and once you are successful on Staff-scale project it’s usually just a matter of time before promotion happens.&lt;/p>
&lt;p>&lt;strong>&lt;em>What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Being at Google I have been incredibly lucky to be in proximity to some enormously talented engineers. Watching them work through tough decisions or deal with various kinds of crises has helped me grow much faster than I might have at another company. To be clear, I don&amp;rsquo;t think this phenomenon is unique to Google. I think anytime you can work with people who have a lot more experience than you, but who also care enough to mentor you, it&amp;rsquo;s really a perfect training ground. This can happen at large companies or small ones. The key is that you are in an environment that supports your development and puts you in proximity to real world experience that stretches you.&lt;/p>
&lt;p>The important thing I had to keep in mind, and still do to some degree, is that growth is often uncomfortable. Learning new skills, trying techniques, working in new ways - all of it requires vulnerability and taking the risk of being wrong. Getting things wrong is a matter of when, not if. As I approached Staff I found myself having to grow a lot in ways that I wasn&amp;rsquo;t really prepared for: greater degrees of delegation, communicating with directors and VPs, less time writing code, more accountability. I had to learn to keep track of my mental health more closely. I&amp;rsquo;ve since taken up therapy and mountain biking, both of which help me manage the discomfort I feel as I learn how to navigate bigger and more challenging problems at work (and also in life).&lt;/p>
&lt;p>The one other factor I think I can credit for my ability to rise to Staff Engineer is that I really invested in learning how to communicate, both by writing and by speaking. I&amp;rsquo;m convinced that being a compelling and clear communicator is a powerful skill that can increase the impact of the work you do. Whether it is making the case to fund a project, or changing the morale of the team. Being able to communicate with confidence to a room full of people, or write detailed and useful design docs, can be the difference between breaking through tough problems or remaining stuck. At the Staff level getting stuff done almost always means working with other teams of people. You need to learn how to communicate well to be effective.&lt;/p>
&lt;p>I know that communication is a tough skill to learn. Introverted folks don&amp;rsquo;t always feel comfortable putting themselves out there. Mistakes made in communication can amplify feelings of self-doubt. Not to mention that the way we define successful communication is often based on what has worked for white men in power.&lt;/p>
&lt;p>Having said all that, I would encourage every engineer who wants to see more success - even if that doesn&amp;rsquo;t mean becoming a Staff Engineer - to work on improving your communication skills. Start a blog, teach a class, do something to practice connecting and communicating with other people. Find your voice and then use it.&lt;/p>
&lt;p>&lt;strong>&lt;em>There is a popular idea that becoming a Staff engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I did indeed have a Staff project because at Google it is practically a requirement. As I mentioned in the promotion process question above, you have to demonstrate that you can do the job of a Staff Engineer for at least a year before you will get promoted. My Staff project involved building and running two subsystems in a larger customer support voice solution. I was responsible for the &amp;lsquo;soft phone&amp;rsquo; application that ran on customer support rep desks and I was also responsible for the high performance configuration data storage layer for the entire system of 15 plus services (you&amp;rsquo;d be surprised how complex a customer support business can be!). I was the TL on the softphone application for a number of years (it actually got me promoted to L5 and L6). In order to take on the new config storage system I needed to delegate some work and I decided to train a new TL. This allowed me to focus more time on bootstrapping the new system. Eventually, I put a TL in charge of the config system as well and I acted as &amp;ldquo;TL of TLs” for both systems. Juggling between the two appears to be enough to have gotten me to Staff.&lt;/p>
&lt;p>In hindsight, I don&amp;rsquo;t think I would recommend this exact approach to others. The projects were just too different from each other and that made it really hard for me to context shift between them. I think if you want to run multiple projects at once, it&amp;rsquo;s a good idea to try and make sure there is some &amp;ldquo;synergy&amp;rdquo; between them so that you don&amp;rsquo;t have to maintain two distinct sets of context.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>&amp;ldquo;What got you here, won&amp;rsquo;t get you there.&amp;rdquo; This was something that I heard a lot when I was a Senior Software Engineer who was curious about being a Staff Engineer. At first it seemed like one of those management tautologies. Over time I came to see it more as a challenge. What am I doing today? How am I doing it? Is this what I need to be doing to continue to grow? What would it look like if I did things differently? When it came to the Staff promotion specifically, this piece of advice was spot on. As I mentioned above, the skill set needed to be a successful Staff Engineer at Google looks very different than the levels before. If I hadn&amp;rsquo;t challenged myself to approach leadership, technical decision making, or planning differently, I don&amp;rsquo;t think I would have been able to get to Staff.&lt;/p>
&lt;p>&lt;strong>&lt;em>What about a piece of advice for someone who has just started as a Staff engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Don&amp;rsquo;t panic! You have arrived at a place in your career where you are going to need to grow entirely new kinds of skills. It is going to hurt a little. You are going to make mistakes. It will feel a little like you are learning to do things for the first time. THAT&amp;rsquo;S OK. Don&amp;rsquo;t get too in your head about it. People clearly trust you to get the job done, and like you have in your career before, you will figure it out. All you have to do is be a little patient and open to the idea that there are new ways to solve problems. Not everything is a technology problem. Some of the hardest and most rewarding solutions come from getting people around you to work together to build something bigger and better any of you could have built alone. YOU CAN DO THIS.&lt;/p>
&lt;p>&lt;strong>&lt;em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I actually manage right now, but it is a very small team. Most managers at my level are easily managing 30+ people. I&amp;rsquo;m managing around 15, but only two people directly. I have found I actually enjoy management of a small group and as a Tech Lead/Manager I am able to join the people development brain with the technical execution brain and it saves me a few negotiations with another manager. Having said that, I don&amp;rsquo;t necessarily recommend this route for everyone. Being a manager is hard work and requires a whole different set of skills to being a Tech Lead. Worse, if you do a bad job with management you risk hurting people&amp;rsquo;s lives a lot more.&lt;/p>
&lt;p>I do think management is something more people should try in a controlled fashion, but make sure that you are doing it for the right reasons. Don&amp;rsquo;t become a manager just to get promoted. If you do it, put your whole heart into it because your people are counting on you.&lt;/p>
&lt;p>&lt;strong>&lt;em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>General People:&lt;/p>
&lt;ul>
&lt;li>Martin Fowler - A legend in this industry. So much of my early career was influenced by his thinking.&lt;/li>
&lt;li>danah boyd - such great insights into the (not always great) impact of technology on people.&lt;/li>
&lt;li>Brett Victor - I sometimes feel like he has been given a gift from the future and we are just finding out about it now.&lt;/li>
&lt;li>Randall Monroe - He has such a gift for making the (highly technical) absurdities of our world so easy to laugh at.&lt;/li>
&lt;li>Neal Ford (from thoughtworks) - Truly excellent communicator. He inspired me to learn how to give a better tech talk.&lt;/li>
&lt;li>Venkat Subramaniam (from Agile Developer) - Similar to Neal, Venkat has such energy and a passion for his craft.&lt;/li>
&lt;/ul>
&lt;p>Books:&lt;/p>
&lt;ul>
&lt;li>The Design of Everyday Things&lt;/li>
&lt;li>Clean Code&lt;/li>
&lt;li>Growing Object Oriented Software Guided by Tests&lt;/li>
&lt;li>The Pragmatic Programmer&lt;/li>
&lt;li>Working Effectively with Legacy Code&lt;/li>
&lt;li>Refactoring&lt;/li>
&lt;li>Object Thinking&lt;/li>
&lt;li>Godel, Escher, Bach - This one can be controversial, but it really got me to stretch the way I think about computing and that in itself is worth a lot.&lt;/li>
&lt;/ul>
&lt;p>Blogs/Podcasts:&lt;/p>
&lt;ul>
&lt;li>High Scalability&lt;/li>
&lt;li>InfoQ (used to have a ton of great videos from so many conferences)&lt;/li>
&lt;li>infrequently.org&lt;/li>
&lt;li>Stratechery&lt;/li>
&lt;li>apenwarr.ca&lt;/li>
&lt;li>Thoughtworks Podcast&lt;/li>
&lt;/ul>
&lt;p>Googlers who&amp;rsquo;ve inspired me:&lt;/p>
&lt;ul>
&lt;li>Robert Konigsberg - Who helped me truly find my voice.&lt;/li>
&lt;li>Titus Winters - Who has given me so much support and opportunity over the years.&lt;/li>
&lt;li>George Fairbanks - Whose deep thoughts on the craft of software development have caused me to think much more deeply about the work I do.&lt;/li>
&lt;li>Michelle Levesque - Who probably doesn’t remember me, but she showed me what authentic and inspired technical leadership can look like.&lt;/li>
&lt;/ul></description></item><item><title>Ryan Bergman - Senior Staff Engineer at John Deere</title><link>https://staffeng.com/stories/ryan-bergman/</link><pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/ryan-bergman/</guid><description>&lt;p>&lt;span class="date fr">January, 2022&lt;/span>
&lt;a href="https://ryber.github.io/">blog&lt;/a>,
&lt;a href="https://twitter.com/ryber">twitter&lt;/a>,
&lt;a href="https://www.linkedin.com/in/ryan-bergman-3665763/">linkedin&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Tell us a little about your current role: where do you work, your title and generally the sort of work do you and your team do.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I am a senior staff engineer at John Deere Intelligent Solutions Group (ISG) out of Des Moines, Iowa. As you may know, John Deere is a large manufacturer of farming, forestry, construction and turf equipment. The group I work for is responsible for the more advanced computer systems that go along with the equipment. This includes autonomous tractors, displays, navigation, telematics and cloud based data processing.&lt;/p>
&lt;p>I mainly work on the cloud processing side where we take streaming data from planters, sprayers and harvesters and create artifacts and reports so farmers can work with agronomists and others on their operations.&lt;/p>
&lt;p>I&amp;rsquo;ve been with ISG for 10 years. It&amp;rsquo;s a really big domain and it&amp;rsquo;s easy to move around and try out different things. Some of the bigger things I&amp;rsquo;ve worked extensively on include:&lt;/p>
&lt;ul>
&lt;li>&lt;em>Remote Display Access&lt;/em> which lets users remote into their equipment from anywhere with a computer or mobile device.&lt;/li>
&lt;li>The initial agronomic data processing and reporting systems.&lt;/li>
&lt;li>I was the lead product engineer for our data sharing and userland permission systems.&lt;/li>
&lt;li>Public API access and authorization (oAuth systems)&lt;/li>
&lt;/ul>
&lt;p>We also have a test farm just outside of town, and on a nice fall day, I can manage to schedule some time out there and let a tractor drive me around for an afternoon. That&amp;rsquo;s not something a lot of tech jobs offer!&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you spend your time day-to-day?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I basically have two modes:&lt;/p>
&lt;p>&lt;em>R&amp;amp;D Mode&lt;/em>&lt;/p>
&lt;p>I tend to be given experimental projects to flesh out and see if they can work or not. These are often with partners and suppliers and require a lot of external communication. The stacks at ISG can get really big, from embedded C++ on the tractors, to the communication systems, to the cloud processing. Getting your head around all of that at once is impossible, so I coordinate with different teams. You really have to be a bit of a social butterfly. It&amp;rsquo;s a little like what you would expect out of an architect but I do a LOT more coding than most architects I know. If any of the code I write makes it to production it&amp;rsquo;s usually some core logic I wrote into a library. I may or may not work with a specific team on these projects, or I may just hijack some developer to help me, or I&amp;rsquo;ll bounce around. It also gets me out of the office and fun trips to places like San Francisco, Seattle, or Waiverly Iowa when there isn&amp;rsquo;t a global pandemic going on.&lt;/p>
&lt;p>&lt;em>Chaos Mode&lt;/em>&lt;/p>
&lt;p>Chaos mode is where I spend the entire day on MS Teams (or wandering the office pre-COVID) just helping people. I get hit up for a lot of different reasons and I have a deep history with a variety of different systems. Some days I just hop from one problem to another unblocking. Hopefully someone kidnaps me to do some pair or mob programming. This is an great use of my time. Even if I get nothing of my own done, unblocking 5 different teams to get their work done is always worth it. I&amp;rsquo;ve learned that some days are just going to turn into this like it or not, so you might as well dive in head first.&lt;/p>
&lt;p>&lt;strong>&lt;em>What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>There are really two sides for what folk are looking for at this level. You need to be very technically capable but you also need to be someone people want to work with. Folk are going to come to you with problems they need solutions for and they want someone pragmatic and creative and empathetic to their goals. They also want someone who understands all the parts that are going to have to change. Not just some small part of it.&lt;/p>
&lt;p>Education-wise, I took an alternative path to this position. As a kid with undiagnosed ADHD and dyscalculia I developed an adversarial relationship with math. While I loved computers and loved hacking at home. I believed that a CompSci major wasn&amp;rsquo;t something I was going to be able to do. So I went into the arts with the idea that I could back into computers from graphic design. I actually ended up majoring in City Planning (also in the design college). and then during the first dot-com boom I took a job with a tech startup doing web design while waiting for my fiancée to graduate. I never went back to planning and slowly worked my way down the stack. Still, I find I use my major all the time. Lots of city planning is about politics and how to navigate different groups with different agendas and needs. Once you&amp;rsquo;re a little higher up in the org this is absolutely necessary. I also learned about things like long term project management, how to run a public meeting, and GIS systems which have helped while working on agronomic data.&lt;/p>
&lt;p>&lt;strong>&lt;em>What’s your advice to people pursuing a Staff role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>From a tech perspective, constantly reach outside of your comfort zone and your existing wheelhouses. I&amp;rsquo;ve been programming professionally for 20 years and at different times I&amp;rsquo;ve had Perl, ColdFusion, PHP, JavaScript, C#, Java, and Scala all be the primary world I lived in. Nothing is a hammer and nothing won&amp;rsquo;t eventually be replaced (except C).&lt;/p>
&lt;p>Being a senior staff engineer means understanding both low level code and &lt;em>systems of systems&lt;/em>. I recommend reading up on &amp;ldquo;systems thinking&amp;rdquo; to understand the later. Everything exists as a whole. Microservices don&amp;rsquo;t exist in isolation, they are all part of giant distributed monoliths. Once you&amp;rsquo;re at the staff engineering level you need to understand the deep relationships that every part of your org&amp;rsquo;s tech stack has on each other and on the outside world!&lt;/p>
&lt;p>From a person perspective and especially if you&amp;rsquo;re in a large org where there are lots of teams it becomes important to know about the org landscape. Who are the people you&amp;rsquo;re going to need to communicate with, to persuade, to influence. I&amp;rsquo;m not a naturally extroverted person, and I don&amp;rsquo;t do a lot of socializing or schmoozing, but I keep some notes and important emails so I can go back and figure out &amp;ldquo;oh yeah, who is working on that now&amp;rdquo;? The wider the net of people, the more influence you have and the better chance you&amp;rsquo;re going to get promoted. I don&amp;rsquo;t know anyone who got to staff on purely tech reasons. Lots of them are quiet and introverted, but they&amp;rsquo;re also friendly and helpful and approachable.&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>Some of Ryan's Public Work&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=k6_xlRUNzF0">Walking Into Mordor: The History &amp;amp; Future of Devops (DevOpsDays Keynote)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=TGs0YbAR_hs">From Big Bangs To Crockpots: Strategies For Changing Prod With No Downtime&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ryber.github.io/blog/2017/08/24/the-nature-of-programming/">The Nature of Programming&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;strong>&lt;em>Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for? Can you share a story of influencing your organization?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Advocating for all these things is in fact, my primary job. I was originally hired at John Deere as a senior developer and as somewhat of a XP coach. I came from one the primary places in town that practiced TDD, CI, and small batch releases. This was 2011, and many of these things were not common yet.&lt;/p>
&lt;p>So I started at the lowest level. &amp;ldquo;Let&amp;rsquo;s do TDD&amp;rdquo; and I worked my way out from there. While I still care today that the teams are doing TDD, I spend more time advocating for tech changes.&lt;/p>
&lt;p>Several years ago I was given ownership of the permissions subsystem called SOUP (Security, Organizations, Users, and Partnerships). It was not my favorite part of the system but apparently it got out that I had opinions about it. So I grabbed one other developer and we went to work at what was mostly a gigantic refactoring to get a model that was unified and easy to inspect and slice in the ways the various systems needed. In the end we replaced multiple different sub-systems including a custom RBAC and a LDAP repo with a single rdbms table. We also built out many support tools and reports that didn&amp;rsquo;t exist yet. The one hard part was getting alignment to do the outside work of doing a large change to the permission systems. That means UX, documentation, training, marketing, more UX and user testing. These parts were far more challenging from the people side than the tech. I had to spend a lot of time with different product owners showing them the benefit to their own systems and explaining that if they wanted feature x, it would cost significantly less (or even be possible), if we can just align a little work across these other teams.&lt;/p>
&lt;p>Eventually we did get it all done and a couple years later I still get complemented on the subsystem we made and about how elegant it is. Little do they know that this is the 4th of this type of system I&amp;rsquo;ve designed in my career. You really don&amp;rsquo;t get a system right until the 4th time.&lt;/p>
&lt;p>&lt;strong>&lt;em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>At various points in my career I&amp;rsquo;ve been a manager. Usually of a pretty small number of people, usually my own team. I have been told by some of my employees that I was a good manager and I believe them, but the role isn&amp;rsquo;t one I seek out or desire. It&amp;rsquo;s not a passion. I love people and I love leading, I don&amp;rsquo;t love being a gatekeeper to someone else&amp;rsquo;s career. I also find it hard to divide being responsible for tech and people at the same time. I think they&amp;rsquo;re just too different. I honestly don&amp;rsquo;t think managers should have any stake in their employees work. They should either be concerned with the employee, or the project, not both. That&amp;rsquo;s a conflict of interest. So if I could find a position where I&amp;rsquo;m ONLY responsible for mentoring and teaching, I think I would deeply enjoy that.&lt;/p>
&lt;p>&lt;strong>&lt;em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em>&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Ron Jeffries: He has an &lt;a href="https://www.ronjeffries.com/">excellent blog&lt;/a> and over the pandemic has been recreating &lt;a href="https://www.ronjeffries.com/categories/invaders/">classic video games&lt;/a>. It&amp;rsquo;s quite fun to watch and play along. He also has a fantastic book on the &lt;a href="https://ronjeffries.com/articles/nature/">Nature of Software Development&lt;/a>&lt;/li>
&lt;li>As much I enjoy TDD, I have found BDD to be equally, maybe even more important in the way I develop systems. &lt;a href="https://lizkeogh.com/">Liz Keogh&lt;/a> has been a big influence on me.&lt;/li>
&lt;li>The concept of using &amp;ldquo;real options&amp;rdquo; in software development has been a big influence on the way I think about things. &lt;a href="https://commitment-thebook.com/">Commitment&lt;/a> by Chris Matts, Olav Maassen, and Chris Geary is a short and fun introduction to the concepts (it&amp;rsquo;s a graphic novel)&lt;/li>
&lt;/ol></description></item><item><title>Rebecca Panja - Staff Engineer at Medium</title><link>https://staffeng.com/stories/rebecca-panja/</link><pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/rebecca-panja/</guid><description>&lt;p>&lt;span class="date fr">October, 2021&lt;/span>
&lt;a href="https://rebecca.medium.com/">blog&lt;/a>,
&lt;a href="https://twitter.com/rebeccapanja">twitter&lt;/a>,
&lt;a href="https://www.linkedin.com/in/rebeccapanja/">linkedin&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Tell us a little about your current role: where do you work, your title and generally the sort of work do you and your team do.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I am a Staff engineer at Medium and Team Lead of Payments. Payments is responsible for two core areas:&lt;/p>
&lt;ul>
&lt;li>Inflow of payments: enabling users to purchase membership and other products as smoothly as possible, supporting multiple payment providers globally&lt;/li>
&lt;li>Outflow of payments: paying Partner Program writers each month, calculating earnings, taxes and the systems to facilitate these payouts&lt;/li>
&lt;/ul>
&lt;p>This puts my team at a unique intersection of product and infrastructure. Along with delivering great user experiences, maintaining a high bar for security, preventing fraud and building trust with writers and readers is crucial.&lt;/p>
&lt;p>Apart from these core areas, there are many initiatives like launching &lt;a href="https://blog.medium.com/evolving-the-partner-program-2613708f9f3c">referred memberships&lt;/a>, free trials, &lt;a href="https://medium.com/gift">gifting&lt;/a> that fall under the Payments domain. What excites me most about this domain is how much it is evolving both within Medium and in the world, especially in the context of creator economy.&lt;/p>
&lt;p>As Tech Lead, I play the role of technical partner to product and engineering manager. I am responsible for ensuring our architecture choices in the Payments domain serve the organization’s future needs and for defining the technical vision for Payments team. I advise other engineering teams and cross-functional partnerships for both immediate projects and long-term alignment, mentor team members and improve team processes. I also delve into early research to test viability of project ideas and high level scoping.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you spend your time day-to-day?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I like dedicating specific days to certain types of tasks. When this isn’t feasible, I still do calendar blocking. I find it very helpful to segregate chunks of time especially when switching gears between long term vision projects, nitty-gritty of ongoing projects and coding.&lt;/p>
&lt;p>During the initial phase of a project, a lot of my time is dedicated to writing or reviewing technical architecture specs along with cross-functional syncs with other engineering teams, product, design, and marketing to gain alignment. This transitions into planning for launch once things are in flux, like metrics to measure, rollout plan and organizing or delegating bug bashes. One of my favorite processes is a pre-mortem meeting with all stakeholders involved to anticipate what might go wrong and how we might address these issues.&lt;/p>
&lt;p>Apart from this, the constants each week are coding regularly, reviewing technical specs and pull requests, team meetings (sprint planning, retrospective, standup) and a leads sync meeting.&lt;/p>
&lt;p>&lt;strong>&lt;em>What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>As a founding engineer, I quickly learnt that high impact projects are more valuable than perfect execution on smaller scale projects. Even as I moved to a larger company, this view helped me stay focussed on thinking about how I can add more value to the engineering organization and company instead of following the growth rubric to a T or optimizing for short term wins. I like to use the &lt;a href="https://rebecca.medium.com/make-better-decisions-ask-the-right-questions-8db76697b670">10/10/10 approach&lt;/a> when thinking about long term decisions - how will I feel about this decision in 10 minutes? 10 months? 10 years?&lt;/p>
&lt;p>Since early on in my career, I was consistently taking on things I had no idea how to do and with limited resources. Accomplishing these challenges over the years helped me build confidence to take on projects with larger ambiguity, which is a big part of a Staff Engineer’s role.&lt;/p>
&lt;p>Visibility is an important aspect of getting to Staff. When describing projects and achievements, I found it immensely helpful to frame projects and achievements in terms of impact to the company instead of only technical complexity and direction. This is especially true when the audience is non-technical.&lt;/p>
&lt;p>&lt;strong>&lt;em>What’s your advice to people pursuing a Staff role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Some tactical advice:&lt;/p>
&lt;ul>
&lt;li>Keep a record of things you’ve accomplished week to week, often known as a Hype Doc. I tracked what projects I worked on, my role in them, why the project matters, technical details, and most importantly what value it delivered to the company. Github PR links, screenshots and anything else that can add more details are also great to add. There’s no better person than you to give context for all your work, and this doc makes it extremely easy for you/your manager to put together a promotion packet.&lt;/li>
&lt;li>Instead of focussing solely on a Staff project, explore other ways of improving the organization like processes and such. A staff project is not a necessity by any means, but it can help establish domain or product area expertise.&lt;/li>
&lt;/ul>
&lt;p>Mindset shifts:&lt;/p>
&lt;ul>
&lt;li>Once it’s established that you can constantly execute well and deliver, the returns on committing code are diminishing. Focus less on committing code and more on technical architecture and project orchestration.&lt;/li>
&lt;li>The formal title is a lagging indicator of the role you’ve already been performing at. This is especially true for Staff where the role is still vaguely defined in most companies.&lt;/li>
&lt;/ul>
&lt;div class="pull">
&lt;p>&lt;strong>Some of Rebecca's writing&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://rebecca.medium.com/lessons-from-a-decade-of-work-c04abfe25d65">Lessons from a decade of work&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://rebecca.medium.com/a-practical-guide-to-your-next-frontend-feature-launch-1a44a443efef">A practical guide to your next frontend feature launch&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://rebecca.medium.com/make-better-decisions-ask-the-right-questions-8db76697b670">Three Questions to Better Decisions&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;strong>&lt;em>Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for? Can you share a story of influencing your organization?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Yes, along with empowering others to advocate for the technology or process changes they deem important.&lt;/p>
&lt;p>When the company went remote in 2020, I started an Engineering Communications Initiative to address the growing communication gap. I set up an internal newsletter as part of this, approached some team members to come onboard as contributors and editors, and then grew the team to a diverse group of 5. The newsletter covered announcements and open opportunities, demos of what teams were working on, learnings from other teams, and People Spotlight which was one of my favorite sections!&lt;/p>
&lt;p>I also put together a proposal for smoother team transitions and internal onboarding. I collaborated with many engineers across the org as part of initial research and feedback phases, and got this proposal approved and added to the engineering manager handbook.&lt;/p>
&lt;p>Within the team, we have a process of verification which is much like reviewing PRs, except with a focus on product and user experience instead of code. At one time, the team was getting bogged down in this process so I revamped it to streamline things. The new changes also needed team members to have enough context which encourages us as a team to avoid engineering silos.&lt;/p>
&lt;p>&lt;strong>&lt;em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Yes, I wouldn’t be here without the opportunities given to me and it’s one of my core values to do the same for others. It’s incredibly rewarding to see the people around me grow and thrive.&lt;/p>
&lt;p>For me, sponsorship starts with good listening, being approachable and asking good questions to understand where someone’s interests lie. Prior to becoming Staff, it would look like sharing someone’s contribution that I found particularly helpful with a broader audience, making introductions, encouraging someone to participate in a discussion. Nowadays, I can create more opportunities and encourage people to grow into them. This can look like finding projects or tasks that would be growth opportunities for someone, nominating someone to be a project lead, or suggesting someone as DRI (Directly Responsible Individual) for org-wide initiatives.&lt;/p>
&lt;p>With having more visibility in the org, I realized how even with a transparent culture where docs are visible to everyone, we need to push out information about new opportunities rather than rely on people to find these. As part of the internal newsletter I started, I shared these new opportunities widely and was happy to give a nudge of confidence to someone who was interested and just needed an extra push.&lt;/p>
&lt;p>I remember thinking early on that only engineering managers or leadership could sponsor, but in reality it can come from anyone and in many forms.&lt;/p></description></item><item><title>Mikhail Chernykh - Technical Lead at Indeed</title><link>https://staffeng.com/stories/mikhail-chernykh/</link><pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/mikhail-chernykh/</guid><description>&lt;p>&lt;span class="date fr">July, 2021&lt;/span>
&lt;a href="https://netme.dev">blog&lt;/a>
&lt;a href="https://twitter.com/netme">twitter&lt;/a>,
&lt;a href="https://www.linkedin.com/in/chernykh/">linkedin&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Tell us a little about your current role: where do you work, your title and generally the sort of work do you and your team do.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I’m currently working as a Technical Lead (or a Staff Engineer) at &lt;a href="https://indeed.com">Indeed&lt;/a>, the world’s number 1 job site&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, whose mission is to help people get jobs. Over the past two years, I have been helping the Indeed Apply team build the next generation of the Application Submission platform, which has resulted in a better user experience for millions of job seekers worldwide. Nowadays, I’m driving a few major initiatives related to an advertising platform here in Europe.&lt;/p>
&lt;p>I have a broad scope of responsibilities, including setting the technical direction for the teams I’m working with, doing high-level planning, driving design reviews, and helping engineers to grow. I also collaborate with different internal and external teams, participate in company-wide technical initiatives and lead a Guild.&lt;/p>
&lt;p>&lt;strong>&lt;em>What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>At Indeed, Staff-plus Engineers act as technical leaders in their domains. The more you grow, the bigger scope you get. Indeed is a pretty big and diverse company. Staff-plus Engineers can act slightly differently depending on the needs of the team and the current state of their project. Engineering and Product Managers treat Staff-plus Engineers as their counterparts. This helps us to be successful in the majority of our engineering initiatives and my role doesn’t feel any different.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you spend your time day-to-day?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Indeed has technical hubs all over the world and although I am based in Europe, I’m usually meeting colleagues from Tokyo, Singapore, Hyderabad, Austin, Sunnyvale and Vancouver throughout the day. My most productive time is in the middle of the day and I keep a few hours a day to concentrate on technical designs and to work on the most critical projects. To make my days even more productive, I try to cluster my meetings based on a specific theme. For example Tuesdays are my Guild days and most of my 1:1 meetings fall on Thursdays.&lt;/p>
&lt;p>&lt;strong>&lt;em>Where do you feel most impactful as a Staff-plus Engineer? A specific story would be grand.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>During my first few quarters at Indeed, I was helping the Indeed Apply team building the next generation of the Application Submission platform. This included a lot of design, collaboration, and prototyping work in the beginning. I’ve used the implementation phase as a good opportunity to revise our technical stack, build even more automation, and bring new methodologies, which helped the team to release software faster and in a more reliable way.&lt;/p>
&lt;p>One of the core values of Indeed is being data driven: we need to make sure that our job seekers are shown to the jobs and employers in the most accurate way. Therefore my team and I spent a good amount of time planning and executing the migration of our traffic from the old platform to the new one. Building reliable metrics helped us to measure our progress and identify the implementation gaps.&lt;/p>
&lt;p>Communication is key. Active collaboration with other teams, Engineering and Product managers, clean backlog, and weekly reporting was also very important for our project success.&lt;/p>
&lt;p>As a result, this project brought a new user experience for job seekers all over the world and enabled the Indeed Apply product to support new ways of applying for a job, like using a chat-bot.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done before reaching that title?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>One of the things I can think about is the level of the impact. At the beginning of my tech career, my scope was pretty limited to specific features of a product. When growing to the senior level I was able to own team components end to end. Now my influence is getting spread bigger and bigger across the organisation.&lt;/p>
&lt;p>Indeed has a very supportive environment. With every successfully delivered project, your scope and potential impact is increased. After a few successful quarters with my team, I have a great overview of the biggest challenges for our organization and am able to influence a few important projects in our area.&lt;/p>
&lt;p>&lt;strong>&lt;em>Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for? Can you share a story of influencing your organization?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>At Indeed, we have many different ways of influencing different technical communities. That includes tech-wide design reviews, working groups, guilds, and technical lead meetings.&lt;/p>
&lt;p>One of the recent success stories on influencing is the GraphQL Linter tool, which we’ve built together with my peers from the GraphQL Guild. As GraphQL is a hot topic in our organization, this tool helps the engineering teams to comply with Indeed API standards by providing real-time feedback. As a result, we started spending less time during the API design review process.&lt;/p>
&lt;p>The next topic I’m planning to address is code quality. By making code quality measurable and gamifying the process, we are planning to raise a code quality bar and make our engineering organization more efficient.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you keep in touch with how things really work as you spend less time on hands-on development?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I&amp;rsquo;m still trying to dedicate a good amount of time to prototype different systems we are building. This helps me to get more fundamental knowledge.&lt;/p>
&lt;p>For example, recently one of my teams was building a new system using Kafka. Knowing that will come, I&amp;rsquo;ve spent some time playing with Kafka Streams library to build a very small prototype. This has helped me to better understand some core concepts of this library and influence the team&amp;rsquo;s technical direction during one of the first iterations on the new service.&lt;/p>
&lt;p>&lt;strong>&lt;em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I find sponsorship very important. One of my main goals is to bring engineers I&amp;rsquo;m working with closer to the rest of our organization. During our 1:1s, I&amp;rsquo;m usually trying to understand what drives people. And then, once I see a nice opportunity in the organization, I&amp;rsquo;m trying to connect talented engineers with the initiative owners.&lt;/p>
&lt;p>&lt;strong>&lt;em>You first got the title Staff Engineer at your current company. Were you hired as a Staff Engineer? If not, what was the process of getting promoted to Staff?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I was hired directly to the Staff level at Indeed. Before I had a very similar Lead Engineer role in another company. The promotion process at Indeed is very transparent. There is a set of skills required to be successful on the next level. Once you show these skills consistently during the past quarters, you stand a good chance of being promoted. For getting promoted into the Staff Engineer role, we are looking for technical leadership skills which help a small team of 1-3 developers drive major initiatives inside the organization.&lt;/p>
&lt;p>&lt;strong>&lt;em>What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>My journey was pretty complicated. Before joining Indeed I worked for many different companies in both senior and leadership roles. That helped to build different skills in planning and executing complex projects.&lt;/p>
&lt;p>My European location is now helping me a lot to be successful. I can collaborate with teams across multiple technical hubs. This gives me a lot of breadth in running the projects and makes the Staff-plus Engineering path especially attractive.&lt;/p>
&lt;p>&lt;strong>&lt;em>There is a popular idea that becoming a Staff Engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Even though the idea of a &amp;ldquo;Staff Project&amp;rdquo; looks very attractive, at Indeed we value the impact, behaviors, and skills which are required to be successful in the Staff role. Depending on the team, that can be achieved by contributions to a large existing project or building a series of smaller impactful projects. Once you&amp;rsquo;ve been recognized as a Staff contributor, your level will change.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>One of the best pieces of advice I&amp;rsquo;ve got was to build your network of Staff-plus engineers. The more you are connected in the organization, the more influence you&amp;rsquo;ll get.&lt;/p>
&lt;p>&lt;strong>&lt;em>What about a piece of advice for someone who has just started as a Staff Engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I can give the following advice: &lt;em>be a multiplier!&lt;/em> I&amp;rsquo;ve seen many talented senior engineers who were very productive on their own but failed to help others to grow. On the Staff-plus levels, you are expected to build bigger and bigger systems. Instead of focusing on trying to solve the problems by yourself, you need to focus on helping others build crucial parts of this system.&lt;/p>
&lt;p>You can be a good multiplier by mentoring others, spreading the technical knowledge, running the big initiatives, and removing the roadblocks.&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>Some of Mikhail's writing&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://inside.indeed.jobs/how-indeed-hacked-remote-working/">How Indeed hacked remote working&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://talkingkotlin.com/Zally-An-API-Linter/">Talking Kotlin Podcast: Zally - An API Linter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://engineering.indeedblog.com/blog/">Indeed Engineering Blog&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;strong>&lt;em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>In the past, I&amp;rsquo;ve tried both Engineering Manager and Technical Lead tracks. Depending on the company, the line between these two tracks can be very blurred. To be efficient in any of these roles, you need to act as a multiplier, have great project management and technical skills, and be a good communicator.&lt;/p>
&lt;p>My general attitude is to keep my people and technical leadership skills up to date and apply them depending on the project and the situation.&lt;/p>
&lt;p>&lt;strong>&lt;em>What are some resources (books, blogs, people, etc) you’ve learned from?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Assuming that people interested in growing into Staff+ roles are already great techies, I can recommend the following resources which helped me to grow recently:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/3828902-thinking-in-systems">Thinking in Systems&lt;/a> and &lt;a href="https://www.goodreads.com/book/show/15014.Crucial_Conversations">Crucial Conversations&lt;/a> books&lt;/li>
&lt;li>&lt;a href="https://levelup.patkua.com">Pat Kua&amp;rsquo;s Level Up&lt;/a> weekly mailing list&lt;/li>
&lt;li>&lt;a href="https://techleadjournal.dev">TechLead Journal&lt;/a> podcast&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;em>Who are your role models in the field?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://randsinrepose.com">Michael Lopp&amp;rsquo;s books&lt;/a> are amazing and help you to become a better leader and navigate through the organizations.
And &lt;a href="https://martinfowler.com">Martin Fowler&amp;rsquo;s blog&lt;/a> brings a lot of deep technical insights.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>comScore Total Visits, March 2021&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Stephen Kawaguchi - Solution Architect at IBM</title><link>https://staffeng.com/stories/stephen-kawaguchi/</link><pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/stephen-kawaguchi/</guid><description>&lt;p>&lt;span class="date fr">March, 2021&lt;/span>
&lt;a href="https://medium.com/@sak_to">blog&lt;/a>,
&lt;a href="https://twitter.com/sak_to">twitter&lt;/a>,
&lt;a href="https://ca.linkedin.com/in/stephenkawaguchi">linkedin&lt;/a>&lt;/p>
&lt;p>&lt;em>Disclaimer: I’m an employee of IBM. The views expressed in this article are mine and don’t necessarily reflect the positions, strategies, or opinions of the company.&lt;/em>&lt;/p>
&lt;p>&lt;strong>&lt;em>Tell us a little about your current role: where do you work, your title and generally the sort of work that you and your team do.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I work at IBM on the Cognos Analytics (CA) for Mobile team. CA is a suite of business intelligence tools that provides powerful cognitive capabilities. It uses AI and machine learning to help prep data and suggest ways to manage and visualize data. For example, it can suggest visualization types based on the type of data provided. It features best-in-class analytics capabilities, such as reporting, dashboards, data modelling, and data exploration. CA also takes analytics further and uses AI to generate insights and predictions. Since it&amp;rsquo;s true enterprise software, it runs in on-prem environments as well as the hybrid cloud on IBM Cloud Pak™ for Data.&lt;/p>
&lt;p>Our development organization includes somewhere around 300 developers. My main team fluctuates between 8 and 14 and includes interns, devs, QA engineers, and a dev manager. Our technical backgrounds vary wildly which has presented a challenge to our goal to create a cross-functional team. To compensate, I&amp;rsquo;ve made learning a central part of our team&amp;rsquo;s culture. We&amp;rsquo;ve had to learn and teach a wide variety of technical and business process topics. Myself and the senior developers have tried to bring our knowledge level to where the team is at in order to create a shallow on-ramp. So far, it&amp;rsquo;s worked out quite well and we&amp;rsquo;ve built a fairly cross-functional skillset across the team.&lt;/p>
&lt;p>We also have an extended family that includes a product owner, a UX designer, and a UX Researcher. They help bring us closer to our customers, and are invaluable in ensuring that we&amp;rsquo;re looking beyond the code to the heart of the business challenges before us.&lt;/p>
&lt;p>As far as the &lt;a href="https://staffeng.com/guides/staff-archetypes">Staff Eng Archetypes&lt;/a>, I was originally deployed to this product as a &lt;em>Solver&lt;/em>. I was challenged to get delivery on track while ensuring that the move from an on-prem monolithic world-view to a cloud-native one was central to our delivery approach. I&amp;rsquo;ve played the &lt;em>Tech Lead&lt;/em> role several times in my career, and while I do enjoy the ability to focus on execution in a limited scope, I generally get restless. I inevitably get curious about broader organizational technical concerns, and especially the overarching strategy and OKRs. In my last job I was a &lt;em>Right Hand&lt;/em> and worked across multiple projects that were challenged. That has been my least favorite role because you never get to stay long enough to see how things really play out. I gravitate most towards the &lt;em>Architect&lt;/em> archetype because it’s generally a good mix of strategy, technical, architecture, and mentorship. I also enjoy the variation.&lt;/p>
&lt;p>I see my main responsibility to be ensuring the adoption of Lean, Agile, and DevOps practices in order to accelerate delivery while maintaining a high standard of quality. I typically do this through mentorship focused on code quality practices, providing coaching around Agile ceremonies to make sure that goal-setting and continuous improvement are part of daily work. I sprinkle in Lean business process improvement practices to ensure optimization of the whole workflow. I also spend a lot of time ensuring that our technical strategy is manifested properly in our architectural decisions. Finally, I also have to frequently get into the code myself to help along some of our longer-term strategic goals, as well as to continue my own learning.&lt;/p>
&lt;p>On top of being responsible for our iOS and Android apps, our team is DevOps-capable and builds, maintains, and handles many of our own deployment responsibilities, and we&amp;rsquo;ve forged a close partnership with our SRE colleagues for the environments we don&amp;rsquo;t deploy to. My overarching goal has been to position the team to take advantages of the wealth of knowledge in the DevOps space for better delivery outcomes, and I&amp;rsquo;m proud to say that they&amp;rsquo;ve responded admirably. Our performance is exemplary within our product group.&lt;/p>
&lt;p>&lt;strong>&lt;em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>One of the reasons I joined IBM is because they have a robust process to become a Senior Technical Staff Member (STSM). We also have Distinguished Engineer and Fellow levels. Those are essentially executive positions for technical folks. I took this as a sign that there is a sophisticated view of how IBM fosters non-managerial growth.&lt;/p>
&lt;p>IBM is massive, with somewhere around 350,000 employees, 100,000 of whom are technically-focused, and with tens-of-thousands of developers. The level of variance in the path to Staff Engineer is high. It&amp;rsquo;s mostly going to depend on the context of the group. We have levels of seniority but they are very fuzzy and I don&amp;rsquo;t think I&amp;rsquo;m the right person to attempt to explain them.&lt;/p>
&lt;p>That said, senior-level talent is clear and present. I&amp;rsquo;ve never been part of a company that is so dedicated to creating mentorship situations, nor one that&amp;rsquo;s been able to present me with multiple mentors. I&amp;rsquo;ve had very few technical mentors over the years, but here I get to schedule regular 1:1s with multiple Distinguished Engineers and STSMs. This is a stated part of the responsibilities of the Staff Plus cohort, which is pretty cool. I&amp;rsquo;ve learned a lot about dealing with technical strategy at scale - something I doubt I&amp;rsquo;d be exposed to at a growing company.&lt;/p>
&lt;p>My DE mentors were matched with me organically. One was part of my interviewing process and so has been there from the beginning. The other two were connections made by various bosses, who felt that my sensibilities and their&amp;rsquo;s would align. All have been wonderful at showing me the ropes, and being direct about challenging me to elevate my thinking. It feels very familiar to my early days when I was first being trained as a manager.&lt;/p>
&lt;p>As a software engineer at IBM, your paths to seniority are varied. Technical excellence, hard work, organizational skills, and the ability to move others are all recognized and rewarded. A lot of it also comes down to whether there is actually an opportunity for promotion because it&amp;rsquo;s not tenable to simply have Staff Plus as something developers attain after &lt;em>x&lt;/em> years. The demands on leadership, vision, communication, strategic skills, and the ability to align technology to business all go up very quickly as you move to more senior levels. The biggest challenge is in identifying the scope that a given Staff Plus engineer will cover and making a compelling case that a given engineer is the person for that job. So a Staff Plus promotion is under far more scrutiny than lower band promotions for good reason.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>The best advice I&amp;rsquo;ve been consistently given by bosses, mentors, and trusted colleagues is that sometimes it&amp;rsquo;s better to beg for forgiveness instead of waiting for permission. This is my interpretation of what so many luminaries in the software world refer to as &lt;em>courage&lt;/em>. This has been a hard lesson for me to internalize because I lean towards consensus as a way to make sure the approach is sound. But what do you do if consensus is clearly counter to strategic goals? Or when there is no consensus? That&amp;rsquo;s when you need to make the hard call. I&amp;rsquo;ve tried to reserve these for situations where our strategic goals will be completely compromised by indecision, bureaucratic inertia, or fear of change. I prefer to align on goals. Sometimes, you just can&amp;rsquo;t bring people around, even when they agree. So, you just go do it and accept the consequences.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you spend your time day-to-day?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Daily:&lt;/p>
&lt;ul>
&lt;li>For the equivalent of 1 day per week I participate in my main team’s Agile rituals.&lt;/li>
&lt;li>I try hard to code for at least 1 hour per day. That’s been elusive lately, but sometimes I’ve been able to code for 4 or even 6 hours in a day. It depends on need - for example, to provide the team examples of TDD&amp;rsquo;d code looks like, or to polish our authentication and globalization schemes.&lt;/li>
&lt;li>I spend ~2 hours per day reviewing code, talking strategic adjustments, pair programming, inspecting SonarQube for technical debt, having system design, pipeline planning, or architectural discussions, or doing other things related to the core product I work on.&lt;/li>
&lt;/ul>
&lt;p>After that it’s easier to talk about weekly:&lt;/p>
&lt;ul>
&lt;li>I run 3 - 4 tech coaching 1:1s each week.&lt;/li>
&lt;li>Every couple of weeks I either participate or lead an Agile or Learning guild session.&lt;/li>
&lt;/ul>
&lt;p>I also have a few key broad impact groups I participate in:&lt;/p>
&lt;ul>
&lt;li>I sit in on software craftsmanship and multiple regular dev transformation discussions that include multiple levels of technical leaders and management. These are fun because they are purely technical strategy. I enjoy seeing those strategies form and come to life.&lt;/li>
&lt;li>I have a regular working group of people trying to build out software engineering resources like a career guide and a software engineering playbook.&lt;/li>
&lt;li>I also talk with my network of mentor distinguished and staff engineers on a bi-weekly or monthly basis. This is sometimes therapy for me because I get great perspective from people with more experience and deeper knowledge. These are my favorite sessions because I&amp;rsquo;m exposed to role models.&lt;/li>
&lt;li>I&amp;rsquo;m part of my product area architecture guild where we discuss all manner of architectural issues, and where we conduct reviews. This is also technical strategy, but in much more technical detail.&lt;/li>
&lt;/ul>
&lt;p>The rest of my time is eaten up by a mishmash of responsibilities:&lt;/p>
&lt;ul>
&lt;li>Dealing with constant audits from quality, security, and performance testers&lt;/li>
&lt;li>Ensuring cross-collaboration is smooth across the 20+(!) groups that we need to occasionally interface with&lt;/li>
&lt;li>Multiple all-hands and AMAs with executives to get the big picture&lt;/li>
&lt;li>Dealing with support or direct customer enquiries.&lt;/li>
&lt;li>Helping totally random people that have gotten my name or my team’s name from someone.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;em>Where do you feel most impactful as a Staff-plus engineer? A specific story would be grand.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>My greatest contribution in my current role is transforming a struggling team of siloed devs to a fully Lean / Agile / DevOps-capable group that is trailblazing cloud-native workflows in our predominantly on-prem product organization. Our small group is at the center of a major transformation from many perspectives - from cloud-native, to nitty-gritty Agile practices, to Continuous Delivery. We&amp;rsquo;ve managed to cover &lt;em>a lot&lt;/em> of ground in our 18-months together.&lt;/p>
&lt;p>Even more excitingly: now that we&amp;rsquo;ve hit some major milestones and we have our CI / CD pipeline connected, we&amp;rsquo;re poised to scale our successes and help other teams take advantage of our lessons-learned and reusable functionality. This is what I&amp;rsquo;m most excited to see come to fruition!&lt;/p>
&lt;p>That said, it took a village to raise our application, and we&amp;rsquo;ve had help from many other groups. The next phase of our work is to help others take advantage of our successes and build upon them. We&amp;rsquo;ve already seen some success in sharing our foundational work - it&amp;rsquo;s time for more tangible contributions from our side. This is where I hope my broad influence will come in handy.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done before reaching that title?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I had a lot of these theories in my mind, but as we know, execution is much harder. Proving that I could lead a cloud-native team was a huge confidence-boost. It required rapid learning and pulling the team together to align them to clear goals.&lt;/p>
&lt;p>More importantly, I used to be more hesitant and sought out validation of my approaches before committing. This job affords me much more discretion of my time than previous ones. I believe I’ve been able to make a much broader impact by doing so by figuring out who the people that move the organization are, and finding ways to align to their initiatives within my work.&lt;/p>
&lt;p>&lt;strong>&lt;em>Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for? Can you share a story of influencing your organization?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Yes, significant time. I’ve introduced these concepts to my team or organization through talks, workshops, POCs, or practical demonstrations:&lt;/p>
&lt;ul>
&lt;li>Agile Estimation&lt;/li>
&lt;li>Lean Startup&lt;/li>
&lt;li>Scrum&lt;/li>
&lt;li>FIRST Principles of Testing and effective unit testing&lt;/li>
&lt;li>TDD&lt;/li>
&lt;li>Software engineering principles (e.g. SOLID) and design patterns&lt;/li>
&lt;li>Blameless Post-mortems&lt;/li>
&lt;li>Value Stream Mapping&lt;/li>
&lt;li>More CI-friendly testing tools and approaches (Cypress, Consumer-Driven Contract Testing)&lt;/li>
&lt;li>Pair programming&lt;/li>
&lt;/ul>
&lt;div class="pull">
&lt;p>&lt;strong>Some of Stephen's writing&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/swlh/applying-the-three-ways-of-devops-to-accelerate-your-organization-702998ebf1c2">Applying the Three Ways of DevOps to Accelerate Your Organization&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/swlh/managing-technical-debt-b4f30cbccbe0">Managing Technical Debt&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/swlh/revisiting-test-driven-development-for-a-devops-world-401f1f8d3275">Revisiting Test-Driven Development for a DevOps World&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/swlh/exploring-semantic-versioning-and-promise-theory-fabadc33ac52">Exploring Semantic Versioning and Promise Theory&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://levelup.gitconnected.com/the-wall-of-confusion-623057a4dd26">The Wall of Confusion&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;strong>&lt;em>What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>A T-shaped skillset has helped differentiate me and have served me extremely well throughout my career. It may sound cliché, but the soft-skills have been just as important as the technical ones. You need both to move people at different levels, and to ensure you&amp;rsquo;re getting it right as a team.&lt;/p>
&lt;p>Another factor is that I&amp;rsquo;ve been fortunate to ride the wave of multiple trends:&lt;/p>
&lt;ol>
&lt;li>UX designers that could code were unicorns 20 years ago. That got me a great first job. In fact, I never worked as a designer. I was a coder right our of school.&lt;/li>
&lt;li>Flash was hot at the time and that got me promoted really quickly because there weren’t enough people good at it to effectively lead teams of Flash devs.&lt;/li>
&lt;li>I focused on really learning Agile just as it hit the mainstream.&lt;/li>
&lt;li>I became a JavaScript developer just as the SPA craze began in earnest with Angular (I started using it the day it went 1.0.0).&lt;/li>
&lt;li>I got to use React and Redux early on, just before they really took off.&lt;/li>
&lt;li>I focused on DevOps just as it became mainstream. In fact, I had hit a crisis-of-faith in Agile. The way that Gene Kim et al. reinvigorated my passion because the way they&amp;rsquo;ve made it all come together resonates deeply with my own values. I&amp;rsquo;ve been running with DevOps ever since.&lt;/li>
&lt;/ol>
&lt;p>Finally, fluking into my first job at the BMO Financial Group Institute for Learning where I received several years of formal leadership and management training early in my career has been incredibly valuable. Not only has it opened up a lot of doors because I tend to be perceived as a team-builder, it&amp;rsquo;s helped me gain perspective much faster than I would have on a different path. I was pretty shocked to find out that the majority of new managers don&amp;rsquo;t actually get training, and so I&amp;rsquo;ve tried to make a point to find and share similar materials with other technical leaders as I&amp;rsquo;ve worked with them. Leadership skills like conflict-resolution, planning, formulation of strategies, communication, and understanding how to effectively manage other humans comes in handy no matter your number of direct reports. Actually, I&amp;rsquo;ve found that I&amp;rsquo;m &lt;em>more&lt;/em> effective without having direct-reports because then I don&amp;rsquo;t get bogged down in HR overhead. I believe it&amp;rsquo;s helped me become a more nuanced and multi-faceted decision-maker far beyond the technical problems in front of me.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you keep in touch with how things really work as you spend less time on hands-on development?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I make a point of reviewing lots of PRs and taking on coding work in isolated areas myself. I also review code in the main line to avoid PR-myopia (the fractured view of the whole when you only review small slices of it).&lt;/p>
&lt;p>To stay abreast of what&amp;rsquo;s going on in the industry, I take courses, do tutorials, read books and blogs, listen to podcasts, watch YouTube channels, and build silly little experiments in my personal time. Right now I&amp;rsquo;m more of a reader because I&amp;rsquo;m focused on trying to learn how to shift the trajectory of my product group as well as IBM. This is a new skillset to me, and so I&amp;rsquo;ve been fascinated to watch and participate in some of these efforts.&lt;/p>
&lt;p>&lt;strong>&lt;em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>An emphatic &lt;em>yes&lt;/em>! I measure my success in their success. I was &amp;ldquo;raised&amp;rdquo; by my amazing early-career mentors to believe that your greatest personal success is how well you can elevate the people you work with. Over the years, I&amp;rsquo;ve learned the wisdom of that particular lesson. The most memorable highlights in my career have been when I see mentees succeed - whether it&amp;rsquo;s a promotion, a successful delivery that they&amp;rsquo;ve led, or simply just being comfortable in their own skin and confident in their abilities. It&amp;rsquo;s &lt;em>nearly&lt;/em> as good as being a dad :)&lt;/p>
&lt;p>I see sponsorship as active mentorship. So I&amp;rsquo;ve sponsored others by:&lt;/p>
&lt;ul>
&lt;li>Advocating for actual promotions with senior leadership&lt;/li>
&lt;li>Helping mentees identify the areas that they need to develop to progress (most recently using the &lt;a href="https://medium.com/s/engineering-growth-framework/engineering-growth-framework-overview-4e02ab330524">Medium Engineering Growth Framework&lt;/a>)&lt;/li>
&lt;li>Using 1:1s to help them plan and track progress against their career-development goals&lt;/li>
&lt;li>Providing my opinion as to how to present themselves to be more appealing for promotions&lt;/li>
&lt;li>Giving them transparent feedback on what I believe is impeding their growth or progression&lt;/li>
&lt;li>Helping them understand that their path forward will likely be unique to them, and that&amp;rsquo;s OK&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;em>What about a piece of advice for someone who has just started as a Staff Engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I think this all the time to try to keep my ego in check and to put empathy at the center of what I do: We’re all standing on the shoulders of the giants that came before us. Stay humble and remember you’re being entrusted to elevate others, just as you yourself were elevated. It&amp;rsquo;s easy to forget about that with all of the distractions in our industry and the inevitable politics and pressure to succeed. Put ambition aside and treat others as you would like to be treated yourself (or maybe how you wish you had been treated). You&amp;rsquo;ll sleep better at night, and enjoy the kind of success that you can actually live with.&lt;/p></description></item><item><title>Aaron Suggs - Principal Engineer at Glossier</title><link>https://staffeng.com/stories/aaron-suggs/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/aaron-suggs/</guid><description>&lt;p>&lt;span class="date fr">January, 2021&lt;/span>
&lt;a href="https://aaronsuggs.org">personal site&lt;/a>,
&lt;a href="https://twitter.com/ktheory">twitter&lt;/a>,
&lt;a href="https://www.linkedin.com/in/aaronsuggs/">linkedin&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Tell us a little about your current role: where do you work, your title and generally the sort of work that you and your team do.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I work at &lt;a href="https://www.glossier.com">Glossier&lt;/a>, a direct-to-consumer growth-stage skincare and beauty company with incredibly passionate customers. Our engineering team is ~35 people. I&amp;rsquo;m a Principal Engineer, mostly focusing on our Site Reliability and Tools team. My recent focus has been leading Glossier&amp;rsquo;s Operational Excellence initiative (nicknamed ✨GLOE✨) and ensuring we&amp;rsquo;re building scalable services and team practices. I define operational excellence as our ability to deliver low defect rates, high availability, and low latency for product features. In practice for the SRE/Tools team, that means improving observability, increasing our infra-as-code adoption, and shepherding our migration from a monolith to microservices.&lt;/p>
&lt;p>In the &lt;a href="https://staffeng.com/guides/staff-archetypes">Staff Eng Archetypes&lt;/a>, I gravitate most towards being a right-hand, and secondly a solver.&lt;/p>
&lt;p>Prior to Glossier, I was a Director of Engineering at Kickstarter. In 2018, I joined Glossier as a Senior Staff Engineer (an IC role), and as the first engineer to focus primarily on internal tools and engineering practices. My first projects were building a feature flag system so we could safely and easily test features with real data; then implementing continuous deployments to accelerate delivery.&lt;/p>
&lt;p>After a few months, I switched back to management to lead a new Platform team and prepare for Black Friday. Glossier has an annual Black Friday sale that generates a huge spike in traffic and revenue, and our ambitious growth targets showed we need to rigorously prepare with capacity testing, system hardening, and cross-functional collaboration (See &lt;a href="https://www.youtube.com/watch?v=Jy_-l3v9zsY">Surviving Black Friday: Tales from an e-commerce engineer&lt;/a> for details on Glossier&amp;rsquo;s Black Friday prep). After some re-orgs, the Platform team wound down, but the current SRE/Tools team does similar work. A year ago I gave up my management responsibilities to more deeply focus on operational excellence.&lt;/p>
&lt;p>&lt;strong>&lt;em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Absolutely! I&amp;rsquo;ve switched from manager to IC twice in my career; and I&amp;rsquo;ll likely do so again.&lt;/p>
&lt;p>When I first became a manager in 2015, it was the only career path for a senior engineer at my company. Fortunately, ever-smaller engineering teams soon created and shared career ladders with parallel IC and management tracks. When I helped create Kickstarter&amp;rsquo;s engineering ladder, I emphasized IC growth paths that didn&amp;rsquo;t require people management.&lt;/p>
&lt;p>I was deeply influenced by a section of Camille Fournier&amp;rsquo;s &lt;em>Manager&amp;rsquo;s Path&lt;/em> that called out &amp;ldquo;empire building&amp;rdquo; as a toxic management practice. It reminded me of the argument in Plato&amp;rsquo;s &lt;em>Republic&lt;/em> that the political leaders shouldn&amp;rsquo;t be those that selfishly seek power, rather those whose wisdom makes them duty-bound to lead.&lt;/p>
&lt;p>So I don&amp;rsquo;t orient my career around ever-greater management responsibilities: it&amp;rsquo;s one tool in the toolbox. I appreciate management as a rich discipline that I&amp;rsquo;ll spend my career honing; alongside programming and systems engineering.&lt;/p>
&lt;p>Here are some important factors for me when switching between manager and IC roles:&lt;/p>
&lt;ul>
&lt;li>What skills does the team need most acutely: management to coordinate the actions of a group; or an IC to accelerate the execution?&lt;/li>
&lt;li>Will I have sufficient support and feedback to learn and succeed?&lt;/li>
&lt;li>Am I the only one on the team who could do this; or could others do it well?&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>&amp;ldquo;Replace indignation with curiosity.&amp;rdquo;&lt;/p>
&lt;p>Several years ago, I told my manager about another team behaving in a way that caused problems for my team. When I finished, he gave me that advice. I hadn&amp;rsquo;t been curious about why the other team was acting that way. It turned out they had constraints that made their behavior quite reasonable. By approaching them with curiosity and a helpful mindset (instead of frustration), we quickly found a process that improved both our workflows.&lt;/p>
&lt;p>More recently, while struggling with burnout, a career coach asked me, &amp;ldquo;What would let you approach each day with energy and optimism?&amp;rdquo;&lt;/p>
&lt;p>It&amp;rsquo;s become my morning mantra, ensuring that I make time for operational excellence and mentorship and bring genuine enthusiasm to my work.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you spend your time day-to-day?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>My days are roughly 50% scheduled meetings, 35% deep-focus blocks, and 15% unplanned work.&lt;/p>
&lt;p>I work hard to make sure the meetings are effective. That usually means at least having an agenda. The meeting should have a clear purpose known to attendees beforehand, such making a decision, generating ideas, or reviewing information. Meetings often have a negative connotation because they&amp;rsquo;re facilitated poorly; but they can be incredibly productive. I try to get better at facilitating productive meetings and using synchronous attention well. &lt;em>High Output Management&lt;/em> by Andrew Grove is a great resource to learn about effective meetings.&lt;/p>
&lt;p>A technique I recently learned from my CTO is to schedule reading time at the start of a group meeting. Say you&amp;rsquo;re in a hiring debrief: everyone spends the first 5 minutes reading each other&amp;rsquo;s feedback about the candidate. It&amp;rsquo;s a great way to ensure attendees truly read the document and have it top-of-mind. It ultimately saves time and elevates the subsequent discussion.&lt;/p>
&lt;p>I also interview quite a bit. In 2020, I did (&lt;em>checks calendar&lt;/em>) 126 interviews. Improving the long-term health of the team is a key Staff+ responsibility; and helping us hire great people is part of that.&lt;/p>
&lt;p>The deep-focus blocks are marked off on my calendar. My company observes &amp;ldquo;No Meeting Thursday&amp;rdquo; which helps a lot. I use these blocks for work that&amp;rsquo;s &amp;lsquo;important but not urgent&amp;rsquo; from &lt;a href="https://www.eisenhower.me/eisenhower-matrix/">Eisenhower&amp;rsquo;s productivity matrix&lt;/a>. That&amp;rsquo;s usually writing specs and documentation, or researching and prototyping new tools and patterns.&lt;/p>
&lt;p>My schedule is unusual in that I stop work around 4pm most days, then work later in the evenings, ~8-10pm. This gives me several high-quality hours with my family each day. I have difficulty concentrating in the afternoon, and can more easily concentrate at night. And I enjoy getting something done right before bedtime. So this schedule has improved both my work/life balance and productivity. I changed my schedule because of childcare needs during the coronavirus pandemic; but I think I&amp;rsquo;ll keep it long-term. I encourage everyone to reflect on what habits and schedules are helpful for their work. An open discussion with your manager and some flexibility can go a long way.&lt;/p>
&lt;p>The unplanned work is mostly answering Slack messages, advising on urgent issues, or sometimes responding to a production incident. I try to approach this work with a helpful attitude, and also with an eye towards cross-training and writing discoverable documentation to minimize future unplanned work.&lt;/p>
&lt;p>&lt;strong>&lt;em>Where do you feel most impactful as a Staff-plus engineer? A specific story would be grand.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I think of my impact in two ways:&lt;/p>
&lt;ol>
&lt;li>Working the plan&lt;/li>
&lt;li>Serendipity&lt;/li>
&lt;/ol>
&lt;p>&amp;lsquo;Working the plan&amp;rsquo; is about making daily, incremental progress on a big project with a team. Some examples have been improving our site availability from under 99% to over 99.95%. It took a lot of Learning Reviews (blameless postmortems), training, testing, and refactoring. Another was a 9-month migration from dynamically-generated Rails-based HTML pages to statically-generated React-based ones to improved time-to-first-byte and availability. It took a lot of coaching, buy-in, and coordination. To successfully work the plan, you need clear goals and incremental milestones to keep the team motivated, and continuous alignment with leadership on the desired outcomes and timeline.&lt;/p>
&lt;p>&amp;lsquo;Serendipity&amp;rsquo; in my work is about sharing an insight with the right people at the right time to make a positive impact. For example, our team was recently choosing a new vendor and the team was split between two mediocre choices. I asked an acquaintance with expertise about the vendors how he would choose; and he recommended a lesser-known new vendor that quickly became a universal team favorite.&lt;/p>
&lt;p>Another serendipitous example was an engineer mentioning during standup that a caching optimization wasn&amp;rsquo;t having impact they expected. I happened to be familiar with the config options of the particular Ruby web server; and was able to interpret some complicated metrics on a dashboard they showed to determine we had misconfigured a memory threshold. Later that day, we made a one-line config change to optimize our memory usage that reduced latency by 30%.&lt;/p>
&lt;p>Serendipitous impact isn&amp;rsquo;t planned; and isn&amp;rsquo;t necessarily hard work. It&amp;rsquo;s about paying attention (being present), keeping a curious mindset, and sharing the insight in a way that colleagues are open to receiving.&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>Some of Aaron&amp;#39;s work&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://kickstarter.engineering/the-value-of-reliable-developer-tooling-e94791d1482e">The Value of Reliable Developer Tooling&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://increment.com/documentation/what-a-deploy-bot-taught-glossier-about-documentation/">What a deploy bot taught us about documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=Jy_-l3v9zsY">Surviving Black Friday: Tales from an e-Commerce Engineer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/glossier/the-engineering-manager-workshop-82383f810549">The Engineering Manager Workshop&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;strong>&lt;em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Certainly! As a Principal Engineer, I try to be an enthusiastic and conspicuous &lt;a href="https://sive.rs/ff">first follower&lt;/a> when other engineers are doing important new practices. Some examples are when colleagues demoed React snapshot testing and local development with Docker. After each demo, I&amp;rsquo;d ask how I can try it out and see the benefits for myself. Then I&amp;rsquo;d look for other teams and in-flight projects where we can apply these practices to get wider adoption.&lt;/p>
&lt;p>I also &amp;lsquo;cheerlead&amp;rsquo;: recognizing a colleague&amp;rsquo;s valuable effort in public or a small group, even if the outcomes aren&amp;rsquo;t tangible yet. It could be complimenting a team that&amp;rsquo;s was thorough and reflective during a difficult Learning Review; praising an engineer who reproduced a tricky race condition; or thanking someone who documented a poorly understood process.&lt;/p>
&lt;p>I aim to serve two purposes with cheerleading: recognize those doing the valuable behavior, and give positive reinforcement in the hopes that the team does more of that behavior. It&amp;rsquo;s really &lt;a href="https://en.wikipedia.org/wiki/Operant_conditioning">operant conditioning&lt;/a>, but cheerleading sounds much nicer.&lt;/p>
&lt;p>&lt;strong>&lt;em>What about a piece of advice for someone who has just started as a Staff engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Other engineers look up to you as a role model, some in ways you may not expect. They&amp;rsquo;ll emulate your coding style, your tone in code reviews, your behavior in meetings, your rationale for making decisions, and the way you treat colleagues.&lt;/p>
&lt;p>It can feel like a lot of responsibility to be perfect all the time. But it can also bring clarity to your work: do your best, acknowledge shortcomings, be generous and curious.&lt;/p></description></item><item><title>Alex Kessinger - Principal Engineer at Stitch Fix</title><link>https://staffeng.com/stories/alex-kessinger/</link><pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/alex-kessinger/</guid><description>&lt;p>&lt;span class="date fr">January, 2021&lt;/span>
&lt;a href="https://www.linkedin.com/in/alexkessinger/">LinkedIn&lt;/a>,
&lt;a href="https://twitter.com/voidfiles">Twitter&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Tell us a little about your current role: where do you work, what’s your title, and generally what sort of work do you and your team do.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I&amp;rsquo;m a principal engineer at Stitch Fix which is an online personalized styling company.&lt;/p>
&lt;p>The team I work for right now is a core engineering team that supports our customer facing application organization. The team has a range of folks with a broad array of experience including native mobile, frontend, and backend experience.The work we do depends on the project and can include internal consulting and mentoring from design to architecture. We also manage a number of shared libraries and services. I tend to fall in on the API and backend side of things. For instance, one project I&amp;rsquo;m working on is our roll out of GraphQL and GraphQL Federation.&lt;/p>
&lt;p>To date, our engineering organization has organized around particular user groups like our customers (whom we refer to as clients), our stylists, or our warehouse folks. The team I work on was originally created to focus on our customer facing application teams. While a large part of our time is still spent on that work, we&amp;rsquo;ve recently moved into our platform organization and I imagine our scope will change over time.&lt;/p>
&lt;p>&lt;strong>&lt;em>You mentioned shared libraries, architectural guidance, and also owning some core services. How do you decide what to focus on at any given time?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I&amp;rsquo;ve never found one way to do this kind of work. For the most part, it feels team specific. The way you might determine your highest priority work on a mobile team is quite different from how we do it on a platform team. But there are a few similarities in the way I try to approach this task, and I think this would apply to all my roles at Stitch Fix.&lt;/p>
&lt;p>First, I try to ground myself in three things:&lt;/p>
&lt;ol>
&lt;li>The goals of the business.&lt;/li>
&lt;li>The goals of my team.&lt;/li>
&lt;li>The friction involved in iterating towards our goals.&lt;/li>
&lt;/ol>
&lt;p>I ground myself because the process is organic and fluid. It&amp;rsquo;s an alignment process which can involve difficult conversations. Those conversations are better when I&amp;rsquo;m an active listener. Being grounded lets me ask questions that illuminate how others are trying to achieve the same goals. Ultimately, that helps me align with my team and it can help align the team with the business. At least, that&amp;rsquo;s my aim. There&amp;rsquo;s never a perfect way to approach these conversations, but I trust my team&amp;rsquo;s intentions. I know everyone wants the best outcome quarter in, quarter out.&lt;/p>
&lt;p>One difference between a platform team and a feature team is gauging our impact. It&amp;rsquo;s a broad purview and it&amp;rsquo;s not always clear how to best make that impact or even how to measure it. Again, I find that being grounded helps, but I&amp;rsquo;ve got a lot to learn. Even as I try to be active in these discussions I rely on my manager and my teammates who have a lot more experience than I do set the final priority list.&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>Some of Alex&amp;#39;s writing&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://rumproarious.com/2020/12/22/expertise-is-all-around-its-just-not-evenly-distributed./">Expertise is all around - it&amp;rsquo;s just not evenly distributed.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://rumproarious.com/2019/12/15/performance-matters/">Performance matters&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://rumproarious.com/2019/12/16/good-api-design/">Good API design&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://rumproarious.com/2019/12/11/helpful-numbers-for-designing-technical-systems/">Helpful numbers for designing technical systems&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;strong>&lt;em>How do you, as a developer productivity team, avoid getting detached from the core development process used by the engineers your team supports?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>While part of our mission historically has included developer happiness and productivity, it also is in part about supporting technical excellence. Regardless of the mission though, when you work on a team that supports other engineering teams you must build empathy for their experience. I&amp;rsquo;ve found two approaches that help in different ways, one is more like product development, and the other is old fashioned one on ones.&lt;/p>
&lt;p>The best product folks I work with have a deep understanding of the users experience. In a number of domains building that understanding can take a long time. Especially when you are building software for expert use. Luckily for me, I&amp;rsquo;ve done the job. I hope I have a strong understanding of the landscape. More importantly, I can spend time working alongside folks who are shipping features. I enjoy the pendulum between feature and platform work, it&amp;rsquo;s incredibly rewarding, and I think it prevents me from getting out of touch. I bring this approach to our team&amp;rsquo;s work as well. Using a product approach we are uniquely qualified to support our engineering teams.&lt;/p>
&lt;p>Another thing that helps keep me connected is 1on1s. I&amp;rsquo;m fascinated by all the folks working at Stitch Fix and how they approach their jobs. I learn something new every meeting. I try to meet regularly with 10-20 folks. The cadence is anywhere from once a week to monthly. It tends to work out so that I have 1 or 2 a day. I have found that strict agendas can get in the way, so I keep it agendaless. Listening, getting to know folks, and building a sense of their experience is my goal. Frankly, 1on1s are invaluable and while I think they are particularly valuable for my work, I would do them regardless.&lt;/p>
&lt;p>Besides putting me in touch with different viewpoints, I find it&amp;rsquo;s easier to give and get feedback when 1on1s are on a regular cadence. Especially when we&amp;rsquo;ve missed the mark somehow. I want to know ASAP when we&amp;rsquo;ve made a strategic error. I&amp;rsquo;ve found regular meetings with folks speed up the feedback process. Folks don&amp;rsquo;t have to wait or worry that they are invading your schedule to give feedback. On top of individual feedback, 1on1s allow me to contrast folks&amp;rsquo; experience around the organization. Building tools for a wide audience requires understanding competing needs. The best way to build a rich mental model of work is to hear from the folks themselves.&lt;/p>
&lt;p>&lt;strong>&lt;em>What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>At Stitch Fix, we have software engineer, lead, principal, and architect. We have a rubric for promotions. Which describes what we expect from an IC at any specific level. The rubric focuses on a number of things, but impact and influence are important. As you progress in your role, your impact and influence should expand. Although the expectations are clear, the approach will vary.&lt;/p>
&lt;p>I see principals and architects having a significant role in quarterly and long term planning for our technical systems. They also tend to work more horizontally. With Architects spending more time on the big picture. Like initiatives that might require a year or more of time across multiple engineering divisions, things that require connecting the dots over a longer time span.&lt;/p>
&lt;p>In that sense, I definitely feel that I work more in a horizontal capacity than I did previously, and also try and contribute to the big picture stuff when I can.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you spend your time day-to-day?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I spend my time in three broad categories: API Infrastructure, Service Operation, and Reflection.&lt;/p>
&lt;p>Right now a large part of my day to day is supporting a migration to GraphQL, which is new for us. One way I support the roll out is by making myself available. This ranges from ad-hoc pairing to design consultation. I keep large blocks of unplanned time so that I can be available for that kind of work. Sometimes I&amp;rsquo;ll embed with a team for a quarter or more, especially if that team happens to be working directly with an infrastructure change I am working on.&lt;/p>
&lt;p>Another broad area is working on technical implementations. As part of our GraphQL rollout there are some shared services. Those services are currently owned by my team. We are also principal contributors to a number of our GraphQL tools. There are other areas of technical implementations I contribute to as well, but GraphQL currently takes up most of my time.&lt;/p>
&lt;p>The last part of my job is trying to think broadly about our organization and the future. Integrating my own experience and what I hear from others requires reflection. In my case that means a lot of reading, writing, analyzing, and thinking.&lt;/p>
&lt;p>My goal, much like the OKR process is to be in a position to propose long term goals and practical methods for achieving those goals that are grounded in our current organizational strengths. I hope to produce a long term vision that expands beyond any given quarter.&lt;/p>
&lt;p>A big part of this process is working with others on my team. While I make a modest impact by myself, working with others is when we start cooking with gas. I appreciate working on this with my teammates on this. I don&amp;rsquo;t always make it easy, I&amp;rsquo;ve got an opinion or two, but I love it when I&amp;rsquo;m able to broaden my perspective.&lt;/p>
&lt;p>&lt;strong>&lt;em>There’s a fantastic blog post, &lt;a href="https://slack.engineering/how-big-technical-changes-happen-at-slack/">How Big Technical Changes Happen at Slack&lt;/a> by Keith Adams and Johnny Rodgers about how they make technical changes, and defining interfaces is one of the most important kinds of changes. How did you decide on GraphQL?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>We adopted GraphQL at Stitch FIx because it fit our particular needs and allowed us to work the way we want to. Although the process for achieving that alignment is a bit more involved.&lt;/p>
&lt;p>We have an interesting framework for making big decisions like this. I&amp;rsquo;ve never seen this kind of framework at any other company that I&amp;rsquo;ve worked at. It&amp;rsquo;s called &lt;a href="https://multithreaded.stitchfix.com/blog/2019/08/19/framework-for-responsible-innovation/">A Framework For Responsible Innovation&lt;/a> and was created by one of the senior architects, Coraline Ada Ehmke. Coraline worked with the senior management to create a way for anyone to propose something new, and speak to the business value of it. It suggests starting small and over time, building a bigger and bigger business case for any innovation.&lt;/p>
&lt;p>That was the process we used for GraphQL. I see technical investment as a way to build capacity over time. Always ask the question: are we delivering more value this quarter than last quarter? As we try to deliver value, we experience friction, it&amp;rsquo;s not always easy to articulate, but often with enough time and practice you can zero in on the major patterns.&lt;/p>
&lt;p>After a year or so of working with the iOS team, it was clear we were experiencing friction around our APIs. The iOS team had been at this for a year or more before my time as well. Because of our experience trying to deliver value, we were able to easily identify a number of ways that our current API strategies weren&amp;rsquo;t working for us. As we looked back on that friction, and other things like post-mortems, It was clear to us that a RESTful based approach was at the top of the list. With that assessment framework in hand we explored a few new techniques. Based on our future needs and past experiences GraphQL seemed like the best choice.&lt;/p>
&lt;p>As we began to migrate the iOS app to a GraphQL backend, we realized that it might be valuable for all of our customer facing applications. We worked with the larger team to grow our scope to an organizational level and we put more resources behind it. It has continued to grow in scope over time as well due to the investments that are being made by our senior ICs and leadership.&lt;/p>
&lt;p>&lt;strong>&lt;em>Where do you feel most impactful as a Staff-plus engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Foremost by viscerally understanding the experience of a developer. In order to advocate for them and reason about large tech investments. Especially taking the time to understand how engineers will utilize that investment.&lt;/p>
&lt;p>For instance, imagine you are trying to ship, and you run into a situation where you want to trade what you think is the right thing longer term, for the get it done now thing. Maybe it&amp;rsquo;s something really cringeworthy. Furthermore maybe the right thing is in a far off codebase. It&amp;rsquo;s going to take your hours if not days to &amp;ldquo;do the right thing&amp;rdquo;.&lt;/p>
&lt;p>These are the kinds of experiences that I find frustrating, and I think others do as well. I want to understand what it&amp;rsquo;s like when a developer is making those trade offs. And, I want to improve their capacity to deal with these kinds of situations.&lt;/p>
&lt;p>By taking the time to have that visceral sense of the work, I think we can make the right trade offs at the platform level. That might be the biggest impact I have.&lt;/p>
&lt;p>&lt;strong>&lt;em>One common technique for identifying pain points is developer experience surveys. Have you found that technique valuable?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Yes, surveys can be an important tool in understanding impact. But, I think they are only one part of the puzzle.&lt;/p>
&lt;p>This year I&amp;rsquo;ve tried to dig into the practice of gathering qualitative data in general. When this kind of work is done well, it&amp;rsquo;s instrumental. The work that Nicole Forsgren has done with the State of Dev Ops for instance is incredible (she gave a great talk about &lt;a href="https://www.youtube.com/watch?v=oG1_Wwbft9o">how she creates survey questions&lt;/a>). This is another recent example that I really appreciated. &lt;a href="https://arxiv.org/abs/1808.07650">&amp;ldquo;Daily Stand-Up Meetings: Start Breaking the Rules&amp;rdquo;&lt;/a>. The authors of the paper take on standup meetings, maybe one of the most sacrosanct rituals in a teams day. In it they use a large amount of qualitative data in order to produce a few surprising recommendations.&lt;/p>
&lt;p>What I appreciate about both of those teams is that the quality of the outcome relies largely on the author&amp;rsquo;s deep understanding of the phenomena they are investigating. It&amp;rsquo;s that understanding that makes their investigations so valuable.&lt;/p>
&lt;p>When it comes to my team or my organization We should have the same level of understanding when it comes to the teams we support. It makes our work valuable to our organization in the same way that the devops report was to the industry. I want to have a visceral understanding of what it&amp;rsquo;s like to do the work. It can be difficult to do that though. An uncomfortable, but not so surprising fact keeps showing up in the papers I read. When developers receive surveys, or are interviewed they tend to see it as an evaluation of themselves. Teams, organizations, and systems are already hard to understand and manage, when you also add on top of that a widely held skepticism of introspection, it can be hard to say the least. Spending time and building trust that&amp;rsquo;s where it starts though, surveys are a part of the equation, but if you aren&amp;rsquo;t building those surveys on top of a strong foundation I&amp;rsquo;m not sure they will tell you much.&lt;/p>
&lt;p>Lastly, I think surveys and really any qualitative research takes a lot of time and effort. This is borne out by the research, and my own experience. It&amp;rsquo;s possible there might be a different way. If an organization is aligned well and has certain shared values that lead to a high trust organization you might be able to forgo the costly and time consuming process. In either case, the work is super valuable.&lt;/p>
&lt;p>&lt;strong>&lt;em>Many Staff engineers are so good at identifying problems that they have far more problems than they can tackle. Once you’ve found a problem, how do you go about addressing it?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>In general, people are usually trying to make things better. But, knowledge and experience are often siloed. That makes it difficult to readily understand the impact of a problem, how universal a solution may be, and the value of solving it.&lt;/p>
&lt;p>This is another reason why we must have a product mindset. Hopefully through a product mindset your team is aligned on the outcomes you are looking for. Hopefully, through some mechanism your team is aligned on how developers work. So, the next step is triaging the list. It&amp;rsquo;s another alignment process. The process is valuable, while also being one of the most difficult you can have. At the end, you should be able to say the thing at the top of the list will have the biggest net positive impact.&lt;/p>
&lt;p>&lt;strong>&lt;em>Are there any particular metrics or approaches you’ve found particularly helpful for explaining why a specific technical investment should be a business priority?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>It would be nice if all our projects had a simple quantitative measure. Sometimes it&amp;rsquo;s easy and straightforward, but most times it&amp;rsquo;s not. For me it always depends on the specifics of a project. Which means the way I build a case is different for each project.&lt;/p>
&lt;p>In general though, I&amp;rsquo;m always trying to understand how a project will impact the business. For me that includes the positive impact and potential negative impacts. Risk and incidents tell as compelling a story as new feature work. It&amp;rsquo;s not as fun to talk about though.&lt;/p>
&lt;p>When it comes to the most amorphous kinds of tech investment. Things like, &amp;ldquo;architectural tech debt&amp;rsquo;, or replatforming, etc. That&amp;rsquo;s when it really pays to have a strong understanding of how work gets done. Being able to explain the experience of doing the work, and then being able explain how the investment will change that experience is powerful.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done before reaching that title?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Because of the responsible innovation framework, it&amp;rsquo;s possible for anyone at Stitch Fix to suggest and try anything, with the right alignment and justification. It&amp;rsquo;s empowering as an individual. I was able to try some things when I was a lead, that would have been difficult at other places. Though, when it comes to trying something that involves more than your team, it can be easier with a title.&lt;/p>
&lt;p>The biggest impact was personal, and maybe this wasn&amp;rsquo;t how it should have gone. When you don&amp;rsquo;t have the right credentials it&amp;rsquo;s easy to fall into the trap of proving you are capable. And, frankly, doing the work and being recognized is one way to relieve the pressure. Now If I have a hunch that something is valuable, I&amp;rsquo;ll give myself more time to figure it out. I feel more permission to spend time in the ambiguous areas.&lt;/p>
&lt;p>The net effect is a sense of time scale I guess. Some things are gonna take a long time. Large changes in systems take time. It&amp;rsquo;s easy to think that all good things should happen immediately, but that was often a false sense of urgency. Now certain kinds of work can unfold over time, and that&amp;rsquo;s okay.&lt;/p>
&lt;p>&lt;strong>&lt;em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>It&amp;rsquo;s something that I personally want to work on a lot and it&amp;rsquo;s, it&amp;rsquo;s something that I&amp;rsquo;m trying to get better at. I try to make it very clear the outcome that we&amp;rsquo;re looking for, like a vision. Then I tend to start on the most important piece and make sure that that gets done.&lt;/p>
&lt;p>I find that if folks can share that vision they&amp;rsquo;ll start to come along and say like, &amp;ldquo;oh, hey, can I help, can I do this&amp;rdquo;. That&amp;rsquo;s where I will try to take a step back and help instead of doing the work.&lt;/p>
&lt;p>Another way I&amp;rsquo;ve found to help is often folks will identify an outcome they want to achieve and I can help them work through that process.&lt;/p>
&lt;p>One way I want to be better is my ability to help folks who may not feel the authority to step in. I think there&amp;rsquo;s a lot of people who can do the job, but may not feel comfortable stepping in and doing the work. The way that I&amp;rsquo;m working on this right now is to find or create spaces where folks feel the support they need to step up. I don&amp;rsquo;t feel like I have a great answer yet, but I&amp;rsquo;m working on it.&lt;/p>
&lt;p>&lt;strong>&lt;em>Is sponsoring other engineers harder as a remote engineer or in a remote engineering organization?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>In short yes, but, it&amp;rsquo;s complicated. When I worked in an office, the predominant pattern I saw was informal sponsorship. It relies almost entirely on happenstance. That meant that there were a lot of ways in which sponsorship wouldn&amp;rsquo;t happen. It&amp;rsquo;s yet another way we&amp;rsquo;ve systematically disenfranchised folks. My hope is that with remote work we might find ways to bring a new level of rigour to the process.&lt;/p>
&lt;p>This is something I appreciate about the remote culture at Stitch Fix. We have a lot of folks who are experimenting with new ways of running shared spaces that attempt to level the playing field.&lt;/p>
&lt;p>A few examples I&amp;rsquo;ve seen are:&lt;/p>
&lt;ul>
&lt;li>Finding a visual way to keep track of who&amp;rsquo;s in line to speak&lt;/li>
&lt;li>In large group presentations, using tools create a queue of questions, instead the regular free for all.&lt;/li>
&lt;li>Reducing the size of meetings to encourage contribution. I am particularly fond of a saying from my coworker &lt;a href="http://linkedin.com/in/clettenberg">Chase Clettenberg&lt;/a>: &amp;ldquo;More than eight don&amp;rsquo;t collaborate&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;p>I appreciate these things because they bring a whole new attitude to our shared remote spaces, one that is a little bit more aware. I hope that this level of rigour will help remote work leapfrog non-remote work. And in the future we can say that remote sponsorship is as easy, or better than in-person.&lt;/p>
&lt;p>&lt;strong>&lt;em>What was your path to attaining the Principal title at Stitchfix?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I joined Stitch Fix as a lead developer working on the backend for our iOS application.&lt;/p>
&lt;p>I dove in and did the job delivering features through the API. During that time though I experienced friction while doing the work. As we delivered features, we would also spend time and effort to reduce that friction.&lt;/p>
&lt;p>We tried to reflect on all the reasons for that friction. We used retros and post mortems to identify perennial issues. We talked through the possible systemic reasons for the friction.&lt;/p>
&lt;p>While working on reducing the friction in our system we found patterns that were applicable more broadly, so I would also spend time working with other teams to see if they found our work valuable. This led to a natural expansion of my duties.&lt;/p>
&lt;p>At the same time I was working with my manager on the promotion process. We spent time looking at the rubric to understand what was expected of a principal developer and we worked together on a plan to move from lead to principal.&lt;/p>
&lt;p>While reducing friction led us to trying out GraphQL. I think a number of the projects we undertook to reduce friction were a key part in my promotion. Specifically, we worked on friction that was not only directly affecting us as developers, but it was also affecting the delivery of value to our customers.&lt;/p>
&lt;p>&lt;strong>&lt;em>There is a popular idea that becoming a Staff engineer requires completing a Staff project. Was your work on GraphQL considered a Staff project for you?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Here at Stitch Fix at least that isn&amp;rsquo;t a specific requirement. While I think that some projects can make it obvious that you are meeting the expectations and are ready for promotion, it&amp;rsquo;s not required. I&amp;rsquo;m not sure I&amp;rsquo;ve ever seen that as a requirement. There are a number of Staff+ folks I&amp;rsquo;ve worked with in my career whose influence is less about delivering big projects and more about nurturing or helping others do that work. Both things are valuable.&lt;/p>
&lt;p>&lt;strong>&lt;em>It seems like StitchFix has done a great job of valuing what Tanya Reilly calls &lt;a href="https://noidea.dog/glue">being glue&lt;/a>. What has StitchFix done to create that culture?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>There feels like a lot of room at Stitch Fix to create a narrative. Not all issues you run into day to day can be fixed in an hour. Sometimes you need to collect all the pieces and then arrange them in order to draw attention to a particular issue over time. When you zoom out it&amp;rsquo;s possible to connect the dots - that thing that looked kind of small before, may now seem like a bigger issue - And so I think that with time and space you can bend people&amp;rsquo;s attention to focus on the big and small things that have an impact.&lt;/p>
&lt;p>&lt;strong>&lt;em>What advice do you have for someone who is a tech lead now and wants to make the transition to Principal?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Actually, funny enough, I was just reading your guide recently, &amp;ldquo;&lt;strong>&lt;a href="https://staffeng.com/guides/work-on-what-matters">Work on what matters&lt;/a>&lt;/strong>&amp;rdquo;, and that&amp;rsquo;s what I would say to someone. Earlier In my career, I built things that were so far from the mark, like not even close. That hurts. I chose to work on it. Nowadays, I get a lot of positive feedback that I am spending time on valuable investments. I owe a lot to recognizing when I was far from the mark and then working on improving my ability to build the appropriate thing.&lt;/p>
&lt;p>It felt a lot better when I started to focus on what&amp;rsquo;s important to the company, and what&amp;rsquo;s important to the user base, and then trying to bridge the gap by making services and experiences that were beneficial to all parties. I realized that if you can focus your work on that nexus, If you can reduce friction and increase the capacity of your organization to continually deliver at that nexus, you&amp;rsquo;ll never be far from the mark. It feels like a clear way to progress. You&amp;rsquo;ll learn a lot and you&amp;rsquo;ll also make a big impact.&lt;/p>
&lt;p>&lt;strong>&lt;em>In my interview with &lt;a href="https://staffeng.com/stories/michelle-bu">Michelle Bu&lt;/a>, she warns against pursuing the title before you’ve made sure you’d enjoy the work, which I thought was an important point. It’s easy to look past the work and only see the title.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Interesting. I&amp;rsquo;ll take your interview and raise you a &lt;a href="https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/">blog post Charity Majors wrote&lt;/a>. Her thesis is that you shouldn&amp;rsquo;t see managing and IC work as a binary, instead there might be a lot of value in moving back and forth between the two. The goal is a shift in perspective.&lt;/p>
&lt;p>That shift in perspective feels like it can apply to things other than moving between management and IC work. Hopefully your organization is creating opportunities for you to try out new kinds of work. If it doesn&amp;rsquo;t you should consider doing it yourself. Find ways to shift your perspective in order to see the work in a new way.&lt;/p>
&lt;p>So, in that way, I agree, organizations should help folks find work they think is rewarding, and you shouldn&amp;rsquo;t necessarily pursue a title unless it&amp;rsquo;s rewarding. This can get messy in organizations where pay is connected to title though.&lt;/p>
&lt;p>&lt;strong>&lt;em>Finding the nexus of company need and impact makes intuitive sense, but I’ve found that some folks conflate what they’re interested in with what the company needs. Do you have advice for folks on how to avoid doing that?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Yep, I&amp;rsquo;ve totally done that before. But, I&amp;rsquo;m not sure it&amp;rsquo;s avoidable. I&amp;rsquo;ve worked with folks who can learn before they leap. I&amp;rsquo;m not one of those people. I had to do the wrong thing in order to know what the right thing was. Overtime, I feel like I&amp;rsquo;ve come to understand that and can do the work upfront.&lt;/p>
&lt;p>Looking back though, what I wish I spent more time on was clarifying the value proposition. Like, constantly. What is valuable about this for our users, etc. Then zeroing in on that. Often, when you do that technical considerations start to drop away. Obviously, over time a successful business will become more complex and you&amp;rsquo;ll need to invest in technical solutions that increase your org&amp;rsquo;s capacity to deal with it, but even in those situations you should still be focused on the value to be delivered.&lt;/p>
&lt;p>When it comes to value delivery there are a few resources that I appreciate:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://bookshop.org/books/the-goal-a-process-of-ongoing-improvement/9780884271956">The Goal&lt;/a>: A book about value delivery in a physical manufacturing plant (The Phoenix Project is a re-telling of this story in IT)&lt;/li>
&lt;li>&lt;a href="http://devopscafe.org/">DevOpsCafe Podcast&lt;/a>: Go through the archives. Even if you are a developer only. Many of the guests have been involved in large scale change and have valuable lessons for listeners. Also, its a great companion to all the Dev Ops books out their.&lt;/li>
&lt;li>&lt;a href="https://list.wardleymaps.com/">Wardley Maps&lt;/a>: Connect your user outcomes to your technical components in a clear way. The concepts by themselves are incredibly valuable when it comes to weighing where you invest.&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;m going to come back to this idea one more time. Having a product mindset is the best way to ensure you are working on the most appropriate thing. Always get to know your users. What do they want? Then ruthlessly think about your time and effort as investment credits. How are your choices helping deliver value to your user.&lt;/p>
&lt;p>&lt;strong>&lt;em>What about a piece of advice for someone who has just started as a Staff or Principal engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>First, make sure you continue to advocate for the folks who are doing the hard work. That&amp;rsquo;s tougher than it sounds. When you move farther away from the teams doing the work there&amp;rsquo;s a tendency for trust to drop. When that happens you won&amp;rsquo;t have a clear picture of how work actually gets done.&lt;/p>
&lt;p>Second, understand the bigger picture, and how the work of ICs fits in. Share that with anyone who will listen. Help folks understand how they fit in. There&amp;rsquo;s a lot of anxiety in our industry around one&amp;rsquo;s capabilities. Imposter Syndrome, et all. It&amp;rsquo;s hard to connect the dots between what you&amp;rsquo;re working on and it&amp;rsquo;s value to the company. Folks find it hard to see how they are fully capable, but there is this stuff called computers and organizations that stand in their way most of the time. Senior IC&amp;rsquo;s make a big impact by shining a light on effort and complexity that&amp;rsquo;s hard for everyone to see. If you can help folks find value in their work and recognize capabilities they already have you are well on your way. At least, I have to hope so because that&amp;rsquo;s my plan.&lt;/p>
&lt;p>&lt;strong>&lt;em>You mentioned becoming a manager through happenstance, but did you ever consider deliberately taking on an engineering management role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>As a manager, I would mandate the solution. Oof, that was horrible, a big mistake. As an IC I must build a coalition. It forces me to prove the value. While I hope I&amp;rsquo;ve learned my lesson, I&amp;rsquo;m not in a hurry to find out. I&amp;rsquo;m quite happy being a coalition builder.&lt;/p>
&lt;p>Also, I don&amp;rsquo;t see the work of a manager as fundamentally different from an IC. We&amp;rsquo;re all trying to deliver more value to our customers. In an organization, there are many functions that need to get done for that to happen. Some of those functions are assigned to a manager, and some to ICs. For me, I don&amp;rsquo;t feel like there is anything that prevents me from impacting or influencing any of those functions in order to improve delivery. Someday, if it feels valuable, I can see taking on a new set of functions directly. But, especially at Stitch Fix, I&amp;rsquo;ve seen the impact our senior IC&amp;rsquo;s have, and I don&amp;rsquo;t see any limits.&lt;/p>
&lt;p>&lt;strong>&lt;em>Probably the number one email I get about StaffEng is that folks want to amend &lt;a href="https://staffeng.com/guides/staff-archetypes">the Staff archetypes&lt;/a> to include a Staff engineer whose sole contribution is writing amazing software. Is that an archetype that you’ve worked with or seen?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>If you mean a person who disappears for months at a time and when they come back drops technical improvements on the rest of us that work and solve the real problem. Then, no. I&amp;rsquo;ve seen people try. It&amp;rsquo;s possible that I&amp;rsquo;ve tried that, and it doesn&amp;rsquo;t work.&lt;/p>
&lt;p>&lt;strong>&lt;em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I&amp;rsquo;m a huge fan of the work you&amp;rsquo;ve done. Your &lt;a href="https://lethain.com/digg-v4/">blog post about launching Digg v4&lt;/a> is a poignant reminder of how it&amp;rsquo;s always possible to get into a stomach turning situation. Digg was a big deal when I was younger. I remember watching Kevin Rose talk about Digg on Tech TV. It&amp;rsquo;s always a joy to read about how folks made those early services go from the inside. I find myself regularly sharing stuff from StaffEng and your blog.&lt;/p>
&lt;p>Your experience shows in your writing. That means a lot to me. It&amp;rsquo;s clear that you&amp;rsquo;ve done a thing, reflected on it, and then shared what you&amp;rsquo;ve learned. When I decide how much stock to put into something, that is the number one quality I am looking for. How does this person &lt;strong>know what they know?&lt;/strong>&lt;/p>
&lt;p>I think there are others out there that share that quality.&lt;/p>
&lt;p>&lt;a href="https://nicolefv.com/">Nicole Forsgren, PHD&lt;/a> - She was a sysadmin for a number of years before earning a PHD. Her work is grounded in that practice and it shows.&lt;/p>
&lt;p>&lt;a href="https://twitter.com/allspaw">John Allspaw&lt;/a> - I remember the first time I heard about &lt;a href="https://www.youtube.com/watch?v=LdOe18KhtT4">how often Flickr deployed&lt;/a>. This, at a time when CI/CD was novel, blew my mind. Equally impressive was that while he was CTO of Etsy he earned a masters degree in Human Factors and Systems Safety. Anyway, I highly recommend keeping up with whatever he&amp;rsquo;s interested in. When it comes to the next 10 or 20 years of our careers I think he&amp;rsquo;s on it in terms of growing the capacity of individuals.&lt;/p>
&lt;p>&lt;a href="https://twitter.com/kelseyhightower">Kelsey Hightower&lt;/a> - Ostensibly he&amp;rsquo;s a developer advocate, but he&amp;rsquo;s got such an expansive vision on the future of infrastructure. If you&amp;rsquo;ve ever dealt with the bowls of things like the AWS CLI or Cloud Formation you know &amp;ndash; there be dragons. Speaking of capacity, when you ask, how do we grow our capacity to deal with the cloud, I feel like Hightower has an answer.&lt;/p>
&lt;p>I find that it&amp;rsquo;s not enough to have purely technical recommendations. I personally find a lot of inspiration from books and tv.&lt;/p>
&lt;p>&lt;a href="https://www.robinsloan.com/">Robin Sloan&lt;/a> - a fiction writer, crafter, olive oil maker, modern renaissance day man. His writing has an incredibly organic feel for speculative fiction. As a previous bay area resident it feels like he&amp;rsquo;s soaking up the ether and transmuting it into witty commentary on tech. Start with a slightly older piece &lt;a href="http://snarkmarket.com/2010/4890">stock and flow,&lt;/a> and a recent piece &lt;a href="https://www.berkeleyside.com/2020/11/25/robin-sloan-berkeley">Berkeley and its casual geniuses&lt;/a>. Also make sure to checkout, &lt;a href="https://www.robinsloan.com/books/penumbra/short-story/">Mr. Penumbra’s 24‑Hour Bookstore&lt;/a>, the story. I ran across this short story in my feed reader many years ago, but I didn&amp;rsquo;t realize it was fiction. I believed I was reading a first person nonfiction narrative. Needless to say, at the end of the story, for a moment I believed that magic was real, before snapping back. It gave me chills.&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Kim_Stanley_Robinson">Kim Stanley Robinson&lt;/a> - SF Writer. The reality of the next 100 years lies somewhere between two extremes. I&amp;rsquo;m not sure if humanity will meet it with grace at all times, but I believe in the ingenuity and resilience of us all. I feel like Robinson writes particularly rich accounts of humanity, while also embracing our complex systems. I&amp;rsquo;m reading &lt;a href="https://en.wikipedia.org/wiki/The_Ministry_for_the_Future">The Ministry of The Future&lt;/a> right now.&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/David_Simon">David Simon&lt;/a> - Journalist, Author, TV Producer - Watch &lt;a href="https://en.wikipedia.org/wiki/The_Wire">The Wire&lt;/a>. Looking back, this show was my earliest exposure to the idea of systems thinking. He has a knack for understanding this kind of stuff, and as far as I can tell, finding the right folks to help him tell the stories.&lt;/p></description></item><item><title>Present to executives</title><link>https://staffeng.com/guides/present-to-executives/</link><pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/present-to-executives/</guid><description>&lt;p>Have you presented to company executives about a key engineering initiative, walking into the room excited and leaving defeated? Maybe you only made it to your second slide before unrelated questions derailed the discussion. Maybe you worked through your entire presentation only to have folks say, &amp;ldquo;Great job,&amp;rdquo; and leave without any useful debate. Afterward, you&amp;rsquo;re not quite sure what happened, but you know it didn&amp;rsquo;t go well.&lt;/p>
&lt;p>Early in your career, you probably won&amp;rsquo;t interact with company executives frequently. Sure, if it&amp;rsquo;s a small enough company, you might, but it isn&amp;rsquo;t the norm. As you get further into your career, though, increasingly, your impact will be constrained by your ability to influence executives effectively. While &lt;a href="https://staffeng.com/guides/staying-aligned-with-authority">staying aligned with authority&lt;/a> is a prerequisite to influencing executives, there are also some new communication skills for you to develop.&lt;/p>
&lt;h2 id="why-this-is-hard">Why this is hard&lt;/h2>
&lt;p>Everyone has worked with a terrible executive at some point in their career, but most executives aren&amp;rsquo;t awful. Almost all executives are outstanding at &lt;em>something&lt;/em>; it&amp;rsquo;s just that often that &lt;em>something&lt;/em> isn&amp;rsquo;t the topic you&amp;rsquo;re communicating about with them. When you combine that lack of familiarity with your domain with limited time for the topic at hand, communication is a challenge.&lt;/p>
&lt;p>Those are garden-variety communication challenges, though, and communicating with executives can be unexpectedly difficult for a less apparent reason: the executive has become accustomed to consuming reality preprocessed in a particular way.&lt;/p>
&lt;p>Any given executive is almost always uncannily good at one way of consuming information. They feel most comfortable consuming data in that particular way, and the communication systems surrounding them are optimized to communicate with them in that one way. I think of this as preprocessing reality, and preprocessing information the wrong way for a given executive will frequently create miscommunication that neither participant can quite explain.&lt;/p>
&lt;p>For example, some executives have an extraordinary talent for pattern matching. Their first instinct in any presentation is to ask a series of detailed, seemingly random questions until they can pattern match against their previous experience. If you try to give a structured, academic presentation to that executive, they will be bored, and you will waste most of your time presenting information they won&amp;rsquo;t consume. Other executives will disregard anything you say that you don&amp;rsquo;t connect to a specific piece of data or dataset. You&amp;rsquo;ll be presenting with confidence, knowing that your data is in the appendix, and they&amp;rsquo;ll be increasingly discrediting your proposal as unsupported.&lt;/p>
&lt;p>In most other scenarios, miscommunication creates latency rather than errors. Still, when you&amp;rsquo;re communicating with executives, you&amp;rsquo;ll often not get a second chance to discuss a given topic before the relevant decision is made. Invest ahead of the discussion to avoid lamentations afterward.&lt;/p>
&lt;h2 id="how-to-communicate-effectively">How to communicate effectively&lt;/h2>
&lt;p>The foundation of communicating effectively with executives is to get a clear understanding of why you&amp;rsquo;re communicating with them in the first place. You might be used to communicating with folks to change their mind or inform them about your project, but that&amp;rsquo;s probably not the case here.
When you&amp;rsquo;re communicating with an executive, it&amp;rsquo;s almost always one of three things: planning, reporting on status, or resolving misalignment.&lt;/p>
&lt;p>Although these are distinct activities, your goal is always to extract as much perspective from the executive as possible. If you go into the meeting to change their mind, you&amp;rsquo;ll probably come across as inflexible. Go into the meeting to understand how you can align with their priorities.
You&amp;rsquo;ll come across as strategic and probably leave with enough information to adapt your existing plan to work within the executive&amp;rsquo;s newly articulated focuses or constraints.&lt;/p>
&lt;p>The best way to extract their perspective is by writing a structured document. Writing forces you to think comprehensively about your beliefs and data.
The structure ensures you focus the reader on what&amp;rsquo;s important.
Barbara Minto, whose &lt;a href="https://www.amazon.com/Pyramid-Principle-Logic-Writing-Thinking/dp/0273710516/">The Pyramid Principle&lt;/a>
is the most influential work on effective business communication, is also a big fan of structure:&lt;/p>
&lt;blockquote>
&lt;p>Controlling the sequence in which you present your ideas is the single most important act necessary to clear writing.
The clearest sequence is always to give the summarizing idea before you give the individual ideas being summarized.
I cannot emphasize this point too much.&lt;/p>&lt;/blockquote>
&lt;p>There are many structures that can work, but I&amp;rsquo;d particularly recommend every document&amp;rsquo;s opening paragraph
follow the SCQA format:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Situation&lt;/strong>: what is the relevant context? &lt;em>Example&lt;/em>: We&amp;rsquo;ve been falling behind our competition in shipping product features for two years. Last year, we doubled our engineering team but shipped fewer features than the year before.&lt;/li>
&lt;li>&lt;strong>Complication:&lt;/strong> why is the current situation problematic? &lt;em>Example&lt;/em>: We plan to double our engineering team again this year, but based on last year&amp;rsquo;s experience, we think that will decrease velocity further while significantly increasing our organizational budget.&lt;/li>
&lt;li>&lt;strong>Question:&lt;/strong> what is the core question to address? &lt;em>Example:&lt;/em> Should we keep moving forward with our plan to double engineering this year?&lt;/li>
&lt;li>&lt;strong>Answer:&lt;/strong> what is your best answer to the posed question? Example: We should stop hiring for the next six months and focus on gelling our existing team. Based on progress at that point, we should refresh our hiring plan for the remainder of the year.&lt;/li>
&lt;/ul>
&lt;p>In many discussions, a well-structured opening paragraph is enough
to spark an important conversation. Although in those cases, you might not discuss the rest of your document,
the process of writing the document is still an important step in refining your thinking.&lt;/p>
&lt;p>Relatively few folks employ a formal structure for the entirety of their document,
but there is at least one popular format that some folks find valuable:
Minto&amp;rsquo;s Pyramid Principle from the aforementioned book.
Start by brainstorming your proposal into a series of arguments that support your answer.
Once you&amp;rsquo;ve written them all down, group them into related arguments.
Shape those groups into three top-level arguments, with up to three sub-arguments
supporting each of those top-level arguments. Recursively apply this approach,
ensuring each argument summarizes its at-most-three sub-arguments.
Order the arguments within each group by descending importance. At that point, you&amp;rsquo;re done.&lt;/p>
&lt;p>Although I personally found SCQA immediately useful, I&amp;rsquo;ll admit that when I first tried to follow the Pyramid Principle,
it gave me the same emotional response as staring at Brutalist architecture.
It&amp;rsquo;s grown on me with practice, but I&amp;rsquo;d still recommend most folks start by
adopting SCQA as a core practice and only adopt the entirety of the Pyramid Principle
if you get feedback that your presentations are hard to follow.&lt;/p>
&lt;p>After you&amp;rsquo;ve written your structured document, gather feedback on it from your peers and stakeholders. Aligning with stakeholders before your presentation, sometimes called &lt;a href="https://blog.toyota.co.uk/nemawashi-toyota-production-system">nemawashi&lt;/a>, is extremely effective at reducing surprises. Some of your peers should have experience presenting to the executives and will have useful feedback on improvements.&lt;/p>
&lt;p>For the presentation itself, set a clear agenda, but don&amp;rsquo;t focus on rote conformance. A great meeting with executive leadership is defined by engaged discussion, not addressing every topic on the agenda. Some will consider this a controversial position, preferring to measure every meeting by its action items, but this ignores the often more valuable relationship establishment and development aspects of these meetings.&lt;/p>
&lt;h2 id="mistakes-to-avoid">Mistakes to avoid&lt;/h2>
&lt;p>Even if you do a great job preparing for your executive presentation, these things sometimes go wrong. There&amp;rsquo;s nothing you can do that will avoid every bad path, but you can avoid most of the anti-patterns that routinely sink these meetings.&lt;/p>
&lt;p>&lt;strong>Never fight feedback&lt;/strong>. It&amp;rsquo;s very common for an executive to have a critical piece of feedback but to not quite have the right framing to communicate it within the moment. You want them to deliver the feedback anyway, not hold it back and probably forget to give it later. If you show up as resistant to feedback, then they&amp;rsquo;ll start swallowing their comments, and you&amp;rsquo;ll get relatively little out of the meeting. Focus on gathering feedback; don&amp;rsquo;t worry about whether you agree with it until you have more time afterward. If there&amp;rsquo;s a decision that needs to be made that you disagree with, then you should inject one or two pieces of relevant data that might change their mind, but afterward, let it go. You&amp;rsquo;ll be more effective by reflecting on the feedback and changing their mind later than continuing to push back within the meeting.&lt;/p>
&lt;p>&lt;strong>Don&amp;rsquo;t evade responsibility or problems.&lt;/strong> Many folks try to hide issues from their leadership, and this always goes poorly. Successful folks look at informing executives as absolution: once it&amp;rsquo;s on the table, you can move towards solving it rather than hiding it. This is particularly true if an executive sniffs out a problem during a meeting. Lean into the feedback, don&amp;rsquo;t evade it. You will create more credibility by agreeing with their perspective and following up with more data later. You will harm your credibility by arguing with them about it.&lt;/p>
&lt;p>&lt;strong>Don&amp;rsquo;t present a question without an answer.&lt;/strong> A frequent piece of advice given to new leaders is to &amp;ldquo;never bring your manager a problem without a solution.&amp;rdquo; That&amp;rsquo;s not generally great advice, but if you present a problem to an executive without a proposed answer, then in the back of their mind, they&amp;rsquo;re wondering if they need to hire a more senior leader to supplement or replace you. You can&amp;rsquo;t create alignment in the room unless you have a proposal for folks to align behind.&lt;/p>
&lt;p>&lt;strong>Avoid academic-style presentations.&lt;/strong> The way you&amp;rsquo;re taught to present about topics in school is more-or-less the entirely wrong approach for presenting to executives. The &lt;em>Minto Pyramid Principle&lt;/em> will steer you in the right direction if you follow its scripture.&lt;/p>
&lt;p>&lt;strong>Don&amp;rsquo;t fixate on your preferred outcome.&lt;/strong> It&amp;rsquo;s very common for folks to get so caught up on the outcome that they want that they spend their energy resisting the clear, unavoidable signs that it isn&amp;rsquo;t going to happen that way. It&amp;rsquo;s very easy to get frustrated about the &amp;ldquo;wrong&amp;rdquo; decision getting made, but it&amp;rsquo;s helpful to keep in mind that there is a great deal of context that you&amp;rsquo;re missing. There is no such thing as a permanent decision: almost every decision will be reconsidered multiple times over the next two years.&lt;/p>
&lt;p>Presenting to executives can be intimidating, and this might be more advice than helpful. If you want to boil it all down to one concise tip: send an early draft to an executive attending the meeting and ask them what to change. If you listen to and apply that feedback, you&amp;rsquo;ll figure out the other pieces as you go.&lt;/p></description></item><item><title>John Zittlau - Principal Engineer at Jobber</title><link>https://staffeng.com/stories/john-zittlau/</link><pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/john-zittlau/</guid><description>&lt;p>&lt;span class="date fr">December, 2020&lt;/span>
&lt;a href="https://www.linkedin.com/in/johnzittlau/">linkedin&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Tell us a little about your current role: where do you work, your title and generally the sort of work do you and your team do.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I&amp;rsquo;m currently a Principal Engineer at Jobber. Jobber is a SaaS offering that helps small home service businesses stay organized, connected with customers, grow revenue, and better compete against large corporations. We provide an online application along with a mobile application for Android and iOS. The engineering team works within Scrum to constantly innovate on new features as well as maintaining the products.
As the Principal Engineer, my role is to help teams with delivery of their work, ensure engineers can constantly grow in their craft and be available to “put out fires” when needed.&lt;/p>
&lt;p>&lt;strong>&lt;em>What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>As the only Principal engineer on the team, I suppose what I do must be considered “normal”. We have considered what it will look like with more Principal engineers and to a large degree we expect that yes, what I currently do will largely be the normal for Principal engineers.&lt;/p>
&lt;p>What that means is that we believe a Principal engineer’s primary duty is to ensure the engineering organization is able to deliver work accurately and with high quality (and as efficiently as possible given the other constraints). This usually will look like mentoring and lending a coding hand where needed. Principal engineers are also expected to have a voice in long term strategy and to constantly be looking for ways to accelerate the teams through tools, processes and whatever else presents itself. Finally, Principal engineers collaborate with the development managers to help all developers grow.&lt;/p>
&lt;p>Staff engineers at Jobber actually have similar expectations to the above but at a smaller scope. They should primarily be focused on helping the team they are on, but we do expect Staff engineers to also have impact beyond their team in similar ways to a Principal engineer.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you spend your time day-to-day?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I’m usually beholden to two teams. The Engineering Leadership Team is my primary team. And then I’m often embedded with a specific development team. This means I usually have twice the Scrum ceremonies per sprint.&lt;/p>
&lt;p>Outside the Scrum meetings, I’ll typically have meetings with other development teams (at their request) to discuss challenges they are facing. I also have monthly one-on-ones with the Staff level engineers. I’m expected to mentor all developers, but have a specific focus on the Staff level.&lt;/p>
&lt;p>With the rest of the day, I’ll spend some time on any work I’ve committed to with the Leadership team and finally help the team I’m embedded with to complete work on their backlog.&lt;/p>
&lt;p>Despite leaving the embedded team’s backlog as the last item, my target is to spend 60% of my time per week with the embedded team. A bit of that goes to Scrum meetings with the embedded team, but the bulk should be spent coding against the team’s backlog.&lt;/p>
&lt;p>While not day-to-day, I also currently have a strong hand in hiring new developers. As such, when we are in hiring mode, I’ll be reviewing take-home challenges and conducting technical interviews as needed. But to maintain scalability of our hiring as we grow, I’m actively transitioning this work to our Staff engineers.&lt;/p>
&lt;p>&lt;strong>&lt;em>Where do you feel most impactful as a Staff-plus engineer? A specific story would be grand.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>As a Principal engineer, I have many opportunities for huge impact. Technically, I led an initiative to help our database scale that involved coordinating the work of almost all the development teams. The resulting changes had a significant impact on our scalability. But that isn’t my proudest moment.&lt;/p>
&lt;p>I feel my biggest impact was with a team that I was asked to embed with. There was a perceived negative external feeling on the team’s ability to deliver in a timely way. There were also some internal challenges with the belief that some members were not delivering as expected. While on the team, I was able to help them deliver a critical new feature as well as uncover some of the root causes of the challenges they were facing.&lt;/p>
&lt;p>What was understood to be an external dissatisfaction with the team turned out to have been magnified far beyond the initial “complaint”. The internal challenges were real but with some mentoring of both the people who had been on the team for a while as well as the new people and helping set expectations on both sides, the team worked through the issues they were facing in a way that allowed everyone to grow a bit.&lt;/p>
&lt;p>Had I not embedded with the team and worked shoulder to shoulder with them, I would not have been able to uncover some of the issues. Had I been perceived as having more direct power over the developers (as a manager for example), some conversations would have been less frank. Being a Principal engineer put me in a unique position to maximize how I could help the team.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done before reaching that title?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I believe that by still primarily being a “coder” in the eyes of the developers, but having a voice in the Engineering Leadership Team, I’m in a position to both gain and maintain the trust of the developers while being uniquely positioned to effect change when needed.&lt;/p>
&lt;p>I work hard to build this trust by speaking with as many of the developers as possible in informal settings. And then only using what is said in those conversations in agreed upon ways. I’ll not “tattle” to their managers, but if I think it is appropriate, I’ll ask if I can raise the subject to their managers. Happily, the culture at Jobber is such that I rarely actually have to be a middle man. It is more that I’m sponsoring someone’s career wishes and helping them express themselves to their managers.&lt;/p>
&lt;p>While my technical achievements and responsibilities have grown with promotions, it is the ability to help others grow that I would not have been able to do prior to becoming a Staff engineer and then moving on to Principal. But if I had moved to a manager role, I believe conversations with other developers would have been different and in some cases limited my abilities to help them.&lt;/p>
&lt;p>&lt;strong>&lt;em>Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for? Can you share a story of influencing your organization?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Yes I do. While the Architect is primarily tasked with guiding our future technology and architecture, I work closely with the Architect at times to provide my insight.&lt;/p>
&lt;p>A recent advocating was related to significant changes we needed to make to our codebase to allow for database scaling. To influence the organization, I had to demonstrate the limitations we currently faced. How and when those limitations would impact Jobber’s ability to grow and the proposed path forward with expected returns.&lt;/p>
&lt;p>Since this change required significant engineering effort, it did require significant buy-in from all parts of the organization as other initiatives would be slowed down or halted as we worked on this. I laid out resourcing needs and expected durations to help the organization accommodate this work along with other current initiatives.&lt;/p>
&lt;p>The project was approved and completed successfully.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you keep in touch with how things really work as you spend less time on hands-on development?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I still do spend a significant amount of my time hands-on. I also have regular one-on-ones with Staff level engineers to get their pulse on the teams. Finally, I try to regularly get together with other developers on an informal basis. Some Staff engineers and the Architect also find it useful to randomly check out PRs to keep track of how code is evolving over time. This obviously does not provide a complete view, but seems to at least provide clues to how things are moving.&lt;/p>
&lt;p>&lt;strong>&lt;em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Yes I do sponsor other developers, but it is generally not a key aspect of my role. The development managers are generally expected to take this on.&lt;/p>
&lt;p>While not exactly “sponsoring”, I did take a specific new hire “under my wing”. This person had very limited programming experience when interviewing with us, but I felt they had significant potential. I value passion and potential very highly in new junior hires. I argued hard for hiring them and then committed to spending extra time with them to help fill in the gaps a formal software development education would have provided. They are now a highly valued asset to Jobber.&lt;/p>
&lt;p>I will also provide input on an engineer&amp;rsquo;s growth when the engineering manager is evaluating an engineer on their last year of growth.&lt;/p>
&lt;p>&lt;strong>&lt;em>Were you hired as a Staff engineer? If not, what was the process of getting promoted to Staff?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I was hired as a Staff engineer at Jobber and was previously a Staff engineer at Intuit. I&amp;rsquo;ve been a Staff engineer for 5 years and a Principal engineer for 3.&lt;/p>
&lt;p>The process to move from Staff engineer to Principal at Jobber basically followed the increasing impact I had on the engineering team and beyond to the rest of Jobber.&lt;/p>
&lt;p>The engineering team was still relatively small when I started. As the team grew, my responsibilities grew. It became evident that I was doing more than was typically expected of a Staff engineer. Additionally, we had to make room for others to become Staff engineers while still having a mentor/role model for them to follow.&lt;/p>
&lt;p>I actually was simultaneously promoted to Principal engineer and Staff Development Manager. For about a year, I wore two hats. I maintained a strong development role, while at the same time, the senior developers reported to me. This was triggered by our rapid growth and the need to distribute developer reporting across more managers. We eventually hired managers to replace me in that role and I again focused on the Individual Contributor side of the ladder.&lt;/p>
&lt;p>&lt;strong>&lt;em>What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>The primary factor in my career growth from senior to staff to principal has been passion. I really enjoy what I do and I’m constantly working to grow with side projects on my own time.&lt;/p>
&lt;p>A second critical factor has been to find a niche of something important that needs doing that either no one else wants to or is able to. In my move from senior to staff, this niche was performance and load testing. We needed to prove we could handle traffic at scale. I took ownership of this. It was highly visible and important work.&lt;/p>
&lt;p>My move from staff to principal was helped by me becoming the DBA of the engineering team when our database was struggling. Again, highly visible and important work.&lt;/p>
&lt;p>I’ve worked with developers with formal university education, technical college education, no formal education and post-grad degrees. I’ve found strong developers and weak developers from all those backgrounds. While education will likely give you a strong grounding, I believe passion will take you where you want to go.&lt;/p>
&lt;p>&lt;strong>&lt;em>There is a popular idea that becoming a Staff engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I think that is generally true. At Jobber, we expect Staff engineers (and principal) to have impact beyond their team. This is usually via some project.&lt;/p>
&lt;p>My Staff Project was performance and loading testing at Intuit Canada. The tax product receives a very high load during the last week of tax season. A lot of money is made during that week. Having confidence that the product would be able to handle that load was critical.&lt;/p>
&lt;p>For Principal engineer, it was less of a project. Early on, our database was struggling and I became DBA for a while to resolve the database issues. This did not directly lead to my promotion but was a clear demonstration that I could jump in where needed and help Jobber succeed. I believe that ability to help out where needed was the driving force in my promotion.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>This is the start of you being measured not by what you do, but by what your team does.&lt;/p>
&lt;p>It is both the biggest reward and hardest challenge as you move up the ladder. While still being regarded for your coding abilities, your ability to make the team better starts to rise in importance.&lt;/p>
&lt;p>&lt;strong>&lt;em>What about a piece of advice for someone who has just started as a Staff engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Find a place where you can make a difference.&lt;/p>
&lt;p>&lt;strong>&lt;em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Yes I did. I was an engineering manager for a year. The Individual Contributor path called me back as I realized the parts of the week that I most enjoyed were when I got time to code.&lt;/p>
&lt;p>As a Principal engineer, I do collaborate with the engineering managers and am expected to have a part in their career growth, but when I gave up my manager hat it was because it was clear my strongest contributions to Jobber would still be as a developer.&lt;/p></description></item><item><title>Greg Wittel - Principal Software Engineer at Proofpoint</title><link>https://staffeng.com/stories/greg-wittel/</link><pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/greg-wittel/</guid><description>&lt;p>&lt;span class="date fr">December, 2020&lt;/span>
&lt;a href="https://www.linkedin.com/in/greg-wittel">linkedin&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Tell us a little about your current role: where do you work, your title and generally the sort of work do you and your team do.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I am a Principal Software Engineer at &lt;a href="https://www.proofpoint.com">Proofpoint&lt;/a>. My team is one of several focused on maintaining threat detection efficacy. We create backend infrastructure that fits between customer footprints and internal threat detection systems. The internal threat detection systems are built by multiple teams including mine. Depending on the purpose, our detection budget ranges from milliseconds to minutes. A given threat may be common run of the mill spam, to narrowly targeted one of a kind malware.&lt;/p>
&lt;p>Typically, I focus on leading design and implementation of 1-2 projects at a time. Additionally, I may be acting as an advisor on projects that others will lead. Projects I work on usually impact the majority of our customers and may span multiple teams or business units. Depending on the nature of the project I may be contributing as a subject matter expert (e.g. security), or in the form of general engineering practice (e.g. architecture).&lt;/p>
&lt;p>Outside of core projects, my time is often spent:&lt;/p>
&lt;ul>
&lt;li>Working on hard problems or troubleshooting when others need additional assistance.&lt;/li>
&lt;li>Working with other high level engineers to tackle organizational engineering challenges.&lt;/li>
&lt;li>Guiding junior engineers.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;em>What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>While it varies across different parts of the company most Staff-plus engineers are leading key initiatives (new or ongoing), or delving into early research/proof-of-concept phase work. They will be deeply involved in one or both of the design and implementation of projects. Typically these will involve multiple teams, and possibly multiple divisions within the company.&lt;/p>
&lt;p>For projects with customer facing elements, typically engineers are working with product teams to help shape the solution and end to end plan. Purely backend projects are usually engineering lead, coordinating with other teams as needed. At implementation time, most Staff-plus engineers are hands on, though some delegate work to the respective teams. By choice, I work in the hands on category.&lt;/p>
&lt;p>At a high level, my role looks similar to other Principals at the company. Due to my teams&amp;rsquo; infrastructure role, we work with a variety of teams, as well as being involved in a more varied set of projects than other teams. Because I have worked in many areas within Proofpoint, I often am asked to delve into security, systems, and scaling related challenges in addition to core project work. While being pulled into many differing areas can be challenging, it is also extremely helpful in learning how we can best help the company and our customers.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you spend your time day-to-day?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Because I have both project lead and implementation responsibilities, I typically try to allocate time within a week across three core areas: hands on technical, meetings/project management, and learning. I try to schedule time in blocks in order to reduce context switching between these areas. In addition we have no meetings days for focus time within the team.&lt;/p>
&lt;p>While I have intentionally kept my role with a hands on element, the project lead responsibilities do mean that I write less code than I did as a Staff or Senior Engineer. I try to keep good notes on design, status, and next steps. This helps me resume from interruptions as fast as I can.&lt;/p>
&lt;p>I try to optimize time in meetings in a few ways. First by pushing what I can to async means &amp;ndash; e-mail, wikis, tickets, etc. Sometimes a meeting request really just requires some Q&amp;amp;A and can be answered via a short chat, email, or wiki update. This helps defend my teams&amp;rsquo; time, as well as provides a reference doc for key information. Coming into a meeting, I want to have a plan whether it is an agenda, or a set of questions I hope to answer in the meeting. This helps speed up meetings and helps ensure the meeting is productive.&lt;/p>
&lt;p>I strive for a continuous learning mindset. At work this means doing what I can to learn about new technologies, research, and the security landscape. Sometimes this covers immediately relevant information, other times its just interesting to me as an engineer. This helps keep me current, as well as broadens the set of options I can bring to bear in a new project.&lt;/p>
&lt;p>&lt;strong>&lt;em>Where do you feel most impactful as a Staff-plus engineer? A specific story would be grand.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>As a Staff-plus engineer I want to help improve everyone&amp;rsquo;s chance of success. In the end, as an engineer if I am not making things better for our customer (internal or external), then I have work to do. In some cases this comes in the form of improving productivity, in others it is by helping projects succeed.&lt;/p>
&lt;p>One of the most rewarding things for me is to be able to take a large project from idea to production. Asking the right questions early on in a project can save substantial amounts of time later on, as well as ensure it is on the right track. As a Staff-plus engineer, I have a seat at the table earlier in a projects&amp;rsquo; lifetime. This gives me the opportunity to influence or course correct a project. Examples of factors requiring a course correction might include: ill defined (but critical) requirements, missing particular architectural failure modes, and correctly planning for scale.&lt;/p>
&lt;p>When we&amp;rsquo;re trying to design a project plan, we won&amp;rsquo;t always have enough data to drive early decision making. It takes experience to ask the right questions about the data, and interpret results correctly. Having worked in security for well over a decade, I am able to use my experience to ask the right questions. The more I can help others do this themselves, they will be better able to work autonomously and do well.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done before reaching that title?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>The biggest things are around scope of influence and timing of being brought into a problem. As a Principal engineer, I may be working on projects ranging in scale from small ones within my team, to large company level efforts across multiple teams and business units. At the same time, being a higher level engineer has meant getting a seat at the table during the early decision making process. In some cases it is to provide guidance in shaping an effort (including pushing back on requests). In other cases, it is to lead a project. Additionally, I am more able to contribute to addressing organizational issues such as: providing feedback on leadership, challenges facing engineering teams as a whole, developer productivity, etc.&lt;/p>
&lt;p>&lt;strong>&lt;em>Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for? Can you share a story of influencing your organization?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>While I spend time in an advocacy role, it is a relatively small portion of my time. For an active advocacy role, I work with several other Principal level engineers to identify areas that could use improvement. We&amp;rsquo;re seeking to identify, understand, and address problems in any of the people, process, technology realms. Effecting organizational change is difficult &amp;ndash; we must have buy in from teams and their management chain. When we&amp;rsquo;re asking for a change, we&amp;rsquo;re asking teams to take time away from their core deliverables &amp;ndash; time that they may not feel able to spare.&lt;/p>
&lt;p>Two examples come to mind:&lt;/p>
&lt;ul>
&lt;li>A project that is slow or difficult for developers to implement, test, or deploy changes.&lt;/li>
&lt;li>An unstable, but important service requiring frequent fire fighting.&lt;/li>
&lt;/ul>
&lt;p>The impact of both problems is similar &amp;ndash; engineers spend time on the wrong thing. No one wins: product won&amp;rsquo;t get the features on time, customers will see outages, engineers will be unhappy. Often teams know their trouble spots, as advocates we can provide additional support. This may come in the form of technical assistance
or nudges to the management chain. From there, we can delve into root causes and push for focus on the right areas covering short through long term plans.&lt;/p>
&lt;p>In a passive advocacy role, I contribute in a few ways. First, people frequently come to me for advice. Sometimes it is for my particular expertise, in other cases for a general engineers&amp;rsquo; take. Working as a sounding board for others gives me a chance to learn, push for better designs, as well as guide engineers to others who can offer better assistance. At a secondary level, I try to lead by example. In the course of my work I want to set a bar others to reach. In a project this may be in core technical implementation, as well as oft-neglected portions such as documentation.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you keep in touch with how things really work as you spend less time on hands-on development?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I&amp;rsquo;ve specifically kept as much hands on work as I can. Despite this, I do code substantially less than I once did. My teams&amp;rsquo; integration role means understanding other groups is an important factor for our success. Because we have to work across multiple organizational boundaries, I must have a very wide understanding of the end to end architecture across multiple teams and business units.&lt;/p>
&lt;p>A secondary factor to keep in touch with how things work is by following my curiosity. I follow a continuous learning mindset &amp;ndash; design docs, research papers, technical how-tos, etc. all play a role in this process. I read as much as possible, roughly grouping things in now/soon/whenever buckets. This helps me understand the landscape (in and out of company), as well as have a broader set of options that may be useful when future problems arise.&lt;/p>
&lt;p>Ideally I should be able to find something to learn from any engineer. I cannot know everything, other engineers with differing experience have knowledge that can be shared. In talking with others, understanding their work is important. That may expose common problems, or give rise to new ideas. On more than one occasion, these sorts of discussions have resulted the creation of new customer facing products or features for Proofpoint.&lt;/p>
&lt;p>&lt;strong>&lt;em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>While I have sponsored other engineers, it is not a key aspect of my role. Usually sponsorship has meant recommending a junior engineer for a growth task, offering guidance as they progress. I am mindful of the fact that as someone who started early at the company I had the benefit of growing as an engineer as the company grew. Because we were small, I was able to have an out sized impact relative to my years of experience. I was also afforded the luxury of making mistakes as the customer impact was sometimes smaller. Now that we&amp;rsquo;re much larger, outages are very costly. This creates a tendency to be conservative, which in turn can impact opportunity for younger engineers. I want to find ways to create this opportunity for other engineers (as well as avoid my hard learned mistakes).&lt;/p>
&lt;p>For sponsoring at a mentorship level, my bandwidth just doesn&amp;rsquo;t allow for me to do an effective job. In the past, I&amp;rsquo;ve mentored a few people with mixed results. My biggest failing is not being able to put in the required effort to make it a productive endeavor. Mentorship requires work on both sides; both in finding a fit (what type of help are they seeking, can you provide it?), as well as a way to ensure progress. Expecting to be able to do this in an ad-hoc manner limited the usefulness of the mentoring. Doing a better job requires careful forethought to ask mentees the right questions and have actionable measurable feedback. In time, I hope to be able to do more of this.&lt;/p>
&lt;p>&lt;strong>&lt;em>You first got the title Staff engineer at your current company. What was the process of getting promoted to Staff?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I first was promoted to the title of Staff Engineer at my current company. While there was no formal process, it started by asking questions to management around what it meant to grow: What should I be doing that I am not to be Staff (or Principal)? How or where can I improve?&lt;/p>
&lt;p>It took a few years from when I started asking until my promotion to Staff. Work covered several aspects focusing on:&lt;/p>
&lt;ul>
&lt;li>A continued track record of important contributions to key projects.&lt;/li>
&lt;li>Constantly working across teams.&lt;/li>
&lt;li>Pushing the envelope in terms of tech, and delivery.&lt;/li>
&lt;/ul>
&lt;p>The main shift was being pulled into new, larger projects giving me both exposure as well as experience in new areas. Later on, I continued on this growth trajectory by working on larger efforts leading to later being promoted to a Principal Engineer.&lt;/p>
&lt;p>&lt;strong>&lt;em>What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Before reaching Staff at Proofpoint, I had switched to working remotely for several years (being in HQ prior to that). At the time, we had almost no remote engineers making me the odd one out. While I was incredibly productive, it hampered my career progression as I was increasingly disconnected from other groups. Once I returned to the office, it took time to rebuild those connections as the company was continually growing. Being present vs remote gave me the opportunity to interact with a broader set of people in the department. This gave rise to opportunity which would have been otherwise absent had I continued being a remote worker.&lt;/p>
&lt;p>Technical skillset aside, strong communication (especially writing) was important as I needed to share the same information in varying ways to multiple audiences. This helped me build a deep understanding of our problem space, and my teams&amp;rsquo; customers (usually other engineers or threat researchers). It also helped me refine the ability to share technical information at an audience appropriate level.&lt;/p>
&lt;p>I had a fairly traditional Computer Science education, studying in many areas but ultimately focusing on computer security. As a graduate student, I ended up working on a new project area for my advisor. This required me to start a new large project from scratch by myself. Learning the cycle of research, design, implement, refine has been a critical skill through my career. One of the most challenging aspects at the time was in trimming my ambition (i.e. adjusting plans for your deadlines). After months of research, I had come to the realization that the scope was too large and needed to adjust my approach. It was a difficult, but humbling decision.&lt;/p>
&lt;p>Learning to dig is another core skill &amp;ndash; being able to dive into unfamiliar areas, pick apart, and reason through problems. Following curiosity,
and being able to tackle problems in this manner is incredibly useful.&lt;/p>
&lt;p>&lt;strong>&lt;em>There is a popular idea that becoming a Staff engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I did not have a Staff project. It helped that I started when Proofpoint was much smaller, smaller teams were able to have out sized impact. When I made Staff, we were launching several key efforts requiring careful coordination across multiple teams. My experience let me make high impact contributions in many places, as well as dive into new areas and get up to speed quickly.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I don&amp;rsquo;t remember any particular advice I received on reaching Staff. Over time there have been portions of advice now and again that stand out. One in particular has to do with messaging &amp;ndash; while a blunt technical assessment may be fine for some audiences, it is not for others. While I try to be as straightforward as possible, sometimes that can lead to unintended consequences. For example, describing a quick patch as &amp;ldquo;throwaway&amp;rdquo; work may be accurate, someone might interpret that as saying their work has no value. In providing opinions, I try to be more thoughtful about how and what I communicate to avoid such situations.&lt;/p>
&lt;p>&lt;strong>&lt;em>What about a piece of advice for someone who has just started as a Staff engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>At an individual level, the requirements for Staff-plus may vary. To that end, work to understand expectations from your manager and the broader organization. In reaching Staff, you&amp;rsquo;ve likely shown that you are already able to perform at the expected level. In making it official, expectations of others may change as you cement your position and reach toward the next level.&lt;/p>
&lt;p>Typically these involve the increasing importance of soft skills. Communication skills (both verbal and written) become increasingly critical. Being able to share knowledge and adjust your message for the audience (e.g. up and down level, more or less technical) is vital. In other words, in order to get your message across, know your audience and adjust accordingly. There will be more demands on your time. This will likely mean a schedule with fewer large blocks of time where you can do deep technical work. In order to compensate, develop strategies to maximize the time you do have, as well as minimize recovery time from switching tasks. Part of this effort may mean allowing others to take on tasks you might have previously handled. In other cases, it may also mean saying &amp;rsquo;no'.&lt;/p>
&lt;p>As you work on leading larger projects, building teams and improving engineers is another factor. In some cases, this means leading by example (doing). In others, invest effort in boosting other engineers &amp;ndash; find and eliminate toil, teach, design and architect with productivity in mind. I naturally gravitated toward the idea of what is sometimes called product oriented engineering. Largely this boils down to knowing your customer; be it internal or external. In doing this you can cut through the noise &amp;ndash; taking an ill defined problem, work to clarify, and come up with a reasonable solution. If you&amp;rsquo;re handed a solution, it will need careful evaluation and work with stakeholders to come to an agreement. One must ask, does the proposal actually solve the problem? Is it the right problem to be solving? This can lead to conflict, and navigating this can be tricky at times.&lt;/p>
&lt;p>The last thing is humility. You may be a Staff-plus engineer, but you will never know everything or have time to do it all. Its OK to ask for help. Its OK to say &amp;ldquo;I don&amp;rsquo;t know&amp;rdquo;; even better to to add, &amp;ldquo;but I will find out.&amp;rdquo; Learn from failure and mistakes. It is exceedingly difficult to improve if you cannot admit a mistake, flaw, poor decision, etc. Having a blame free (post-mortem) problem solving mindset helps you and others focus on what went wrong and how to avoid it in the future.&lt;/p>
&lt;p>&lt;strong>&lt;em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Yes, I have considered it from time to time. Personally, I am more happy to be focused on creating the product as an engineer, rather than creating teams to build the product. The most effective managers I&amp;rsquo;ve had over the years dedicate a lot of time to things that I am not excited about doing &amp;ndash; meetings, managing expectations (up and down), politics, filtering noise, recruiting, etc. While at a Staff-plus level, you do handle more of these things it is not a primary duty.&lt;/p>
&lt;p>The tradeoff is that as an engineer, I can &lt;em>ask&lt;/em> for resources, while a manager can &lt;em>allocate&lt;/em> resources. At times this can be frustrating, but given the other core aspects of a managers&amp;rsquo; job, I prefer staying on the technical track.&lt;/p>
&lt;p>&lt;strong>&lt;em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>With respect to engineering I follow a mix of technical, and non-technical topics. Technical writing is an under-taught and under utilized skillset. Some of my favorite technical writers include:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://jvns.ca/">Julia Evans&lt;/a> - Her ability to introduce technical topics into approachable writeups is particularly wonderful.&lt;/li>
&lt;li>&lt;a href="http://antirez.com">Salvatore Sanfilippo&lt;/a> (aka antirez) - His deep dive into internals, as well as the coding practices with respect to readability are concepts I take to heart.&lt;/li>
&lt;li>&lt;a href="https://steveklabnik.com/">Steve Klabnik&lt;/a> - Known for his Rust advocacy, his posts are highly readable and an example for others to follow.&lt;/li>
&lt;li>&lt;a href="https://www.edwardtufte.com/tufte/">Edward Tufte&lt;/a> - His work on presenting data is insightful and illuminating.&lt;/li>
&lt;/ul>
&lt;p>There are a lot of great deep technical blogs out there and its down to your area of interest. Recently I&amp;rsquo;ve been spending more time on performance analysis, and distributed systems. Some of my favorite writers in this area include &lt;a href="https://mechanical-sympathy.blogspot.com/">Martin Thompson&lt;/a>, &lt;a href="https://richardstartin.github.io/">Richard Startin&lt;/a>, and &lt;a href="https://aphyr.com/">aphyr&lt;/a>.&lt;/p>
&lt;p>On non-technical track I am fond of work including &lt;a href="https://randsinrepose.com/">Rands in Repose&lt;/a>, and Camille Fournier&amp;rsquo;s &lt;a href="https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth/dp/1491973897">The Manager&amp;rsquo;s Path&lt;/a>.&lt;/p></description></item><item><title>What do Staff engineers actually do?</title><link>https://staffeng.com/guides/what-do-staff-engineers-actually-do/</link><pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/what-do-staff-engineers-actually-do/</guid><description>&lt;blockquote>
&lt;p>The role of a Staff-plus engineer depends a lot on what the team needs and also what the particular engineer&amp;rsquo;s strengths are. From my experience, the responsibilities of a Staff-plus engineer can change over time. Still, usually, their main focus is working on projects/efforts that have strategic value for the company while driving technical design and up-leveling their team. - &lt;a href="https://staffeng.com/stories/diana-pojar">Diana Pojar&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>Anyone who has been cornered by relatives at a party and asked to explain what software engineers &lt;em>actually do&lt;/em> knows that explaining the work can be challenging. Over time you may have created a compelling answer for your relatives, but many folks&amp;rsquo; minds go blank when their coworker leans over and asks, &amp;ldquo;What&amp;rsquo;s a Staff engineer do?&amp;rdquo;&lt;/p>
&lt;p>The most straightforward answer is that Staff engineers keep doing much of what made them successful as Senior engineers: building relationships, writing software, coordinating projects. However, that&amp;rsquo;s a misleading answer. Staff engineers do those same tasks, but whereas previously they were the core of their work, now they&amp;rsquo;re auxiliary tasks.
Their daily schedule varies a bit &lt;a href="https://staffeng.com/guides/staff-archetypes">by archetype&lt;/a>, but there&amp;rsquo;s a shared foundation across all archetypes: setting and editing technical direction, providing sponsorship and mentorship, injecting engineering context into organizational decisions, exploration, and what &lt;a href="https://noidea.dog">Tanya Reilly&lt;/a> calls &lt;a href="https://noidea.dog/glue">being glue&lt;/a>.&lt;/p>
&lt;h2 id="setting-technical-direction">Setting technical direction&lt;/h2>
&lt;blockquote>
&lt;p>I feel most impactful when I can facilitate setting a technical vision for an area and get people moving toward that vision. I think we would all agree that we want our code to be better architected than it is or improved in some way. However, I&amp;rsquo;ve found that often people have some vague sense of wanting better without having a clear idea of what that thing they want is. I like to help the group decide on a shared understanding of where exactly they&amp;rsquo;re trying to get (it&amp;rsquo;s actually okay if we never get there) and come up with a general game plan of how to get there. - &lt;a href="https://staffeng.com/stories/joy-ebertz">Joy Ebertz&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>Much as &lt;a href="https://en.wikipedia.org/wiki/The_Lorax">the Lorax&lt;/a> speaks for the trees in his popular children&amp;rsquo;s book, Staff engineers speak for their companies&amp;rsquo; technology. Technology cannot speak for itself and requires effective advocates on its behalf. Folks who successfully advance technology are pragmatic, deliberate, and focus more on the long-term trend of progress than viewing each individual decision as a make-or-break crisis. It can be helpful to think of this as being a part-time product manager for technology.&lt;/p>
&lt;p>Some Staff-plus engineers are explicitly hired to lead a specific area such &lt;a href="https://staffeng.com/stories/keavy-mcminn">as API design&lt;/a>, and in other cases, they find themselves &lt;a href="https://staffeng.com/stories/rick-boone">editing and aligning approaches across a broad area&lt;/a>. One constant across all roles is that the reality of setting technical direction is far more about understanding and solving the real needs of the organization around you and far less about prioritizing technology and approaches that you personally are excited to learn about. In earlier roles, you may have tried to influence decisions towards technology choices you were motivated by; in senior positions, you&amp;rsquo;re accountable to the business and organization first and yourself second.&lt;/p>
&lt;h2 id="mentorship-and-sponsorship">Mentorship and sponsorship&lt;/h2>
&lt;blockquote>
&lt;p>In my current role, I feel energized when someone I&amp;rsquo;ve sponsored sends an announcement that they&amp;rsquo;ve shipped their work, or when I see that I&amp;rsquo;ve helped shape or shift an engineering team&amp;rsquo;s model of an important topic. It&amp;rsquo;s these teams, not me, who are doing the hard work day-to-day of building and supporting their technology. I measure my impact based on their progress and, more importantly, the directionality of that progress and the alignment of their work to the company&amp;rsquo;s goals. - &lt;a href="https://staffeng.com/stories/michelle-bu">Michelle Bu&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>There&amp;rsquo;s a popular vision of heroic leadership that centers on extraordinarily productive individuals whose decisions change their company&amp;rsquo;s future. Most of those narratives are intentionally designed by public relations teams to create a good story. You&amp;rsquo;re far more likely to change your company&amp;rsquo;s long-term trajectory by growing the engineers around you than through personal heroics. The best way to grow those around you is by creating an active practice of mentorship and sponsorship.&lt;/p>
&lt;p>Sometimes folks see a requirement for mentorship in their career ladder and try to mechanically check that box,
which is a shame because mentorship is one of the most valuable activities in a Staff-plus role.
Sharing your experience and advice, along with building an ongoing relationship to understand the recipient&amp;rsquo;s context, is high impact work.
The most effective Staff engineers pair a moderate amount of mentorship with considerably more sponsorship: putting your thumb
directly on the scale to help advance and support those around you. If you haven&amp;rsquo;t read it already, Lara Hogan has written the
canonical piece on the distinction between sponsorship and mentorship, &lt;a href="https://larahogan.me/blog/what-sponsorship-looks-like/">What does sponsorship look like?&lt;/a>&lt;/p>
&lt;h2 id="providing-engineering-perspective">Providing engineering perspective&lt;/h2>
&lt;blockquote>
&lt;p>I have a seat at the table at higher level engineering discussions that occur at a level above individual projects and teams. We have recurring staff engineering meetings where we discuss problems that span teams which are both technical and non-technical in nature. - &lt;a href="https://staffeng.com/stories/dan-na">Dan Na&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>Effective organizations streamline routine decision making. A good example of this is the process of reviewing contracts for potential enterprise customers. Early on, there will be some contracts signed that the product and engineering teams are uncomfortable supporting. After that happens a few times, the process will include more stakeholders in the review steps, and over time the right people will be in the right places at the right time.&lt;/p>
&lt;p>Even companies that are great at making routine decisions often struggle when an unexpected decision shows up.
The sort which is both time-sensitive and important, and it&amp;rsquo;s challenging to even pull the right folks together before the decision needs to get made.
It&amp;rsquo;s frequent for &lt;a href="https://lethain.com/running-an-engineering-reorg/">an organizational restructure&lt;/a> to occur without valuable input that would have changed the outcome. Similarly, it&amp;rsquo;s common for interview loops for infrequent roles&amp;ndash;those where you might hire one person into them each year like executives or Staff-plus engineers in an early-stage company&amp;ndash;to not evaluate the candidate on an important dimension. For some companies, even things like roadmap planning fall into this category.&lt;/p>
&lt;p>Staff-plus engineers are the folks who will often get unexpectedly pulled &lt;a href="https://staffeng.com/guides/getting-in-the-room">into the room&lt;/a> where this sort of decision is happening. This gives them the opportunity to inject the engineering context and perspective into a decision while it&amp;rsquo;s still possible to change the outcome. These brief moments of input on critical decisions are unduly impactful and will allow you to inject an engineering perspective where it would otherwise be missed.
Just remember that you&amp;rsquo;re representing the interests of all of engineering, not just your own.&lt;/p>
&lt;h2 id="exploration">Exploration&lt;/h2>
&lt;blockquote>
&lt;p>In my current role within the incubator, I&amp;rsquo;m spending all day prototyping, but in my previous tech lead role, I did a lot of different things. - &lt;a href="https://staffeng.com/stories/ritu-vincent">Ritu Vincent&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Hill_climbing">Hill-climbing&lt;/a> is a simple optimization algorithm. Imagine you&amp;rsquo;re standing on a mountain somewhere and want to get to the top.
You turn around in a circle, identify the highest nearby point, and then walk there. Once you get there, you turn around in a circle again, find the highest nearby
point from your new location, and go there. If you keep doing this, you&amp;rsquo;ll get to the top of whatever mountain you&amp;rsquo;re on.
However, imagine you tried this on a foggy day. Because you can&amp;rsquo;t see very far, you might get to the highest nearby point and later realize there
was a much higher point just out of sight.&lt;/p>
&lt;p>Hill-climbing can&amp;rsquo;t solve every problem, but it&amp;rsquo;s so effective that many companies struggle to take other approaches.
This can be a consumer-oriented company struggling to support enterprise deals or a mature company struggling to compete with a smaller competitor&amp;rsquo;s release cadence.
It can even be the case that your current business is so valuable that &lt;a href="https://en.Wikipedia.org/wiki/The_Innovator's_Dilemma">it&amp;rsquo;s hard to prioritize new businesses&lt;/a>,
even though the valuable business&amp;rsquo; growth rate is trailing downwards.&lt;/p>
&lt;p>In the long-term, companies either learn to explore, or they fade away; this isn&amp;rsquo;t an ignorable challenge. Simply assigning a team that&amp;rsquo;s mastered hill-climbing &lt;a href="https://lethain.com/how-to-invest-technical-infrastructure/">to do exploratory work&lt;/a> is far from a sure thing, so many companies take a different approach. They find a couple of trusted individuals with broad skills, allocate some resources, and check back in a few months later to see what they&amp;rsquo;ve discovered. One of those engineers is often a Staff engineer.&lt;/p>
&lt;p>This isn&amp;rsquo;t always a business problem either; it can be any ambiguous, important problem that the company&amp;rsquo;s systems are ill-shaped to address. It might be reducing your infrastructure costs by an order of magnitude. It might be identifying a multi-region strategy that takes six months instead of three years. It might be addressing the sudden realization that your primary database only has three months of remaining disk space, and you can&amp;rsquo;t upgrade to a larger size (in my experience, a surprisingly frequent problem at fast-growing startups).&lt;/p>
&lt;p>This is some of the most rewarding and the riskiest work companies do. It takes a great deal of organizational trust to be trusted with this work, including having enough respect from the business that if you fail, it&amp;rsquo;s a reflection on the problem and not you.&lt;/p>
&lt;h2 id="being-glue">Being Glue&lt;/h2>
&lt;p>&lt;a href="https://noidea.dog">Tanya Reilly&lt;/a> wrote a wonderful post, &lt;a href="https://noidea.dog/glue">Being Glue&lt;/a>, which captures another core element of successful Staff engineers:
doing the needed, but often invisible, tasks to keep the team moving forward and shipping its work.
It&amp;rsquo;s not glamorous, but high impact organizations often have one or more Staff engineer working behind the scenes expediting the &lt;a href="https://staffeng.com/guides/work-on-what-matters">most important work and ensuring it gets finished&lt;/a>.&lt;/p>
&lt;h2 id="but-will-you-still-write-software">But will you still write software?&lt;/h2>
&lt;p>It&amp;rsquo;s impolite to end any discussion of the Staff engineer role without opining on the first question that Staff engineers ask when they congregate in a room together: &amp;ldquo;Do you still find time to write software?&amp;rdquo; The answer is, of course, it depends!&lt;/p>
&lt;p>&lt;a href="https://staffeng.com/stories/ras-kasa-williams">Ras Kasa Williams&lt;/a> said, &amp;ldquo;I still contributed code regularly—certainly less than the rest of the engineers on my team; but it was important that I sustained &amp;ldquo;hand to keyboard&amp;rdquo; work to ensure that my technical strategy (and other macro-level decision–making) was informed by the on–the–ground experiences of the rest of my team.&amp;rdquo;&lt;/p>
&lt;p>&lt;a href="https://staffeng.com/stories/katie-sylor-miller">Katie Sylor-Miller&lt;/a> said, &amp;ldquo;I&amp;rsquo;m a frontend architect, but by far the main thing I&amp;rsquo;ve been writing lately is SQL, because I&amp;rsquo;m doing a lot of data analysis. I&amp;rsquo;ve been looking at our performance metrics to figure out where the areas for improvement are, and what would be the most impactful issues to fix to improve performance and business metrics. I will write little bits of JS or PHP here and there, but it&amp;rsquo;s mostly to help unblock teams or to run small performance-related experiments.&amp;rdquo;&lt;/p>
&lt;p>&lt;a href="https://staffeng.com/stories/joy-ebertz">Joy Ebertz&lt;/a> said, &amp;ldquo;The more senior you get, the less your job is about code. Sure, unlike a people manager, you still have a very technical slant, and even through principal, you&amp;rsquo;ll likely be doing at least some coding. However, the higher you get, the more your job becomes about mentoring and growing the people around you (and more broadly), building your team through building your company&amp;rsquo;s public tech brand, noticing larger technical trends that can be improved upon or corrected, helping to set the tech vision for your team or the company and advocating for resourcing for tech debt projects.&amp;rdquo;&lt;/p>
&lt;p>Most write some, some write none, but none write as much as they used to earlier in their career. There will be the occasional week that is purely coding, but those won&amp;rsquo;t be the norm, and if they happen too often, it&amp;rsquo;s usually a sign of working &lt;a href="https://staffeng.com/guides/work-on-what-matters">on something comfortable rather than important&lt;/a>.
Even if you&amp;rsquo;re not writing much, you&amp;rsquo;ll be reading &lt;em>a ton&lt;/em> of your coworkers&amp;rsquo; code and doing a fair number of code reviews.&lt;/p>
&lt;h2 id="slow-but-rewarding">Slow but rewarding&lt;/h2>
&lt;p>One unifying theme across Staff-plus work is that the timeframes are longer. Early in your career, it&amp;rsquo;s easy to get attached to software development&amp;rsquo;s quick feedback cycle&amp;ndash;write, test, ship, repeat&amp;ndash;and most of the work you&amp;rsquo;ll be doing at this level replaces that feedback loop with one that takes weeks, months, and years.
These longer timeframes can feel surprisingly demoralizing when you first take on a Staff-plus role.
It&amp;rsquo;s normal to end some days as a Staff-plus engineer feeling like you haven&amp;rsquo;t accomplished anything&amp;ndash;keep at it!&lt;/p>
&lt;p>The impact and the personal growth lives in those longer timeframes, and while everyone I spoke with wished they&amp;rsquo;d occasionally get more time to code,
and admitted worrying some days that they weren&amp;rsquo;t accomplishing much,
none of them regretted their transition into their current roles.&lt;/p></description></item><item><title>Managing Staff-plus engineers</title><link>https://staffeng.com/guides/managing-staff-plus-engineers/</link><pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/managing-staff-plus-engineers/</guid><description>&lt;p>While getting feedback on &lt;em>&lt;a href="http://staffeng.com">StaffEng&lt;/a>&lt;/em>, one request was for more content on managing Staff-plus engineers. It doesn’t quite fit the theme&amp;ndash;that effort is focused on the Staff engineers themselves rather the company or the manager&amp;ndash;but it’s an interesting topic and a worthy appendix.&lt;/p>
&lt;p>Of course, not all aspects of managing Staff-plus folks are unique to the level: there are fundamentals that apply to managing anyone in any role, like &lt;a href="https://marcorogers.com/blog/my-approach-to-1-on-1s">doing effective 1 on 1s&lt;/a> or &lt;a href="https://smallbigideas.substack.com/p/own-your-feedback-part-1">giving feedback&lt;/a>. For that sort of thing, read Lara Hogan’s &lt;a href="https://resilient-management.com">Resilient Management&lt;/a> or Camille Fournier’s &lt;a href="https://www.oreilly.com/library/view/the-managers-path/9781491973882/">The Manager’s Path&lt;/a>. What I wanted to get into here is how managing someone at the Staff-plus level differs from managing, say, a Senior engineer.&lt;/p>
&lt;p>These roles vary enough across companies that some aspects of managing your Staff-plus engineers will depend on the &lt;a href="https://staffeng.com/guides/staff-archetypes">Staff archetypes&lt;/a> your company emphasizes and &lt;a href="https://staffeng.com/guides/where-should-staff-plus-eng-report">where your Staff-plus engineers should fit into the engineering organization&lt;/a>, but there are some approaches that will be helpful for you across most configurations.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Sponsor and support more than you direct.&lt;/strong> If you’re giving daily direction to your Staff engineers, you’re utilizing them in the wrong roles. If you aren’t giving them weekly feedback, you’re delaying their growth. If you aren’t lending your sponsorship to their initiatives, then you’ll train the initiative out of them.&lt;/li>
&lt;li>&lt;strong>Help them rewire their definition of success.&lt;/strong> Working in a high-performing product engineering team is a flywheel of positive feedback. Your product manager appreciates your work. Your engineering manager engages the team. Your peers enjoy working together. Your users love your product. Your business loves the user adoption. Conversely, the Staff engineer’s flywheel of feedback is a lot less immediate. You spend more time working through conflict. You work on longer time horizons. You’re representing important priorities that require deprioritizing some business or product goals. Many folks don’t address this shift and wake up a year later hating their new role, and as their manager, you can help them recognize this shift and find compensating strategies &lt;a href="https://staffeng.com/stories/michelle-bu">to remain energized&lt;/a>.&lt;/li>
&lt;li>&lt;strong>Give feedback.&lt;/strong> One particularly important strategy for rewriting their definition of success—and to keep them growing—is to give frequent feedback. If they’ve picked the wrong battle, tell them, and tell them &lt;em>why&lt;/em>. If they’re prioritizing work you wouldn’t, tell them, and tell them &lt;em>why&lt;/em>. Nothing is more stressful for a high performer than not knowing how they’re doing! If you don’t give feedback, especially about their best work, they’ll keep changing their approach until you do give feedback (often to your regret).&lt;/li>
&lt;li>&lt;strong>Keep them informed&lt;/strong>. As a manager, it can be easy to forget how much more access you have to information than the engineers you work with. The reality is that most organizations build their information flows around managers communicating key information to other managers. Your Staff-plus engineers will be hamstrung if you don’t find a deliberate, reproducible process for sharing your context with them. Some folks do this at the beginning of their 1:1s, which works OK, but I’ve come to prefer dropping them into the team’s chat channel as they happen and aggregating them into my &lt;a href="https://lethain.com/weekly-updates/">weekly email update&lt;/a>.&lt;/li>
&lt;li>&lt;strong>Involve them in planning and prioritization.&lt;/strong> Many engineers get frustrated that “the right work never gets prioritized,” and one of the best solutions to this is to proactively involve more engineers in the planning process. This works on two fronts. First, they understand more of the competing work and why that work is important, and second, they’ll be present to advocate more effectively for the sorts of technical work they see missing.&lt;/li>
&lt;li>&lt;strong>Agree on how to stay aligned while acting independently.&lt;/strong> As you push Staff-plus engineers you support towards leadership, they’re going to start leading more, which will sometimes include surprising you. If leaders you work with &lt;em>never&lt;/em> surprise you, then you’re not delegating enough, but if they frequently surprise you, it may be helpful to &lt;a href="https://lethain.com/identify-your-controls/">explicitly establish your controls&lt;/a>.&lt;/li>
&lt;li>&lt;strong>Create space for them to think without detaching them from the day-to-day realities of the organization.&lt;/strong> Many folks in these roles are so motivated by impact and “doing the right thing for the business” that they’ll grind themselves down without external intervention. If you’re their manager, then “external intervention” means you. If you see them spending too much time firefighting and helping unblock urgent work, work with them to protect more time for deep thinking work as well. Conversely, if you see them only doing deep thinking work, they’re likely to lose context and potentially the respect of their peers and the business if they don’t adjust that mix.&lt;/li>
&lt;li>&lt;strong>Remind them they’re a role model.&lt;/strong> Much like they do for managers, engineers in an organization watch Staff-plus engineers to learn which behavior and actions are rewarded (and tolerated). This is a great responsibility, but also a huge opportunity for impact: by living positive values, they have the opportunity to create a positive organization around them.&lt;/li>
&lt;li>&lt;strong>Minimize manager overflow.&lt;/strong> In the quest for &lt;a href="https://www.amazon.com/dp/B004SOVC2Y/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1">efficiency over effectiveness&lt;/a>, many companies trap their managers in a staggering amount of coordination and bureaucracy. When you’re drowning, you’re going to look for help wherever you can, and in many cases, that causes managers to offload management work to their Staff engineers. This is absolutely going to happen sometimes&amp;ndash;your relationship with Staff-plus engineers you manage is a partnership&amp;ndash;but try very hard to minimize the amount and ensure it’s a temporary overflow rather than a permanent one.&lt;/li>
&lt;li>&lt;strong>Give them unrefined problems.&lt;/strong> This is a senior role where you ought to give them a problem space that they narrow into a more specific problem and solution. They have better technical context than you do, and if you point them too precisely at what you think is the problem, you won’t benefit from their judgment. Picking precisely the right problem creates at least as much impact as finding precisely the right solution, and is only possible when you create space.&lt;/li>
&lt;li>&lt;strong>Cede space to their leadership.&lt;/strong> When you’re managing a Staff-plus engineer, find ways to move pieces of your ownership explicitly into their realm of responsibility. For example, how can you enable them to hold their team responsible for technical quality, rather than you doing it? This creates leverage for both of you and a sense of ownership for the Staff-plus engineer.&lt;/li>
&lt;li>&lt;strong>Appreciate them.&lt;/strong> Great Staff-plus engineers operate fairly independently, so it can be easy to deprioritize them when the organization is on fire. Ignoring your most important people &lt;a href="https://staffeng.com/guides/work-on-what-matters">is the manager version of “snacking”&lt;/a>&amp;ndash;something that feels important but usually isn’t the right priority. So keep your 1:1s, and generally remember to show up for them, especially if they aren’t the sort of person to demand it.&lt;/li>
&lt;li>&lt;strong>Build and insist upon alignment with the business.&lt;/strong> Some engineers succeed despite harboring a mentality that technical work is more important than the business requiring that work. This mentality is generally toxic, but it is exceptionally toxic when held by a Staff-plus engineer. This is someone who is a role model for the wider organization, and stretching them beyond that perspective is essential for them to remain in a leadership role. Companies undermine and eventually eject leaders who are misaligned with the business.&lt;/li>
&lt;li>&lt;strong>Hold them responsible for the full role.&lt;/strong> While few folks reach Staff-plus roles with major technical weaknesses, it’s my lived experience that many folks reach these roles hampered by significant leadership or behavioral challenges. These folks get the title but tend to linger in Staff purgatory where they’re expected to lead but are kept away from most leadership opportunities. They’re viewed as too unreliable or “expensive to involve.” You’ve got to give these folks feedback on their gaps and hold them accountable to the full role expectations. Don’t let them linger as quasi-leaders indefinitely. Maybe they initially got the role via &lt;a href="https://charity.wtf/2020/11/01/questionable-advice-the-trap-of-the-premature-senior/">title inflation&lt;/a>, so you decide to just cover for their gaps instead of fixing it&amp;ndash;don’t do that, instead, figure out a plan to support them &lt;a href="https://hbr.org/1999/11/management-time-whos-got-the-monkey">while shifting that responsibility to them&lt;/a>.&lt;/li>
&lt;li>&lt;strong>Give them access to the room but don’t treat it as a status symbol.&lt;/strong> Folks often get fixated on status symbols, and one that’s particularly common for engineers to focus on is “&lt;a href="https://staffeng.com/guides/getting-in-the-room">being in the room&lt;/a>.” Sometimes meetings &lt;em>are&lt;/em> where the work happens, but most routine reporting meetings have too many people in them, and you can create a great deal of time and space for both you and the Staff-plus engineer you’re supporting by sharding attendance across various meetings rather than doubling up for all of them.&lt;/li>
&lt;/ul>
&lt;p>The transition from Senior to Staff-plus engineer is a major one that changes the sort of work being done, whereas previous transitions often only change the work’s extent. Many folks struggle with that transition, and many managers aren’t sure how to help support the Staff-plus engineers they work with. Certainly, this is an incomplete list of helpful things you can do to support them, but hopefully, it’s a useful starting point.&lt;/p></description></item><item><title>Interviewing for Staff-plus roles</title><link>https://staffeng.com/guides/interviewing-staff-plus-roles/</link><pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/interviewing-staff-plus-roles/</guid><description>&lt;p>When you decide to interview for a Senior engineer role, you roughly know what to expect. You’ll &lt;a href="https://thetechresume.com">refresh your resume&lt;/a>, work through &lt;em>&lt;a href="http://www.crackingthecodinginterview.com">Cracking the Coding Interview&lt;/a>&lt;/em>, and do some research on the company to prepare questions. When you go into the interview, you know it’s going to be five-ish interviews composed of a few programming exercises, something about technical architecture, and some cultural, behavioral, or career questions.&lt;/p>
&lt;p>It would be amazing if you could start a Staff-plus interview process with similarly clear expectations, but most companies struggle with their Staff-plus interview loops. It might be the same exact interview you’d get for a Senior engineer role. It might be an engineering manager loop with a programming question added. It might be something else entirely.&lt;/p>
&lt;p>Getting comfortable navigating ambiguity is a core part of the Staff-plus role, so a particularly optimistic person might view the state of Staff-plus interviewing as a good opportunity to demonstrate your skills. If you’re less optimistic, you might find it a bit frustrating, but a bit of preparation can go a long way in making these interviews more predictable.&lt;/p>
&lt;h2 id="draw-your-lines">Draw your lines&lt;/h2>
&lt;p>The engineering leadership phase of your career may last twenty years, but if you think of that in terms of roles, how you spend that time will likely come down to four or five pivotal decisions. Each of those decisions is a scarce resource, and you should allocate them deliberately. Before jumping into an interview process, spend some time refining your criteria for the kinds of processes you’re willing to participate in, as well as reflecting on &lt;a href="https://staffeng.com/guides/finding-the-right-company">the right company for you&lt;/a>.&lt;/p>
&lt;p>There are certain signals you’ll get during an interview loop that indicate that the company doesn’t quite know how to interview Staff-plus engineers. Because most companies have mediocre Staff-plus interview processes, you shouldn’t automatically opt-out of poorly run processes, but you should consider which of those signals represent a line you’re unwilling to cross.&lt;/p>
&lt;p>One line that many folks in Staff-plus roles draw is they’re unwilling to practice interview programming. This often means they are slower or make more mistakes in the sort of algorithmic questions that many companies use to evaluate early career candidates. Folks who don’t practice take that stance because they’ve decided that a company who cares about fast programming is likely to misuse its Staff-plus engineer. Is that a line &lt;em>you&lt;/em> want to draw? Maybe, decide for yourself.&lt;/p>
&lt;h2 id="debug-the-process">Debug the process&lt;/h2>
&lt;p>After you’ve drawn your lines, next, you’ll need to figure out the actual interview process used at the company you’re interviewing with. It might feel like asking these questions could push the company to reconsider your candidacy, but it’s &lt;em>always&lt;/em> reasonable to ask the recruiting team and hiring manager for more details about your interview process. At the Staff-plus level, it’s almost a point of concern if you &lt;em>don’t&lt;/em> ask for more details. Companies want you to succeed, and understanding the process is an essential part of preparation.&lt;/p>
&lt;p>The three most important things to understand before you start interviewing are:&lt;/p>
&lt;ol>
&lt;li>What are the interview formats, including what are they evaluating for?&lt;/li>
&lt;li>Do any of the interviews require specific preparation?&lt;/li>
&lt;li>Who are the interviewers?&lt;/li>
&lt;/ol>
&lt;p>Once you’ve answered those, then it’s just a matter of preparation. Take notes about how you want to approach the different kinds of questions. Prepare materials for any presentation interviews. &lt;em>Briefly&lt;/em> research the interviewers to tailor questions to their background.&lt;/p>
&lt;p>This is also a moment to debug if you’re in the right process. If your interview panel is composed primarily of early-career and mid-level engineers, it will rarely generate a Staff-plus offer; the panel will be ill-equipped to evaluate your strengths, and folks are often resistant to offers more senior than their own. If there are no deep-dives into your previous accomplishments and no presentation opportunities, it’s similarly hard to demonstrate the expertise to support a Staff-plus offer.&lt;/p>
&lt;p>If it’s the wrong loop, but you’re exceptionally good at whatever the loop does measure, then you’ll potentially get a Staff-plus offer anyway. However, if you’re less confident in those incidental measures, then raise your concerns politely and constructively, perhaps pointing the recruiter to &lt;a href="https://staffeng.com/guides/staff-plus-interview-process">resources around designing Staff-plus interview loops&lt;/a>. Don’t allow momentum to pull you into a process that doesn’t support your goals.&lt;/p>
&lt;p>It’s particularly valuable to understand when leveling happens within the company’s progress. Some companies advertise roles with level-specific titles, which lets you apply directly to the level you think is appropriate. If you’re hoping for a Staff engineer role, then apply for the Staff engineer job posting. However, many companies use those as provisional titles and finalize them later; other companies are quite rigid. The only way to know is to ask.&lt;/p>
&lt;p>It may feel very unnatural to take more control over your interview process, and in theory, you might miss out on some opportunities this way, but that’s a good outcome: your goal is to find the best available leadership opportunity, not the first available opportunity.&lt;/p>
&lt;h2 id="finish-well">Finish well&lt;/h2>
&lt;p>Even if you skate through the interview process, always &lt;a href="https://staffeng.com/guides/negotiating-the-offer">negotiate the details&lt;/a>, and remember to finish well. Brief your references on the role’s details. Send follow-up emails to interviewers. Accept the offered sell chats and bring thoughtful questions into them. In this case, the last mile is the easiest as long as you take the time to walk it.&lt;/p></description></item><item><title>Find your sponsor</title><link>https://staffeng.com/guides/find-your-sponsor/</link><pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/find-your-sponsor/</guid><description>&lt;blockquote>
&lt;p>Having a sponsor was also definitely important. My manager and I had a fantastic relationship, and I also had a great relationship with my skip-level manager. I think that played a big part as well.
- &lt;a href="https://staffeng.com/stories/ritu-vincent">Ritu Vincent&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>As I’ve spoken with more folks trying to reach their first Staff-plus role, most folks run into similar challenges. Many have miscalibrated their own impact and simply haven’t done the work yet to operate at that level: a Staff engineer isn’t just a faster Senior engineer. However, there’s a large cohort who have done the work&amp;ndash;they’re &lt;a href="https://staffeng.com/guides/being-visible">visible across their organization&lt;/a> and have pulled together &lt;a href="https://staffeng.com/guides/promo-packets">a strong promotion packet&lt;/a>&amp;ndash;but are still struggling to have that work recognized.&lt;/p>
&lt;p>These folks are often frustrated by the distance between their impact and their recognized impact and ask their managers and peers for feedback on closing that gap. They’re told &lt;a href="https://staffeng.com/guides/staff-projects">to complete a staff project&lt;/a> or &lt;a href="https://staffeng.com/guides/create-space-for-others">to create space for others&lt;/a>. For folks who haven’t done the work yet, this is great advice, but for folks who have these checkboxes are a distraction: what they’re really missing is a sponsor willing to push for the recognition of their existing work.&lt;/p>
&lt;p>It’s common to view promotion systems through the lens of other systems that have evaluated us throughout our lives such as school, but this falsely frames performance evaluation as a solo activity. Whether your company does ad-hoc promotions or &lt;a href="https://lethain.com/perf-management-system/">uses a calibration process&lt;/a>, promotions are a team activity and as &lt;a href="https://twitter.com/jewelia">Julia Grace&lt;/a>, then of Slack, advised me once during a job search, “Don’t play team games alone, you’ll lose.”&lt;/p>
&lt;h2 id="finding-your-sponsor">Finding your sponsor&lt;/h2>
&lt;p>The most important member of the team guiding your promotion is you yourself. The second most important person is your organizational sponsor. Lara Hogan has &lt;a href="https://larahogan.me/blog/what-sponsorship-looks-like/">written on sponsorship at length&lt;/a>, but roughly this is the person speaking up for your work in forums of influence and when advocating for constrained resources (like the budget for salary increases).&lt;/p>
&lt;p>While you’ll likely have a variety of sponsors, in the context of getting promoted—especially to a Staff-plus role—this almost always needs to be your direct manager. They’ll be the person to take your drafted &lt;a href="https://staffeng.com/guides/promo-packets">promotion packet&lt;/a> and turn it into the company’s format. They’ll be the person to advocate for your promotion during a calibration meeting as others drill into your qualifications. They’ll also be the person who has to have an honest conversation with you about the gaps you still have before you’re a strong promotion candidate.&lt;/p>
&lt;p>While you’ll always need your direct manager engaged as your sponsor, you may need additional sponsorship. If your manager has never promoted someone to a Staff-plus role before, they’re likely going to get surprised or make a misstep along the way. Invest in establishing a relationship further along your management chain. You don’t need to spend much time with your skip-level manager, but if they aren’t familiar enough with your work’s impact to remember it in a meeting two months from now, you’re unlikely to get promoted into a Staff role.&lt;/p>
&lt;h2 id="activating-your-sponsor">Activating your sponsor&lt;/h2>
&lt;p>The first step of activating your sponsors is explicitly sharing your goals. “I’m looking to be recognized as a Staff engineer” is a great start. &lt;a href="https://staffeng.com/stories/ritu-vincent">Ritu Vincent&lt;/a> mentioned this as her top advice for folks seeking Staff-plus roles,&lt;/p>
&lt;blockquote>
&lt;p>People frequently come to me and ask, “What should I do next to reach Staff?” One of the things that I tell them is to be super open and honest with your manager about what you want from your career. A mistake I made early on in my one-on-ones was telling my manager what I thought they wanted to hear, instead of what I actually felt.&lt;/p>&lt;/blockquote>
&lt;p>Once they’ve identified their sponsors, many folks see their work as complete: it’s up to the sponsor to do the heavy lifting. This usually fails! Sponsors are folks with more organizational capital than bandwidth to deploy that capital, and they’ll help you most when you align the pieces for them. Ask your sponsor how you can support their sponsorship. Owning your career isn’t only about asking for things. It &lt;em>is&lt;/em> about that, but it’s much more about facilitating those things happening.&lt;/p>
&lt;p>Reviewing your promotion packet collaboratively with your sponsors is a great way to facilitate this conversation. Focus on asking for what the gaps are in a way that doesn’t prompt your sponsor to make up an answer. Most folks forget they can answer questions with, “I don’t know,” and instead make up unhelpful answers if you push them to answer questions they’re uncertain about. If you keep getting answers like, “Work on larger, high impact technical projects,” then you’re asking in the wrong way, the wrong questions, or the wrong person.&lt;/p>
&lt;p>One starting prompt is, “If I don’t get promoted this cycle, what are some of the likely causes?” Another question worth asking is, “What’s the most effective thing I can do to make myself a stronger candidate?” That said, the best questions are very specific and do a lot of the work for the answerer. Think about how hard it is to answer those questions compared to a question like, “This quarter I completed the API refactor, which I thought would demonstrate Staff-level work, but the schedule slipped a lot, and it ended up frustrating our product managers because their work got dropped. How could I have handled this project more effectively?” The latter question is much easier to give a useful answer to, even if the answerer isn’t too familiar with the details of the project.&lt;/p>
&lt;p>Finally, remember that activating your sponsor isn’t a transactional thing to do once before your promotion. Build a relationship over time, and put in the work to help them when they need your support. &lt;a href="https://staffeng.com/guides/staying-aligned-with-authority">Stay aligned with their initiatives&lt;/a>. Suppose they need folks to join a working group, volunteer, and put in the work. These folks have a lot of people asking them for things, and they are pretty cognizant of folks who show up right before promotion time. I once had a colleague who rarely visited the office but &lt;em>always&lt;/em> visited the office the week before promotion decisions were made. People noticed.&lt;/p>
&lt;h2 id="what-if-it-doesnt-work">What if it doesn’t work?&lt;/h2>
&lt;p>If you find yourself in a situation where you and your manager don’t work together well, which isn’t quite the same thing as &lt;em>liking&lt;/em> each other, then you’re not going to get promoted into a leadership role. Your manager has too direct an influence on your impact and your perceived impact for that to happen. Similarly, you might have an amazing relationship with your manager, who then leaves the company. You’re hardly &lt;em>doomed&lt;/em>, but your promotion clock will likely get reset as you build a relationship with your new manager. (Sometimes, this works out the other way, with your new manager working hard to prove themselves to you by advocating on your behalf.)&lt;/p>
&lt;p>You’ll cheat yourself if you immediately try to switch teams or companies after running into friction with your manager. Companies generally don’t allow transfers unless your manager approves it, so you may burn a bridge to nowhere that you’re standing on. More importantly, you’ll lose the opportunity to develop your skill of working with folks you don’t immediately click with: it’s not a fun skill to develop, but leadership &lt;em>always&lt;/em> involves influencing and building relationships with those with conflicting goals and styles.&lt;/p>
&lt;p>If you’ve spent six months proactively trying to make the relationship work, then it probably is time to explore moving teams and to perhaps &lt;a href="https://staffeng.com/guides/deciding-to-switch">consider switching companies&lt;/a>. This is one of many cases where it&amp;rsquo;s extremely helpful to have developed your relationship with your skip-level manager,
who can help you find a new team, even if you and your manager aren&amp;rsquo;t working together effectively.&lt;/p></description></item><item><title>Writing engineering strategy</title><link>https://staffeng.com/guides/engineering-strategy/</link><pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/engineering-strategy/</guid><description>&lt;blockquote>
&lt;p>I kind of think writing about engineering strategy is hard because good strategy is pretty boring, and it&amp;rsquo;s kind of boring to write about. Also I think when people hear &amp;ldquo;strategy&amp;rdquo; they think &amp;ldquo;innovation&amp;rdquo; - &lt;a href="https://twitter.com/skamille/status/1328763503973429250">Camille Fournier&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>Few companies understand their engineering strategy and vision. One consequence of this uncertainty is the industry belief that these documents are difficult to write. In some conversations, it can feel like you&amp;rsquo;re talking about something mystical, but these are just mundane documents. The reality is that good engineering strategy is boring and that it&amp;rsquo;s &lt;em>easier&lt;/em> to write an effective strategy than a bad one.&lt;/p>
&lt;p>To write an engineering strategy, write five design documents, and pull the similarities out. That&amp;rsquo;s your engineering strategy. To write an engineering vision, write five engineering strategies, and forecast their implications two years into the future. That&amp;rsquo;s your engineering vision.&lt;/p>
&lt;p>If you can&amp;rsquo;t resist the urge to include your most brilliant ideas in the process, then you can include them in your prework. Write all of your best ideas in a giant document, delete it, and never mention any of them again. Now that those ideas are out of your head, your head is cleared for the work ahead.&lt;/p>
&lt;p>Durably useful engineering strategy and vision are the output of iterative, bottom-up organizational learning. As such, all learning contributes to your organization&amp;rsquo;s strategy and vision, but your contribution doesn&amp;rsquo;t have to be so abstract. Even if you&amp;rsquo;re not directly responsible for that work, there are practical steps that &lt;em>you&lt;/em> can take to advance your organization&amp;rsquo;s strategy and vision, starting &lt;em>right now&lt;/em>.&lt;/p>
&lt;h2 id="when-and-why">When and why&lt;/h2>
&lt;p>Before diving into the recipe for creating effective strategies and visions,
a good starting question is, &amp;ldquo;When and why should I actually create them?&amp;rdquo;
Strategies are tools of proactive alignment that empower teams to move quickly and with confidence.
Strategies allow everyone&amp;ndash;not just the empowered few&amp;ndash;to make quick, confident decisions that might have otherwise cost them a week of discussion.
Strategies are also the bricks that narrow your many possible futures down enough that it&amp;rsquo;s possible to write a realistic vision.
If you realize that you&amp;rsquo;ve rehashed the same discussion three or four times, it&amp;rsquo;s time to write a strategy.
When the future&amp;rsquo;s too hazy to identify investments worth making, it&amp;rsquo;s time to write another vision.
If neither of those sound like familiar problems &amp;ndash; move on to other work for now and return later.&lt;/p>
&lt;h2 id="write-five-design-docs">Write five design docs&lt;/h2>
&lt;p>Design documents describe the decisions and tradeoffs you&amp;rsquo;ve made in specific projects. Your company might call them RFCs or tech specs. Stranger names happen, too; Uber bewilderingly called them DUCKS until they later &lt;a href="https://blog.pragmaticengineer.com/scaling-engineering-teams-via-writing-things-down-rfcs/">standardized on RFC&lt;/a>. A good design document describes a specific problem, surveys possible solutions, and explains the selected approach&amp;rsquo;s details. There are many formats to pick from; a few places to start your thinking are &lt;a href="https://caitiem20.wordpress.com/2020/03/29/design-docs-markdown-and-git/">Design Docs, Markdown, and Git&lt;/a>, &lt;a href="https://www.industrialempathy.com/posts/design-docs-at-google/">Design Docs at Google&lt;/a>, and &lt;a href="https://multithreaded.stitchfix.com/blog/2020/12/07/remote-decision-making/">Technical Decision-Making and Alignment in a Remote Culture&lt;/a>.&lt;/p>
&lt;p>Whether a given project requires a design document comes down to personal judgment, but I&amp;rsquo;ve found a few rules useful. You should write design documents for any project whose capabilities will be used by numerous future projects. You should also write design documents for projects that meaningfully impact your users. You should write a design document for any work taking more than a month of engineering time.&lt;/p>
&lt;p>A batch of five design docs is the ideal ingredient for writing an effective strategy because design documents have what bad strategies lack: detailed specifics grounded in reality. It&amp;rsquo;s easy for two well-meaning engineers on the same team to interpret an abstract strategy in different ways, but it&amp;rsquo;s much harder to stay misaligned when you&amp;rsquo;re implementing a specific solution.&lt;/p>
&lt;p>A few recommendations as you write:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Start from the problem.&lt;/strong> The clearer the problem statement, the more obvious the solutions. If solutions aren&amp;rsquo;t obvious, spend more time clarifying the problem. If you&amp;rsquo;re stuck articulating the problem, show what you have to five people and ask them what&amp;rsquo;s missing: fresh eyes always see the truth.&lt;/li>
&lt;li>&lt;strong>Keep the template simple.&lt;/strong> Most companies have a design document template, which is a great pattern to follow. However, those templates are often expanded to serve too many goals. Overloaded templates discourage folks from writing design documents in the first place. Prefer minimal design document templates that allow authors to select the most useful sections and only insist on exhaustive details for the riskiest projects.&lt;/li>
&lt;li>&lt;strong>Gather and review together, write alone.&lt;/strong> It&amp;rsquo;s very unlikely that you personally have all the relevant context to write the best design document on a given topic. Before getting far into the process, collect input from folks with relevant perspectives, particularly those who will rely on the output of your design document. However, be skeptical of carrying that collaborative process into writing the design document itself. Most folks are better writers than they are editors. This means it&amp;rsquo;s usually harder to edit a group document into clear writing than to identify one author to write a clear document. Gather perspectives widely but write alone. Just be careful not to fall in love with what you&amp;rsquo;ve written until &lt;em>after&lt;/em> you&amp;rsquo;ve reviewed it with others.&lt;/li>
&lt;li>&lt;strong>Prefer good over perfect.&lt;/strong> It&amp;rsquo;s better to write a good document and get it in front of others than it is to delay for something marginally better. This is particularly valuable to keep in mind when giving feedback on other folks&amp;rsquo; designs; it&amp;rsquo;s easy to fall into the trap of expecting their designs to be just as good as your best design. Particularly as you become more senior, it&amp;rsquo;s toxic to push every design to meet the bar of your own best work. Focus on pushing designs to be good, rather than fixating on your own best as the relevant quality bar.&lt;/li>
&lt;/ul>
&lt;p>It takes a lot of practice to write great design documents. If you want to improve yours, my best advice is to reread your designs &lt;em>after&lt;/em> you&amp;rsquo;ve finished implementing them and study the places where your implementation deviated from your plan&amp;ndash;what caused those deviations? Oh, and of course, just keep writing more of them.&lt;/p>
&lt;h2 id="synthesize-those-five-design-docs-into-a-strategy">Synthesize those five design docs into a strategy&lt;/h2>
&lt;p>After your organization has written five design documents, sit down and read them all together. Look for controversial decisions that came up in multiple designs, particularly those that were hard to agree on. A recent example of mine was getting stuck debating whether Redis was appropriate as durable storage or only as a cache. Rather than starting from zero in each design document review, wouldn&amp;rsquo;t it be easier if we reviewed our recent decisions about using Redis, reflected on how we made those decisions and wrote them down as a strategy?&lt;/p>
&lt;p>Good strategies guide tradeoffs and explain the rationale behind that guidance. Bad strategies state a policy without explanation, which decouples them from the context they were made. Without context, your strategy rapidly becomes incomprehensible&amp;ndash;why did they decide this?&amp;ndash;and difficult to adapt as the underlying context shifts. A few interesting strategies to read while thinking about writing your own are &lt;a href="https://multithreaded.stitchfix.com/blog/2019/08/19/framework-for-responsible-innovation/">A Framework for Responsible Innovation&lt;/a> and &lt;a href="https://slack.engineering/how-big-technical-changes-happen-at-slack/">How Big Technical Changes Happen at Slack&lt;/a>.&lt;/p>
&lt;p>If you&amp;rsquo;re a &lt;a href="https://www.amazon.com/dp/B004J4WKEC">Good Strategy, Bad Strategy&lt;/a> convert&amp;ndash;and that book has wholly transformed how I think about strategy&amp;ndash;then you&amp;rsquo;ll note this definition of strategy is the &amp;ldquo;diagnosis&amp;rdquo; and &amp;ldquo;guiding policies&amp;rdquo; sections, deferring &amp;ldquo;coherent action&amp;rdquo; to the design documents.&lt;/p>
&lt;p>My best advice for writing a strategy document is:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Start where you are.&lt;/strong> Working on strategy, it&amp;rsquo;s easy to be paralyzed by the inherently vast ambiguity we work in, but you&amp;rsquo;ve just got to dive in and start writing. Waiting for missing information doesn&amp;rsquo;t work: every missing document is missing for a good reason. Whatever you write will need to change, and if you write something particularly bad, you&amp;rsquo;ll quickly realize the need to change it. Where you are now is always the best place to start.&lt;/li>
&lt;li>&lt;strong>Write the specifics.&lt;/strong> Write until you start to generalize, and then stop writing. If you can&amp;rsquo;t be specific, wait until you&amp;rsquo;ve written more design documents. Specific statements create alignment; generic statements create the illusion of alignment.&lt;/li>
&lt;li>&lt;strong>Be opinionated.&lt;/strong> Good strategies are opinionated. If they aren&amp;rsquo;t opinionated, then they won&amp;rsquo;t provide any clarity on decision making. However, being opinionated on its own isn&amp;rsquo;t enough. You also need to show your work.&lt;/li>
&lt;li>&lt;strong>Show your work.&lt;/strong> In math classes growing up, you had to show your work to get full credit. Here too, you must show the rationale behind your opinions. Showing your work builds confidence in the first version of a document, but even more importantly, by showing your work, you make it possible for others to modify and extend your work as the underlying context shifts.&lt;/li>
&lt;/ul>
&lt;p>Some of the best strategies you write may at the time feel too obvious to bother writing. &amp;ldquo;When should we write design documents?&amp;rdquo; is a strategy worth writing. &amp;ldquo;Which databases do we use for which use cases?&amp;rdquo; is a strategy worth writing. &amp;ldquo;How should we stage our migration from monolith to services?&amp;rdquo;
is worth writing, too. As we leave behind the idea of strategy as demonstrations of brilliance,
we can start to write far more of them, and we can write them more casually. If it ends up not being used, you can always deprecate it later.&lt;/p>
&lt;h2 id="extrapolate-five-strategies-into-a-vision">Extrapolate five strategies into a vision&lt;/h2>
&lt;p>As you collect more strategies, it&amp;rsquo;ll become increasingly challenging to reason about how the various strategies interact. Maybe one of your strategies is to &lt;a href="https://www.intercom.com/blog/run-less-software/">Run less software&lt;/a> and rely more on cloud solutions, but another one of your strategies is to prefer offloading complexity to the database whenever possible. How do you reconcile those strategies if you identify a database that would allow you to offload a great deal of complexity, but that isn&amp;rsquo;t offered by your cloud vendor?&lt;/p>
&lt;p>Take five of your recent strategies, extrapolate how their tradeoffs will play out over the next two to three years. As you edit through the contradictions and weave the threads together, you&amp;rsquo;ve written an engineering vision. The final version will give you what &lt;a href="https://twitter.com/whereistanya">Tanya Reilly&lt;/a> calls &lt;a href="https://leaddev.com/technical-direction-strategy/sending-gifts-future-you">a robust belief in the future&lt;/a>, which makes it easier to understand how your existing strategies relate to each other and simplifies writing new strategies that stand the test of time.&lt;/p>
&lt;p>For a useful vision, a few things to focus on are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Write two to three years out.&lt;/strong> Companies, organizations, and technology all change quickly enough that thinking too far into the future is fraught. It also doesn&amp;rsquo;t work if you write a vision that expires in six months&amp;ndash;how many strategies would you realistically write within that six-month window? Try to focus on two to three years out; you can expand that horizon a bit if you&amp;rsquo;re a fairly established company.&lt;/li>
&lt;li>&lt;strong>Ground in your business and your users.&lt;/strong> Effective visions ground themselves in serving your users and your business. That tight connection keeps the vision aligned with your leadership team&amp;rsquo;s core values&amp;ndash;users and business. Bad visions treat technical sophistication as a self-justifying raison d&amp;rsquo;être&amp;ndash;a view that is never shared by your company&amp;rsquo;s leadership.&lt;/li>
&lt;li>&lt;strong>Be optimistic rather than audacious.&lt;/strong> Visions should be ambitious, but they shouldn&amp;rsquo;t be audacious. They should be possible, but the best possible version if possible. Do write what you could accomplish if every project is finished on time and without major setbacks. Don&amp;rsquo;t write what you think would be possible with infinite resources.&lt;/li>
&lt;li>&lt;strong>Stay concrete and specific.&lt;/strong> Visions get more useful as they get more specific. Generic statements are easy to agree with but don&amp;rsquo;t help reconcile conflicting strategies. Be a bit more detailed than you&amp;rsquo;re comfortable with. Details in visions are often illustrative rather than declarative, giving a taste of the future&amp;rsquo;s flavor rather than offering a binding commitment.&lt;/li>
&lt;li>&lt;strong>Keep it one to two pages long.&lt;/strong> The reality is that most people don&amp;rsquo;t read long documents. If you write something five or six pages long, readers will start dropping off without finishing it (or will skim it very rapidly without engaging with the details). Force yourself to write something compact, and reference extra context by linking to other documents for the subset of folks who want the full details.&lt;/li>
&lt;/ul>
&lt;p>After you finish writing your vision, the first step folks usually take is sharing it widely across the engineering organization. There is so much work behind the vision&amp;ndash;five design docs for each strategy, five strategies for one vision&amp;ndash;it&amp;rsquo;s hard &lt;em>not&lt;/em> to get excited when you&amp;rsquo;re done. So excited that it&amp;rsquo;s easy to get discouraged, then, when the response to your strategy will almost always be muted. There are a few reasons for the muted response. First, the core audience for your vision is folks writing strategies, which is a relatively small cohort. Second, a great vision is usually so &lt;em>obvious&lt;/em> that it bores more than it excites.&lt;/p>
&lt;p>Don&amp;rsquo;t measure vision by the initial excitement it creates. Instead, measure it by reading a design document from two years ago and then one from last week; if there&amp;rsquo;s marked improvement, then your vision is good.&lt;/p></description></item><item><title>Manage technical quality</title><link>https://staffeng.com/guides/manage-technical-quality/</link><pubDate>Sat, 17 Oct 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/manage-technical-quality/</guid><description>&lt;blockquote>
&lt;p>I feel particularly impactful when I can help improve a proposal that&amp;rsquo;s well-intentioned and solves a real need, but the team that drafted it lacks either experience or context to write a good plan to capture the opportunity. In such cases, having a well-structured plan can help substantially reduce the scope while getting to most of the value, and thus
demonstrate impact sooner.&lt;br>
- &lt;a href="https://staffeng.com/stories/dmitry-petrashko">Dmitry Petrashko&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>If there&amp;rsquo;s one thing that engineers, engineering managers, and technology executives are likely to agree on, it&amp;rsquo;s that there&amp;rsquo;s a crisis of technical quality. One diagnosis and cure is easy to identify: our engineers aren&amp;rsquo;t prioritizing quality, and we need to hire better engineers or retrain the ones we have. Of course, you should feel free to replace &amp;ldquo;engineers&amp;rdquo; with &amp;ldquo;product managers&amp;rdquo; or &amp;ldquo;executives&amp;rdquo; if that feels more comfortable. It&amp;rsquo;s a compelling narrative with a clear villain, and it conveniently shifts blame away from engineering leadership. Still, like most narratives that move accountability towards the folks with the least power, it&amp;rsquo;s both unhelpful and wrong.&lt;/p>
&lt;p>When you accept the premise that low technical quality results from poor decision-making, you start looking for bad judgment, and someone at the company must be the culprit. Is it the previous CTO? Is it that Staff engineer looking at you with a nervous smile? Is it everyone? What if it&amp;rsquo;s none of those folks, and stranger yet isn&amp;rsquo;t even your fault either?&lt;/p>
&lt;p>In most cases, low technical quality isn&amp;rsquo;t a crisis; it&amp;rsquo;s the expected, normal state. Engineers generally make reasonable quality decisions when they make them, and successful companies raise their quality bar over time as they scale, pivot, or shift up-market towards enterprise users. At a well-run and successful company, most of your previous technical decisions won&amp;rsquo;t meet your current quality threshold. Rather than a failure, closing the gap between your current and target technical quality is a routine, essential part of effective engineering leadership.&lt;/p>
&lt;h2 id="the-problem">The problem&lt;/h2>
&lt;p>As an engineering leadership team, your goal is to maintain an appropriate technical quality level while devoting as much energy as possible towards the core business. You must balance quality across multiple timeframes, and those timeframes generally have conflicting needs. For example, you&amp;rsquo;ll do very different work getting that critical partnership out the door for next week&amp;rsquo;s deadline versus building a platform that supports launching ten times faster next quarter.&lt;/p>
&lt;p>Just as your company&amp;rsquo;s technical quality bar will shift over time, your approach to managing technical quality will evolve in tandem:&lt;/p>
&lt;ol>
&lt;li>fix the &lt;strong>hot spots&lt;/strong> that are causing immediate problems&lt;/li>
&lt;li>adopt &lt;strong>best practices&lt;/strong> that are known to improve quality&lt;/li>
&lt;li>prioritize &lt;strong>leverage points&lt;/strong> that preserve quality as your software changes&lt;/li>
&lt;li>align &lt;strong>technical vectors&lt;/strong> in how your organization changes software&lt;/li>
&lt;li>&lt;strong>measure technical quality&lt;/strong> to guide deeper investment&lt;/li>
&lt;li>spin up a &lt;strong>technical quality team&lt;/strong> to create systems and tools for quality&lt;/li>
&lt;li>run a &lt;strong>quality program&lt;/strong> to measure, track and create accountability&lt;/li>
&lt;/ol>
&lt;p>As we dig into this toolkit of approaches, remember to pick the cheapest, most straightforward tool likely to work. Technical quality is a long-term game. There&amp;rsquo;s no such thing as winning, only learning and earning the chance to keep playing.&lt;/p>
&lt;h2 id="ascending-the-staircase">Ascending the staircase&lt;/h2>
&lt;p>There&amp;rsquo;s a particular joy in drilling into the challenge at hand until you find a generalized problem worth solving. However, an equally important instinct is solving the current situation quickly and moving on to the next pressing issue.&lt;/p>
&lt;p>As you think about the right quality improvements to make for your team and organization, it&amp;rsquo;s generally most effective to start with the lightest weight solutions and only progress towards massive solutions as earlier efforts collapse under the pressure of scale. If you can&amp;rsquo;t get teams to adopt proper code linting, your attempts to roll out a comprehensive quality program are doomed. Although the latter can be more effective at scale, they&amp;rsquo;re much, much harder to execute.&lt;/p>
&lt;p>So, do the quick stuff first!&lt;/p>
&lt;p>Even if it doesn&amp;rsquo;t work, you&amp;rsquo;ll learn more and more quickly from failing to roll out the easy stuff than failing to roll out the hard stuff. Then you&amp;rsquo;ll get to an improved second iteration sooner. Over time you will move towards comprehensive approaches, but there&amp;rsquo;s no need to rush. Don&amp;rsquo;t abandon the ease, joy, and innocence of early organizations for the perils of enterprise-scale coordination without proper need.&lt;/p>
&lt;p>It&amp;rsquo;s convenient to present these phases as a linear staircase to be ascended, but that&amp;rsquo;s rarely how real organizations use them. You&amp;rsquo;re more likely to fix a quality hot spot, roll out a best practice, start running an architecture review, abolish that architecture review, and go back to hot-spotting for a bit. Premature processes add more friction than value and are quick to expose themselves as ineffective. If something isn&amp;rsquo;t working, try for a bit to make it work, and then celebrate its demise.&lt;/p>
&lt;h2 id="hot-spots">Hot spots&lt;/h2>
&lt;p>When confronted by a quality problem, the first instinct is often to identify a process failure that necessarily requires a process solution. If a deployment causes an outage, it&amp;rsquo;s because the author didn&amp;rsquo;t correctly follow the code test process, so now we&amp;rsquo;re going to require tests with every commit &amp;ndash; that&amp;rsquo;ll teach those lazy developers!&lt;/p>
&lt;p>There&amp;rsquo;s the old joke about Sarbanes-Oxley: it doesn&amp;rsquo;t reduce risk; it just makes it clear who to blame when things go wrong. Unfortunately, that joke applies without humor to how many organizations roll out processes. Accountability has its role, but it&amp;rsquo;s much more important to understand the problem at hand and try to fix it directly than to create process-driven accountability.&lt;/p>
&lt;p>Process rollout requires humans to change how they work, which you shouldn&amp;rsquo;t undertake lightly. Rather than reaching for process improvement, start by donning the performance engineer&amp;rsquo;s mindset. Measure the problem at hand, identify where the bulk of the issue occurs, and focus on precisely that area.&lt;/p>
&lt;p>The previous example of an untested deploy might benefit from giving direct feedback to the deploying engineer about changing their testing habits. Alternatively, maybe you&amp;rsquo;re better served by acknowledging that your software design is error-prone and adopting the &amp;ldquo;define errors out of existence&amp;rdquo; approach described in &lt;a href="https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201">A Philosophy of Software Design&lt;/a>.&lt;/p>
&lt;p>If you have a development velocity problem, it might be optimizing test runtimes, moving your Docker compile step onto a &lt;a href="https://en.wikipedia.org/wiki/RAM_drive">RAM disk&lt;/a>, or using the techniques described in &lt;a href="https://www.amazon.com/Software-Design-X-Rays-Technical-Behavioral-ebook-dp-B07BVRLZ87/dp/B07BVRLZ87/">Software Design X-Rays&lt;/a> to find the specific files to improve.&lt;/p>
&lt;p>&lt;a href="https://lethain.com/systems-thinking/">Systems thinking&lt;/a> is the most transformative thinking technique I&amp;rsquo;ve encountered in my career. Still, at times it can be a siren beckoning you towards fixing a current system you may be better discarding. Sure, you can roll out a new training program to teach your team how to write better tests, but alternatively, maybe you can just delete the one test file where 98% of test failures happen. That&amp;rsquo;s the unreasonable effectiveness of prioritizing hot spots and why it should be the first technique you use to improve technical quality.&lt;/p>
&lt;p>At some point, you&amp;rsquo;re likely to find that your organization is creating quality problems faster than you&amp;rsquo;re able to fix hot spots, and that&amp;rsquo;s when it&amp;rsquo;s time to move on to adopting best practices.&lt;/p>
&lt;h2 id="best-practices">Best practices&lt;/h2>
&lt;p>I once worked at a company that didn&amp;rsquo;t have a team planning process. Over time the head of engineering was increasingly frustrated with the inability to project target dates and mandated that we use &lt;a href="https://en.wikipedia.org/wiki/Scrum_(software_development)">Scrum&lt;/a>. After the mandate, a manager wrote the Scrum process on a wiki. There was an announcement that we were using Scrum. Managers told their teams to use Scrum. Mission accomplished!&lt;/p>
&lt;p>Of course, no one started to use Scrum. Everyone kept doing what they&amp;rsquo;d done before. It&amp;rsquo;s awkward to acknowledge mistakes, so the head of engineering declared adoption a major win, and no one had the heart to say differently.&lt;/p>
&lt;p>This sad tale mirrors how many companies try to roll out best practices, and it&amp;rsquo;s one of the reasons why best practices have such a bad reputation. In theory, organizations would benefit from adopting best practices before fixing quality hot spots, but I recommend practices after hot spotting. Adopting best practices requires a level of organizational and leadership maturity that takes some time to develop.&lt;/p>
&lt;p>When you&amp;rsquo;re rolling out a new practice, remember that a &lt;a href="https://lethain.com/good-process-is-evolved/">good process is evolved&lt;/a> rather than mandated. Study how other companies adopt similar practices, document your intended approach, experiment with the practice with a few engaged teams, sand down the rough edges, improve the documentation based on the challenges, and only then roll it out further. A rushed process is a failed process.&lt;/p>
&lt;p>Equally important is the idea of limiting concurrent process rollouts. If you try to get teams to adopt multiple new practices simultaneously, you&amp;rsquo;re fighting for their attention with yourself. It also makes it harder to attribute impact later if you&amp;rsquo;re considering reverting or modifying one of the new practices. It&amp;rsquo;s a bit draconian, but I&amp;rsquo;ve come to believe that you ought to limit yourself to a single best practice rollout at any given time. Channel all your energy towards making one practice a success rather than splitting resources across a handful.&lt;/p>
&lt;p>Adopting a single new practice at a time also forces you to think carefully about which to prioritize. Selecting your next process sounds easy, but it&amp;rsquo;s often unclear which best practices are genuinely best practice and which are just familiar or famous. Genuine best practice has to be supported by research, and the best source of research on this topic is &lt;a href="https://www.amazon.com/dp/B07B9F83WM/">Accelerate&lt;/a>.&lt;/p>
&lt;p>While all of Accelerate&amp;rsquo;s recommendations are data-driven and quite good, the handful that I&amp;rsquo;ve found most helpful to adopt early are version control, trunk-based development, CI/CD, and production observability (including developers on-call for the systems they write), and working in small, atomic changes. There are many other practices I&amp;rsquo;d love to advocate for (who hasn&amp;rsquo;t spent a career era advocating for &lt;a href="https://increment.com/documentation/why-investing-in-internal-docs-is-worth-it/">better internal documentation&lt;/a>), but I don&amp;rsquo;t trust my intuition like I once did.&lt;/p>
&lt;p>The transition from fixing hot spots to adopting best practices comes when you&amp;rsquo;re overwhelmed by too many hot spots to cool. The next transition, from best practices to leverage points, comes when you find yourself wanting to adopt a new best practice before your in-progress best practice is working. Rather than &lt;a href="https://lethain.com/limiting-wip/">increasing your best practice adoption-in-progress limit&lt;/a>, move on to the next tool.&lt;/p>
&lt;h2 id="leverage-points">Leverage points&lt;/h2>
&lt;p>In the Hotspotting section, we talked about using the performance engineer&amp;rsquo;s mindset to identify the right problems to fix. Optimization works well for the issues you already have, but it&amp;rsquo;s intentionally inapplicable to the future: the worst sin of performance engineering is applying effort to unproven problems.&lt;/p>
&lt;p>However, as you look at how software changes over time, there are a small handful of places where extra investment preserves quality over time, both by preventing gross quality failures and reducing the cost of future quality investments.&lt;/p>
&lt;p>I call those quality leverage points, and the three most impactful points are interfaces, stateful systems, and data models.&lt;/p>
&lt;p>&lt;em>Interfaces&lt;/em> are contracts between systems. Effective interfaces decouple clients from the encapsulated implementation. Durable interfaces expose all the underlying essential complexity and none of the underlying accidental complexity. Delightful interfaces are &lt;a href="https://increment.com/apis/api-design-for-eager-discering-developers/">Eagerly discerning, discerningly eager&lt;/a>.&lt;/p>
&lt;p>&lt;em>State&lt;/em> is the hardest part of any system to change, and that resistance to change makes &lt;em>stateful systems&lt;/em> another critical leverage point.
State gets complex faster than other systems and has an inertia that makes it relatively expensive to improve later.
As you incorporate business obligations around security, privacy, and compliance, changing your stateful systems becomes even more challenging.&lt;/p>
&lt;p>&lt;em>Data models&lt;/em> are the intersection of the interfaces and state, constraining your stateful system&amp;rsquo;s capabilities down to what your application considers legal. A good data model is rigid: it only exposes what it genuinely supports and prevents invalid states&amp;rsquo; expression. A good data model is tolerant of evolution over time. Effective data models are not even slightly clever.&lt;/p>
&lt;p>As you identify these leverage points in your work, take the extra time to approach them deliberately. If it&amp;rsquo;s an interface, integrate half a dozen clients against the mocked implementation. If it&amp;rsquo;s a data model, represent half a dozen real scenarios. If it&amp;rsquo;s stateful, exercise the failure modes, check the consistency behaviors, and establish performance benchmarks resembling your production scenario.&lt;/p>
&lt;p>Take everything you&amp;rsquo;ve learned, and pull it into a technical specification document that you socialize across your team. Gather industry feedback from peers. Even after you begin implementation, listen to reality&amp;rsquo;s voice and remain open to changes.&lt;/p>
&lt;p>One of the hidden powers of investing in leverage points is that you don&amp;rsquo;t need total organizational alignment to do it. To write a technical vision or roll out a best practice, you need that sort of buy-in, which is why I recommend starting with leverage points. However, if you&amp;rsquo;ve exhausted the accessible impact from leverage points, it may be time to move on to driving broader organizational alignment.&lt;/p>
&lt;h2 id="technical-vectors">Technical vectors&lt;/h2>
&lt;p>Effective organizations marshal the majority of their efforts towards a shared vision. If you plot every technical decision as a vector on a grid, the more those vectors point in the same direction, the more you&amp;rsquo;ll accomplish over time. Conversely, some of the most impressive engineers I&amp;rsquo;ve worked with created vectors with an extraordinary magnitude but a misaligned direction.
Ultimately those engineers harmed their organizations in their attempts to lead it.&lt;/p>
&lt;p>One sure-fire solution to align technical direction is to route all related decisions to the same person with &lt;a href="https://staffeng.com/guides/staff-archetypes">Architect&lt;/a> somewhere in their title. This works well but is challenging to scale, and the quality of an architect&amp;rsquo;s decisions degrade the further they get from doing real work on real code in the real process. On the other extreme, you can allow every team to make independent decisions. But an organization that allows any tool is an organization with uniformly unsupported tooling.&lt;/p>
&lt;p>Your fundamental tools for aligning technical vectors are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Give direct feedback.&lt;/strong> When folks run into misalignment, the first answer is often process change, but instead, start with simply giving direct feedback to the individuals who you believe are misaligned. As much as they&amp;rsquo;re missing your context, you&amp;rsquo;re missing theirs, and a quick conversation can often prevent years of unnecessary process.&lt;/li>
&lt;li>&lt;strong>Refine your engineering strategy&lt;/strong> from &lt;a href="https://staffeng.com/guides/engineering-strategy">tech spec, to strategy, to vision&lt;/a>.&lt;/li>
&lt;li>&lt;strong>Encapsulate your approach in your workflows and tooling.&lt;/strong> Documentation of a clear vision is helpful, but some folks simply won&amp;rsquo;t study your document. Deliberate tools create workflows that nurture habits far better than training and documentation. For example, provisioning a new service might require going to a website that requires you to add a link to a technical spec for that service. Another approach might be blocking deploys to production if the service doesn&amp;rsquo;t have an on-call setup established, with someone currently on-call, and that individual must also have their push notifications enabled.&lt;/li>
&lt;li>&lt;strong>Train new team members during their onboarding.&lt;/strong> Changing folks&amp;rsquo; habits after they&amp;rsquo;ve formed is quite challenging, which is frustrating if you&amp;rsquo;re attempting to get folks to adopt new practices. However, if you get folks pointed in the right direction when they join, then that habit-momentum will work in favor of remaining aligned.&lt;/li>
&lt;li>&lt;strong>Use &lt;em>Conway’s Law&lt;/em>.&lt;/strong> Conway&amp;rsquo;s Law argues that organizations build software that reflects their structure. If your organization is poorly structured, this will lead to tightly coupled or tangled software. However, it&amp;rsquo;s also a force for quality if your organization&amp;rsquo;s design is an effective one.&lt;/li>
&lt;li>&lt;strong>Curate technology change&lt;/strong> using &lt;a href="https://lethain.com/scaling-consistency/">architecture reviews&lt;/a>, &lt;a href="https://lethain.com/magnitudes-of-exploration/">investment strategies&lt;/a>, and &lt;a href="https://slack.engineering/how-big-technical-changes-happen-at-slack/">a structured process for adopting new tools&lt;/a>. Most misalignment comes from missing context, and these are the organizational leverage points to inject context into decision-making. Many organizations start here, but it&amp;rsquo;s the last box of tools that I recommend opening. How can you provide consistent architecture reviews without an articulated vision? Why tell folks your strategy after they&amp;rsquo;ve designed something rather than in their onboarding process?&lt;/li>
&lt;/ul>
&lt;p>Regardless of the approaches you use to align your technical vectors, this is work that tends to happen over months and years. There&amp;rsquo;s no world where you write the vision document, and the org immediately aligns behind its brilliance. Much more likely is that it gathers dust until you invest in building support.&lt;/p>
&lt;p>Most companies can combine the above techniques from hot-spot fixing to vector-alignment into a successful approach for managing technical quality, and hopefully, that&amp;rsquo;s the case for you. However, many find that they&amp;rsquo;re not enough and that you move towards heavier approaches. In that case, the first step is, as always, measurement.&lt;/p>
&lt;h2 id="measure-technical-quality">Measure technical quality&lt;/h2>
&lt;p>The desire to measure in software engineering has generally outpaced our state of measurement. &lt;a href="https://www.amazon.com/dp/B07B9F83WM/">Accelerate&lt;/a> identifies metrics to measure velocity, which are powerful for locating process and tooling problems, but these metrics start &lt;em>after&lt;/em> the code&amp;rsquo;s been merged. How do you measure your codebase&amp;rsquo;s quality such that you can identify gaps, propose a plan of action, and evaluate the impact of your efforts to improve?&lt;/p>
&lt;p>There are some process measurements that correlate with effective changes. For example, you could measure the number of files changed in each pull request on the understanding that smaller pull requests are generally higher quality. You could also measure a codebase&amp;rsquo;s lines of code per file, on the assumption that very large files are generally hard to extend. These could both be quite helpful, and I&amp;rsquo;d even recommend measuring them, but I think they are at best proxy measurements for code quality.&lt;/p>
&lt;p>My experience is that it &lt;em>is&lt;/em> possible to usefully measure code quality, and it comes down to developing an extremely precise definition of quality. The more detailed you can get your definition of quality, the more useful it becomes to measure a codebase, and the more instructive it becomes to folks hoping to improve the quality of the area they&amp;rsquo;re working on. This approach is described in some detail in &lt;a href="https://www.amazon.com/Building-Evolutionary-Architectures-Support-Constant/dp/1491986360/">Building Evolutionary Architectures&lt;/a> and &lt;a href="https://lethain.com/reclaim-unreasonable-software/">Reclaim unreasonable software&lt;/a>.&lt;/p>
&lt;p>Some representative components to consider including in your quality definition:&lt;/p>
&lt;ul>
&lt;li>What percentage of the code is statically typed?&lt;/li>
&lt;li>How many files have associated tests?&lt;/li>
&lt;li>What is test coverage within your codebase?&lt;/li>
&lt;li>How narrow are the public interfaces across modules?&lt;/li>
&lt;li>What percentage of files use the preferred HTTP library?&lt;/li>
&lt;li>Do endpoints respond to requests within 500ms after a cold start?&lt;/li>
&lt;li>How many functions have dangerous read-after-write behavior? Or perform unnecessary reads against the primary database instance?&lt;/li>
&lt;li>How many endpoints perform all state mutation within a single transaction?&lt;/li>
&lt;li>How many functions acquire low-granularity locks?&lt;/li>
&lt;li>How many hot files exist which are changed in more than half of pull requests?&lt;/li>
&lt;/ul>
&lt;p>You&amp;rsquo;re welcome to disagree that some of these properties ought to exist in &lt;em>your&lt;/em> codebase&amp;rsquo;s definition of quality: your definition should be specific to your codebase and your needs. The important thing is developing a precise, measurable definition. There will be disagreement in the development of that definition, and you will necessarily change the definition over time.&lt;/p>
&lt;p>After you&amp;rsquo;ve developed the definition, this is an area where instrumentation can be genuinely challenging, and instrumentation is a requirement for useful metrics. Instrumentation complexity is the biggest friction point for adopting these techniques in practice, but if you can push through, you unlock something pretty phenomenal: a real, dynamic quality score that you can track over time and use to create a clarity of alignment in your approach that conceptual alignment cannot.&lt;/p>
&lt;p>With quality defined and instrumented, your next step is deciding between investing in a &lt;em>quality team&lt;/em> or a &lt;em>quality program&lt;/em>. A dedicated team is easy to coordinate and predictable in its bandwidth and is generally the easier place to start.&lt;/p>
&lt;h2 id="technical-quality-team">Technical quality team&lt;/h2>
&lt;p>A &lt;em>technical quality team&lt;/em> is a software engineering team dedicated to creating quality in your codebase. You might call this team Developer Productivity, Developer Tools, or Product Infrastructure. In any case, the team&amp;rsquo;s goal is to create and preserve quality across your company&amp;rsquo;s software.&lt;/p>
&lt;p>This is not what&amp;rsquo;s sometimes called a quality assurance team. Although both teams make investments into tests, the technical quality team has a broader remit from workflow to build to test to interface design.&lt;/p>
&lt;p>When you&amp;rsquo;re bootstrapping such a team, start with a fixed team size of three to six folks. Having a small team forces you to relentlessly prioritize their roadmap on impact and ensures you&amp;rsquo;ll maintain focus on the achievable. Over time this team will accumulate systems to maintain that require scaling investment, Jenkins clusters are a common example of this, and you&amp;rsquo;ll want to &lt;a href="https://lethain.com/sizing-engineering-teams/">size the team&lt;/a> as a function of the broader engineering organization. Rules of thumb are tricky here, but maybe one engineer working on developer tooling for every fifteen product engineers, in addition to your infrastructure engineering investment.&lt;/p>
&lt;p>It&amp;rsquo;s rare for these teams to have a product manager, generally one-or-more Staff-plus engineers, and the engineering manager partner to fill that role. Sometimes they employ a Technical Program Manager, but typically that is after they cross into operating a &lt;em>Quality program&lt;/em> as described in the next section.&lt;/p>
&lt;p>When spinning up and operating one of these teams, some fundamentals of success are:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Trust metrics over intuition.&lt;/strong> You should have a way to measure every project. Quality is a complex system, the sort of place where your intuition can easily deceive you. Similarly, as you become more senior at your company, your experience will no longer reflect most other folks&amp;rsquo; experiences. You already know about the rough edges, and you&amp;rsquo;ll be the first person in line to get help if you find a new one, but most other folks don&amp;rsquo;t. Metrics keep you honest.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Keep your intuition fresh.&lt;/strong> Code and process change over time, and your intuition is going stale every week you&amp;rsquo;re away from building product features. Most folks find that team embedding and team rotations are the best way to keep your instincts relevant. Others monitor chat for problems, as well as a healthy schedule of 1:1 discussions with product developers. The best folks do both of those and keep their metrics dashboards handy.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Listen to and learn from your users.&lt;/strong> There is a popular idea of &amp;ldquo;taste level,&amp;rdquo; which implies that some folks simply know what good looks like. There is a huge variance in folks who design effective quality investments, but it isn&amp;rsquo;t an innate skill. The best folks focus on deeply understanding what their users are trying to accomplish &lt;em>and&lt;/em> prioritize user needs over implementation constraints.&lt;/p>
&lt;p>Adoption and usability of your tools are much more important than raw power. A powerful tool that&amp;rsquo;s difficult to use will get a few power users, but most folks will pass it by. Slow down to get these details right. Hide all the &lt;a href="https://en.wikipedia.org/wiki/No_Silver_Bullet">accidental complexity&lt;/a>. Watch an engineer try to use your tool for their first time without helping them with it. Improve the gaps. Do that ten more times! If you&amp;rsquo;re not doing user research on your tools, then you are &lt;em>doomed&lt;/em> as a quality investment team.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Do fewer things, but do them better.&lt;/strong> When you&amp;rsquo;re building for the entire engineering organization, anything you do well will accelerate the overall organization. Anything you do poorly, including something almost great with too many rough edges, will drag everyone down. Although it&amp;rsquo;s almost always true that doing the few most important things will contribute more than many mediocre projects, this is even more true in cases where you&amp;rsquo;re trying to roll out tools and workflows to your entire organization (the organizational process-in-progress limits still apply here!).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Don&amp;rsquo;t hoard impact.&lt;/strong> There&amp;rsquo;s a fundamental tension between centralized quality teams and the teams that they support. It&amp;rsquo;s often the case that there&amp;rsquo;s a globally optimal approach preferred by the centralized team, which grates heavily on a subset of teams that work on atypical domains or workloads. One representative example is a company writing its backend servers in JavaScript and not allowing their machine learning engineers to use the Python ecosystem because they don&amp;rsquo;t want to support two ecosystems. Another case is a company standardized on using REST/HTTP2/JSON for all APIs where a particular team wants to use gRPC instead. There&amp;rsquo;s no perfect answer here, but it&amp;rsquo;s important to establish a thoughtful approach that &lt;a href="http://lethain.com/magnitudes-of-exploration/">balances the benefits of exploration against the benefits of standardization&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>A successful technical quality team using the above approaches will be &lt;em>unquestionably&lt;/em> more productive than if the same number of engineers were directly doing product engineering work. Indeed, discounted developer productivity (in the spirit of &lt;a href="https://en.wikipedia.org/wiki/Discounted_cash_flow">discounted cash flow&lt;/a>) is the theoretically correct way to measure such a team&amp;rsquo;s impact. Only theoretically, because such calculations are mostly an evaluation of your self-confidence.&lt;/p>
&lt;p>Even if you&amp;rsquo;re quite successful, you&amp;rsquo;ll always have a backlog of high-impact work that you want to take on but don&amp;rsquo;t have the bandwidth to complete. Organizations don&amp;rsquo;t make purely rational team resourcing decisions, and you may find that you lack the bandwidth to complete important projects and likewise can&amp;rsquo;t get approval to hire additional folks onto your team.&lt;/p>
&lt;p>It&amp;rsquo;s a good sign when your team has more available high-impact work than you can take on: if you aren&amp;rsquo;t selective about which projects to take on, then you&amp;rsquo;re not thinking broadly enough. This means you shouldn&amp;rsquo;t necessarily try to grow your technical quality team if you have a backlog. However, if you find that there is critical quality work that you can&amp;rsquo;t get to, then it may be time to explore starting a &lt;em>quality program&lt;/em>.&lt;/p>
&lt;h2 id="quality-program">Quality program&lt;/h2>
&lt;p>A &lt;em>quality program&lt;/em> isn&amp;rsquo;t computer code at all, but rather an initiative led by a dedicated team to maintain technical quality across an organization. A quality program takes on the broad remit of achieving the organization&amp;rsquo;s target level of software quality. These are relatively uncommon, but something similar you&amp;rsquo;ve probably encountered is an incident program responsible for a company&amp;rsquo;s incident retrospectives and remediations.&lt;/p>
&lt;p>The technical components of running a quality program are the sorts of things discussed above, so here we&amp;rsquo;ll focus on managing a program effectively. Your first step is to find a technical program manager who can co-lead the program and operate its mechanics. While you can make considerable progress on an organizational program&amp;rsquo;s informational aspects without a technical program manager; however, it&amp;rsquo;s a trap. You&amp;rsquo;ll be crushed by the coordination overhead of solo-driving a program in a large organization.&lt;/p>
&lt;p>Operating organizational programs is &lt;a href="https://lethain.com/programs-owning-the-unownable/">a broad topic about which much has been written&lt;/a>, but the core approach is:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Identify a program sponsor.&lt;/strong> You can&amp;rsquo;t change an organization&amp;rsquo;s behavior without an empowered sponsor. Organizations behave the way they do because it&amp;rsquo;s the optimal solution to their current constraints, and you can&amp;rsquo;t shift those constraints without the advocacy of someone powerful.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Generate sustainable, reproducible metrics.&lt;/strong> It&amp;rsquo;s common for folks running a program to spend four-plus hours a week maintaining their dataset by hand. This doesn&amp;rsquo;t work. Your data will have holes in it, you won&amp;rsquo;t be able to integrate your data with automation in later steps, and you&amp;rsquo;ll run out of energy to do the work to effect real change; refreshing a metrics dashboard has no inherent value.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Identify program goals for every impacted team and a clear path for them to accomplish those goals.&lt;/strong> Your program has to identify specific goals for each impacted team. For example, reducing test flakiness in their tests or closing incident remediations more quickly. However, it&amp;rsquo;s essential that you provide the map to success! So many programs demand participation from other teams without providing clear directions on how they can accomplish their part. The program owner is the subject matter expert, don&amp;rsquo;t offload your strategy to every team to independently reinvent.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Build the tools and documentation to support teams towards their goals.&lt;/strong> Once you&amp;rsquo;ve identified a clear path for teams to accomplish your program goals, figure out how you can help them make those changes! This might be providing &amp;ldquo;golden examples&amp;rdquo; of what things ought to look like, or an example pull request refactoring a challenging section of code into the new pattern. It might be providing a test script to verify the migration worked correctly. It might be auto-generating the conversion commit to test, verify, and merge without having engineers write it themselves. Do as much as you possibly can to avoid every team having to deeply understand the problem space you&amp;rsquo;re attempting to make progress in.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Create a goal dashboard and share it widely.&lt;/strong> Once you have your program goals communicated to each team, provide dashboards that help them understand their current state, their goal state, and that give reinforcing feedback on their (hopeful) progress along the way. The best dashboard is going to be both a scorecard for each team&amp;rsquo;s work and also provide breadcrumbs for each team on where to focus their next efforts.&lt;/p>
&lt;p>There are three distinct zoom-levels that your dashboard should support. The fully zoomed-out level helps you evaluate your program&amp;rsquo;s impact. The fully zoomed-in level helps an individual team understand their remaining work. A third level between the two helps organizational leaders hold their teams accountable (and supports your program sponsor in making concrete, specific asks to hold those leaders accountable).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Send programmatic nudges for folks behind on their goals.&lt;/strong> Folks are busy. They won&amp;rsquo;t always prioritize your program&amp;rsquo;s goals. Alternatively, they might do an amazing job of making your requested improvements but backtrack later with deprecated practices. Use nudges to direct the attention of teams towards the next work they should take towards your program&amp;rsquo;s goals. Remember, attention is a scarce resource! If you waste folks&amp;rsquo; time with a nudge email or ping, they won&amp;rsquo;t pay attention to the next one.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Periodically review program status with your sponsor.&lt;/strong> Programs are trying to make progress on an organizational priority that doesn&amp;rsquo;t naturally align with the teams&amp;rsquo; goals. Many teams struggle to break from their local prioritization to accomplish global priorities. This is where it&amp;rsquo;s essential to review your overall progress with your sponsor and point them towards the teams that prioritize program work. Effectively leveraging your sponsor to bridge misaligned prioritization will be essential to your success.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>In a lot of ways, a program is just an endless migration, and &lt;a href="http://lethain.com/migrations/">the techniques that apply to migrations work for programs as well&lt;/a>.&lt;/p>
&lt;p>If you get all of those steps right, you&amp;rsquo;re running a genuinely great program. This might feel like a lot of work, and wow, it is: a lot of programs go wrong. The three leading causes of failed programs are:&lt;/p>
&lt;ol>
&lt;li>running it purely from a process perspective and becoming detached from the reality of what you&amp;rsquo;re trying to accomplish,&lt;/li>
&lt;li>running it purely from a technical perspective and thinking that you can skip the essential steps of advocating for your goal and listening to the folks you&amp;rsquo;re trying to motivate,&lt;/li>
&lt;li>trying to cover both perspectives as a single person&amp;ndash;don&amp;rsquo;t go it alone!&lt;/li>
&lt;/ol>
&lt;p>A bad program is a lot like an inefficient non-profit: the goal is right, but few funds reach the intended goal. No matter how you decide to measure technical quality, the most important thing to always remember when running your quality program is that the program isn&amp;rsquo;t the goal. The goal is to create technical quality. Organizational programs are massive and build so much momentum that inertia propels them forward long after they&amp;rsquo;ve stopped working. Keep your program lean enough to cancel, and remain self-critical enough to cancel if it ceases driving quality creation.&lt;/p>
&lt;h2 id="start-small-and-add-slowly">Start small and add slowly&lt;/h2>
&lt;p>When you realize your actual technical quality has fallen considerably behind your target technical quality, the natural first reaction is to panic and start rolling out a vast array of techniques and solutions. Dumping all your ingredients into the pot, inevitably, doesn&amp;rsquo;t work well, and worse, you don&amp;rsquo;t even know which parts to keep.&lt;/p>
&lt;p>If you find yourself struggling with technical quality&amp;ndash;and we all do, frequently&amp;ndash;then start with something small, and iterate on it until it works. Then add another technique, and iterate on that too. Slowly build towards something that genuinely works, even if it means weathering accusations of not moving fast enough. When it comes to complex systems and interdependencies, moving quickly is just optics. It&amp;rsquo;s methodical movement that gets the job done.&lt;/p></description></item><item><title>Operating at Staff</title><link>https://staffeng.com/guides/operating-at-staff/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/operating-at-staff/</guid><description>&lt;blockquote>
&lt;p>One of the best pieces of advice that someone gave me, and that I make sure to pass on to other staff engineers, is that there&amp;rsquo;s a misconception that you become a Staff engineer and then you&amp;rsquo;ll be in control of the work you do, and everyone will listen to you and do what you want them to do. That&amp;rsquo;s absolutely the opposite of what happens!
- &lt;a href="https://staffeng.com/stories/katie-sylor-miller">Katie Sylor-Miller&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>Many engineers become focused on the Staff-plus career path because the engineering manager path has too many meetings or requires too much collaboration with other coworkers, and yikes, are you going to be surprised if you begin a Staff-plus with that mindset. Although Staff engineer roles are generally positioned as the sequential step beyond Senior engineer, it&amp;rsquo;s genuinely a different role, and you&amp;rsquo;ll increasingly spend your time doing sorts of work that you previously did infrequently or not-at-all.&lt;/p>
&lt;p>There is a significant learning curve in Staff-plus roles that initially trip most folks up.
Part of the challenge is that much of the work you&amp;rsquo;re doing has a much slower feedback cycle.
The delayed feedback can initially feel quite demoralizing as you replace the visceral coding &lt;a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL&lt;/a> with the uneven progress of mentorship, relationship building, and strategy.&lt;/p>
&lt;p>This chapter is about overcoming that learning curve,
learning to operate as a Staff engineer, and
finding the parts of the role which are personally fulfilling and organizationally transformative.&lt;/p>
&lt;h2 id="topics">Topics&lt;/h2>
&lt;p>In the interviews for this book, as well as my own experience leading and coaching Staff-plus engineers, a handful of topics kept coming up as keystones of personal development. They aren&amp;rsquo;t &lt;em>everything&lt;/em> you&amp;rsquo;ll do in the role, but they are the places where you&amp;rsquo;re most likely to have an outsized impact or accidentally commit a career-limiting move.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>&lt;a href="https://staffeng.com/guides/work-on-what-matters">Work on what matters&lt;/a>&lt;/strong> to make the most of the working hours you have,
particularly as you get further along in your career and life&amp;rsquo;s commitments expand.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://staffeng.com/guides/engineering-strategy">Write an engineering strategy&lt;/a>&lt;/strong> to guide your organization&amp;rsquo;s approach to supporting your company&amp;rsquo;s business objectives with its architecture, technology selection, and organizational structure.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://staffeng.com/guides/manage-technical-quality">Curate technical quality&lt;/a>&lt;/strong> to maintain the quality of your company&amp;rsquo;s architecture and software as it grows and tacks over time.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://staffeng.com/guides/staying-aligned-with-authority">Stay aligned with authority&lt;/a>&lt;/strong> to remain an effective leader over time.
Technical leadership roles rely on proxied authority from another (usually, managerial) leader, and continued access to that authority depends on staying aligned, trustworthy, and predictable.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://staffeng.com/guides/to-lead-follow">To lead, you have to follow&lt;/a>&lt;/strong>. Having a vivid sense of how things ought to work
is a powerful leadership tool, but it&amp;rsquo;s also essential to learn to blend your vision with the visions from your peers and leadership.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://staffeng.com/guides/learn-to-never-be-wrong">Learn to never be wrong&lt;/a>&lt;/strong>.
Shift away from being right and towards understanding and communication.
Stop spending your social capital repairing relationships frayed by conflict, and learn to collaborate with folks with different priorities and perspectives.
This also comes with the added benefit of fewer folks complaining about you to your manager.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://staffeng.com/guides/create-space-for-others">Create space for others&lt;/a>&lt;/strong> so that your team grows stronger than your contribution.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://staffeng.com/guides/network-of-peers">Build a network of peers&lt;/a>&lt;/strong> to vet difficult decisions and to give you
honest feedback when your role&amp;rsquo;s authority starts to temper feedback.&lt;/li>
&lt;/ol>
&lt;p>An astute reader will notice two critical themes discussed in &lt;a href="https://staffeng.com/guides/what-do-staff-engineers-actually-do">What do Staff engineers actually do?&lt;/a>
are missing from this topic list: the first is &amp;ldquo;mentorship and sponsorship,&amp;rdquo; and the second is &amp;ldquo;being glue.&amp;rdquo;
Both concepts are essential to the success of Staff-plus engineers,
but ultimately, I think the canonical pieces on these topics already exist,
and you&amp;rsquo;re better served by reading those than my watery rehash.
For mentorship and sponsorship, spend some time with Lara Hogan&amp;rsquo;s
&lt;a href="https://larahogan.me/blog/what-sponsorship-looks-like/">What Does Sponsorship Look Like?&lt;/a>,
and for being glue, spend time with Tanya Reilly&amp;rsquo;s piece that bore the phrase,
&lt;a href="https://noidea.dog/glue">Being Glue&lt;/a>.&lt;/p>
&lt;p>As you deliberately practice in each of these areas, you&amp;rsquo;ll slowly progress from a newly minted Staff engineer to a trusted organizational leader. That said, these won&amp;rsquo;t cover everything you do. At times you&amp;rsquo;ll find your role surprisingly similar to that of an engineering director, and at other times strangely familiar to previous work in your career.&lt;/p>
&lt;p>That vast remit is part of what makes describing these roles challenging. If there&amp;rsquo;s a particular topic you&amp;rsquo;re focused on that&amp;rsquo;s missing, check out the &lt;a href="https://staffeng.com/guides/learning-materials">Additional resources for learning&lt;/a> appendix.&lt;/p></description></item><item><title>Negotiating your offer</title><link>https://staffeng.com/guides/negotiating-the-offer/</link><pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/negotiating-the-offer/</guid><description>&lt;p>Back in 2012, Patrick McKenzie wrote &lt;a href="https://www.kalzumeus.com/2012/01/23/salary-negotiation/">Salary Negotiation&lt;/a>, which has since become the defacto guide to negotiating salaries for software engineers. It&amp;rsquo;s a great piece and a good primer on how you&amp;rsquo;d negotiate any offer, including a Staff-plus offer: if you haven&amp;rsquo;t thought about this topic much before, start there.&lt;/p>
&lt;p>For much of your career, the offer you get is generated in a relatively formulaic way. Maybe they have a compensation calculator, or maybe they base it off your previous compensation, but it&amp;rsquo;s the company&amp;rsquo;s system driving the numbers. However, there is a threshold where offer negotiations shift, and companies are willing to engage in a bespoke offer rather than a system-driven offer, but
you&amp;rsquo;re expected to somehow intuit that you&amp;rsquo;ve crossed the threshold&amp;ndash;no one will ever tell you.&lt;/p>
&lt;p>This sort of bespoke offer &lt;em>starts&lt;/em> with more flexibility around compensation, and in particular more flexibility around the equity
component of your offer.
That said, it&amp;rsquo;s more than just the raw compensation. It&amp;rsquo;s also about other aspects of the offer that the company doesn&amp;rsquo;t generally have flexibility around but is willing to make private exceptions around for senior leaders.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;ul>
&lt;li>Their standard contract might give them three months to exercise vested equity after leaving, but they might be willing to extend a Distinguished engineer&amp;rsquo;s exercise window to five years.&lt;/li>
&lt;li>They might not operationally be prepared to support early exercise for everyone but might be willing to make an exception to close a Sr Staff engineer offer.&lt;/li>
&lt;li>They might be willing to offer a deferred compensation plan to support a tax-advantaged payout schedule (this is mostly a thing at public companies).&lt;/li>
&lt;li>They may be open to additional vacation days if they&amp;rsquo;re using metered, as opposed to unlimited, vacation.&lt;/li>
&lt;li>They may support flexibility around work-from-home, working hours, or incorporating in a state or country they don&amp;rsquo;t currently support employing folks in.&lt;/li>
&lt;/ul>
&lt;p>It can be hard to know if a given role at a given company is over the threshold, and it&amp;rsquo;s hard to ask the other Staff-plus folks already at the company because it&amp;rsquo;s likely they didn&amp;rsquo;t negotiate these aspects (perhaps because they were promoted from within and never given the opportunity). As a rule of thumb, if a company has more than twenty and fewer than five hundred employees, it&amp;rsquo;s pretty unlikely they are going to do much custom work for you unless you&amp;rsquo;re coming into a quasi-executive role&amp;ndash;they simply don&amp;rsquo;t have the operational ability to do so. However, if a company has thousands of folks but only a dozen at your level, it&amp;rsquo;s fairly likely they&amp;rsquo;re open to negotiating bespoke terms.&lt;/p>
&lt;p>It&amp;rsquo;s important to be strategic about what you negotiate for. If you hold firm on First Class flights for all your business travel, you &lt;em>might&lt;/em> get it, but it&amp;rsquo;ll probably also send a message about your priorities that the company doesn&amp;rsquo;t like.&lt;/p>
&lt;p>Whatever you attempt to negotiate, take the time to frame your request in a narrative of why it&amp;rsquo;s important for you. For example, I worked with one senior candidate who framed their request for an extended exercise window in the context of having just bought a house and recently exercising their previous company&amp;rsquo;s equity after leaving. That&amp;rsquo;s a lot more palatable than just asking for more cash compensation. The right narrative gets the negotiation done and does it without generating a negative signal about your motivations.&lt;/p></description></item><item><title>Getting the title where you are</title><link>https://staffeng.com/guides/getting-the-title-where-you-are/</link><pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/getting-the-title-where-you-are/</guid><description>&lt;blockquote>
&lt;p>The best advice I&amp;rsquo;ve heard is that often reaching Staff is a combination of luck, timing, and work.
- &lt;a href="https://staffeng.com/stories/bert-fan">Bert Fan&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>Most technology companies have a &amp;ldquo;career level,&amp;rdquo; which is intended to be the highest level that most folks achieve. Senior engineer is the career level at most companies. While you might get let go for not moving from entry-level engineer to mid-level engineer quickly enough,
most companies have no expectation that you&amp;rsquo;ll ever go from Senior to Staff.
Six years at mid-level? Ah, that&amp;rsquo;s a problem.
Twenty years at Senior? Sure, that&amp;rsquo;s fine.&lt;/p>
&lt;p>More than the expectation of progress going away, companies&amp;rsquo; promotion systems
will often impede your further progress once you attain the career level.
Sometimes the folks who already have Staff engineer titles are protective
of diluting their prestige.
In other cases, organizations may be wary of having multiple Staff engineers on a single team
due to team health or budgetary concerns.
However, I think the strongest source of friction is that
the nature of the job changes. A Staff engineer isn&amp;rsquo;t a better Senior engineer,
but someone who&amp;rsquo;s moved into fulfilling one of the &lt;a href="https://staffeng.com/guides/staff-archetypes">Staff archetypes&lt;/a>.&lt;/p>
&lt;p>Even after you&amp;rsquo;ve developed the prerequisite skills to become a Staff engineer, there will still be one last hurdle: getting your company to grant you the Staff title. For some, this process is a relative non-event, perhaps taking one or two cycles longer than anticipated but ultimately succeeding, and for others, it may not happen at all at their current company. About two-thirds of the Staff engineers I surveyed attained their title as a promotion at the company they were already working at, and the remaining third changed companies to attain the title.&lt;/p>
&lt;p>If pursuing that sort of role &lt;em>is&lt;/em> your goal, then take the promotion to your career level as an opportunity to reset your approach to navigating your career. From that point onward, there is no standard path to follow. The promotion and performance system will no longer be designed around attaining a timely promotion and may, at times, take on the feel of gatekeeping.&lt;/p>
&lt;p>To go further, &lt;em>you&lt;/em> will have to take more deliberate control of your progression, and this chapter shares the tools that have worked for folks who&amp;rsquo;ve made the progression ahead of you.&lt;/p>
&lt;h2 id="finding-your-trail">Finding your trail&lt;/h2>
&lt;p>If you&amp;rsquo;ve been relying on your manager to steer your career up to this point, the transition to a self-directed career can feel rather abrupt.
There are many books about &lt;a href="https://www.learninpublic.org/">managing your software career&lt;/a>,
but most focus from your first job until you reach Senior engineer.
Few focus on managing your career beyond the Senior title,
which is where this chapter focuses:&lt;/p>
&lt;ul>
&lt;li>Your &lt;strong>&lt;a href="https://staffeng.com/guides/promo-packets">promotion packet&lt;/a>&lt;/strong> is your foundational tool to demystify the Staff promotion, prioritize the right personal development to ensure you get there and activate your internal sponsors and network in support of your progression&lt;/li>
&lt;li>There is a widespread belief that moving into a Staff-plus role requires successfully completing a &lt;strong>&lt;a href="https://staffeng.com/guides/staff-projects">Staff project&lt;/a>&lt;/strong>. This section discusses the reality that most Staff engineers &lt;em>do not&lt;/em> have a Staff project but also describes how to approach one if you&amp;rsquo;re at a company that does require them&lt;/li>
&lt;li>A frequent complaint from engineers is that they&amp;rsquo;re not &amp;ldquo;in the room&amp;rdquo; where decisions happen, and they&amp;rsquo;re usually right: there is a room, and they&amp;rsquo;re not in it. What&amp;rsquo;s less frequently acknowledged is that you&amp;rsquo;re probably not in the room for a good reason. This section describes &lt;strong>&lt;a href="https://staffeng.com/guides/getting-in-the-room">how to get into the room, and also how to stay there&lt;/a>&lt;/strong>&lt;/li>
&lt;li>Finally, you won&amp;rsquo;t get promoted if your company&amp;rsquo;s leadership doesn&amp;rsquo;t know who you are. How do you &lt;strong>&lt;a href="https://staffeng.com/guides/being-visible">become visible internally&lt;/a>&lt;/strong> without hogging all the oxygen?&lt;/li>
&lt;/ul>
&lt;p>Apply these techniques consistently, and you&amp;rsquo;ll be on the way towards a Staff title, although even the best-laid plans falter &lt;a href="https://staffeng.com/guides/deciding-to-switch">if you&amp;rsquo;re conducting them at the wrong company&lt;/a>.&lt;/p>
&lt;h2 id="opportunity-is-unevenly-distributed">Opportunity is unevenly distributed&lt;/h2>
&lt;p>One inconvenient reality you&amp;rsquo;ll encounter in pursuit of a Staff role is that
opportunity at any given company is unevenly distributed.
If your company leadership views infrastructure engineering as inherently
&amp;ldquo;more complex&amp;rdquo; or &amp;ldquo;more leveraged&amp;rdquo; than product engineering, then
opportunity will consolidate within infrastructure teams.
If you work in an organization that emphasizes shipping features,
then it will be easier to be rewarded for fixing an outage you cause
than preventing future outages.
Your work will be more visible if you work in your company&amp;rsquo;s headquarters than in a &lt;a href="https://lethain.com/how-to-start-distributed-engineering-office/">distributed office&lt;/a>.&lt;/p>
&lt;p>Many companies believe they have a vested interest in pretending opportunity is evenly distributed, even when it clearly isn&amp;rsquo;t.
This makes it hard to have conviction these dynamics exist,
but the trends become clear as you collect more data.&lt;/p>
&lt;p>Once you recognize these challenges, you have to assess how fixable they are and where you want to prioritize your energy.
It&amp;rsquo;s much simpler to align your approach with these unspoken currents rather than reroute the river creating them.
If you choose to address the causes of inequality,
start by finding a senior sponsor who supports the cause.
You can only change a system with sponsorship from within.&lt;/p>
&lt;h2 id="should-you-try-management">Should you try management?&lt;/h2>
&lt;p>Most folks who reach Staff-plus roles &lt;strong>do not&lt;/strong> spend time in engineering management, but some do.
It&amp;rsquo;s easy to view this as a critical, life-changing decision, but that&amp;rsquo;s probably overthinking it a bit.
If you want to give management a try, you should.
Most companies understand that management isn&amp;rsquo;t the right role for everyone and will be glad to let
you rotate back into an engineering role.&lt;/p>
&lt;p>Those that try management gain a broader perspective that helps them even when they
move back into a software engineering role.
This was &lt;a href="https://staffeng.com/stories/dan-na">Dan Na&lt;/a>&amp;rsquo;s experience,&lt;/p>
&lt;blockquote>
&lt;p>I still enjoy both shipping code and running teams, and I think the ability to do both at a high level is critical for long-term engineering success. Charity Majors has a fantastic blog post on this topic that I recommend reading: &amp;ldquo;&lt;a href="https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/">The Engineer/Manager Pendulum&lt;/a>&amp;rdquo;.
Charity argues that &amp;ldquo;manager career path vs engineering career path&amp;rdquo; is a false dichotomy, and taking time to alternate between both roles makes you better at both. This maps to my own experience. I&amp;rsquo;m a better manager because I know how terrible it is to be an IC on a poorly planned project, and I&amp;rsquo;m a better IC because I know how and when to sound an alarm when a project is going poorly.&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://staffeng.com/stories/ritu-vincent">Ritu Vincent&lt;/a> shared a similar perspective,&lt;/p>
&lt;blockquote>
&lt;p>I do &lt;a href="https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/">pendulum&lt;/a> a decent amount because I&amp;rsquo;m interested in so many things on both sides of the career ladder. I&amp;rsquo;m interested in growing people, I really like working with recruiting, I&amp;rsquo;m one of those engineers that actually enjoy interviewing, I like understanding how teams grow. But I also really like writing code, and after I spend some time managing, I want to get back into the code and hack around a little bit.&lt;/p>&lt;/blockquote>
&lt;p>Some folks try management and end up hating it.
&lt;a href="https://staffeng.com/stories/joy-ebertz">Joy Ebertz&lt;/a> didn&amp;rsquo;t care for engineering management much,&lt;/p>
&lt;blockquote>
&lt;p>I actually managed for about a year and a half in the middle of my time at Box and found that I hated it (you can find more about that in my &lt;a href="https://code.likeagirl.io/why-i-left-management-the-engineering-technical-track-vs-management-track-abef5b1d914d">blog post on that topic&lt;/a>). That said, I found that there is actually a lot of overlap between management and staff+ roles in most companies.&lt;/p>&lt;/blockquote>
&lt;p>Even though Joy hated her management experience, she felt it might have helped her longer-term career,&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s possible that if I hadn&amp;rsquo;t taken a meander through management, I would have gotten to Staff sooner. That said, I don&amp;rsquo;t regret doing it, and I learned a lot about how people think, how organizations are run, and how larger projects are prioritized. All of these have continued to help me do my job on the IC track and likely helped me further get promoted to Senior Staff. While I do think it&amp;rsquo;s distinctly possible that it slowed down when I got to Staff, I&amp;rsquo;m actually less sure for the next level - I think there&amp;rsquo;s a real chance I would have hung out at Staff longer without it. All of this is to say that even though I didn&amp;rsquo;t take the most direct route, I still learned a lot that has helped me out long term.&lt;/p>&lt;/blockquote>
&lt;p>The final caveat I&amp;rsquo;d give for someone considering this switch is that
people management is bigger than simply maximizing your trajectory to a Staff engineer role. You&amp;rsquo;ll have a profound impact on the folks you support as a manager, and if you take it on with the wrong motivations, you&amp;rsquo;ll regret the experience, but not nearly as much as your team will. If you&amp;rsquo;re motivated to help your team grow and succeed, then go ahead and do it; if you&amp;rsquo;re only doing it for yourself, then don&amp;rsquo;t.&lt;/p>
&lt;h2 id="a-semi-permeable-boundary">A semi-permeable boundary&lt;/h2>
&lt;p>As a final caveat, Staff-plus titles are leadership positions. It&amp;rsquo;s uniquely challenging to gain a leadership position if the existing leadership team doesn&amp;rsquo;t identify with you as a potential member. What that means is, unfortunately, folks with the privilege of &lt;em>seeming&lt;/em> &lt;em>like&lt;/em> they are already part of the existing leadership team have a much easier time making the transition.&lt;/p>
&lt;p>If you read through this chapter and become increasingly frustrated that you&amp;rsquo;re &lt;em>already&lt;/em> doing everything here, then it&amp;rsquo;s possible that you&amp;rsquo;re experiencing that structural disadvantage. Roughly half the women I spoke with had to change companies to attain the Staff title, whereas promotion friction come up less frequently during discussions with men.&lt;/p>
&lt;p>Don&amp;rsquo;t ignore those experiences&amp;ndash;they&amp;rsquo;re real and many folks feel stymied by them&amp;ndash;but also take hope that there are many successful role models out there regardless of how you identify and how you want to plot your course towards Staff engineer.&lt;/p></description></item><item><title>Finding the right company</title><link>https://staffeng.com/guides/finding-the-right-company/</link><pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/finding-the-right-company/</guid><description>&lt;p>There are only a few magic spells to attain a Staff-plus role: negotiate for the title while switching roles or find a supportive environment to “bake in place” while building your internal credibility with an empowered sponsor who’ll advocate for you. The most important reagent in both spells is picking the right company to perform them at.&lt;/p>
&lt;p>The good news if you’re applying to a new company is that while you might invest &lt;em>weeks&lt;/em> of energy into determining if you can get a Staff role there, you won’t need to invest &lt;em>years&lt;/em>. On the other hand, if you’re looking for a company to join and grow within, you’re embarking on a years-long journey into an unknown organization. This is a daunting decision to make, and picking the right company for &lt;em>you&lt;/em> will have a considerable impact on whether you attain a Staff-plus role.&lt;/p>
&lt;h2 id="find-a-place-that-disproportionately-values-you">Find a place that disproportionately values you&lt;/h2>
&lt;p>If career velocity is your aim, then join a company that, for whatever reason, disproportionately values what you’re good at. For example, Fastly valued &lt;a href="https://staffeng.com/stories/keavy-mcminn">Keavy’s API design experience&lt;/a>, and Stripe valued &lt;a href="https://staffeng.com/stories/dmitry-petrashko">Dmitry’s work on compilers&lt;/a>. If there’s a gap matching your particular shape that’s limiting their success, your impact on the company will be uniquely high.&lt;/p>
&lt;p>Well-run organizations value you for what you’re good at. Less well-run companies value you for your identity. For example, a culture that views aggression as leadership would indeed promote and center the most aggressive folks, but to their culture’s and team’s detriment. Sometimes you’ll find a company that net values you appropriately because it values your incidentals without valuing the contributions that you consider to be valuable; that seems like it’ll work out, but generally speaking, it’s a recipe for frustration.&lt;/p>
&lt;h2 id="meritocrats-and-proceduralists">Meritocrats and Proceduralists&lt;/h2>
&lt;p>When you’re trying to identify a company to make the Staff transition to, there are a number of company values to consider in your decision. One that’s particularly important is understanding if the company’s leadership fundamentally subscribes to an exception-heavy “meritocratic” view of the world or a consistency-heavy “proceduralist” view. Few companies exist exclusively at one end of this continuum, but most slant heavily in one direction.&lt;/p>
&lt;p>Of course, folks won’t describe themselves in these terms. The first style would have called themselves a meritocracy a few years ago. Now that the term has fallen out of favor, they’d avoid it, but their core beliefs remain intact. This style is particularly common in Silicon Valley, is heavily exception-driven, and consolidates its efforts feting a small cadre of treasured individuals. Generally, in these companies, you’re going to be very successful if you pattern match with whatever they believe high potential looks like. You’re likely in for a rough ride if you don’t.&lt;/p>
&lt;p>Another style of company you’ll find out there believes that consistency drives fairness. They’re the sort that &lt;a href="https://lethain.com/work-policy-not-exceptions/">work the policy rather than the exceptions&lt;/a>: they design the clock, set it in motion, watch it tick, and make occasional repairs. These companies tend to be more structure-driven and less intuition-driven, which can create wider access to opportunity for more folks, but they can also be rigid bureaucracies who look smugly on while their machinery grinds an individual down.&lt;/p>
&lt;p>Inevitably, both meritocrats and proceduralists view their world-view as a moral position and depending on who you are and who the company’s leadership is, you’ll have a radically different experience.&lt;/p>
&lt;p>Some ways to explore during your interview process to help distinguish these mindsets:&lt;/p>
&lt;ul>
&lt;li>Companies with rigid compensation bands and who &lt;em>actually stick to them&lt;/em> tend to be run by Proceduralists. Those that willingly eschew their bands are Meritocrats.&lt;/li>
&lt;li>Companies that create one-off roles for individuals to get them on board tend to be run by Meritocrats. Those that hire to their planned roles are Proceduralists.&lt;/li>
&lt;li>Companies with ad-hoc or unstructured interview processes looking to get your “feel,” particularly for senior roles, tend to be run by Meritocrats. More structure means Proceduralists.&lt;/li>
&lt;li>Companies that perform ad-hoc conjurations of new, rubric-less interviews tend to be run by Meritocrats. Those that evaluate you rigidly, even if they don&amp;rsquo;t let you shine, tend to be Proceduralists.&lt;/li>
&lt;/ul>
&lt;p>Neither Meritocratic nor Proceduralist companies have inherently better odds of propelling you into a Staff-plus role. Rather it’ll depend on your identity and the identities of folks in a company’s leadership roles. Depending on how those pieces align, you can estimate the level of support and friction you’ll encounter pursuing a Staff-plus role.&lt;/p>
&lt;h2 id="archetypes">Archetypes&lt;/h2>
&lt;p>Most companies only hire one or two of &lt;a href="https://staffeng.com/guides/staff-archetypes">the Staff archetypes&lt;/a>, even though they all use the same titles to describe the role they’re hiring for. If you’re trying to figure out a given company’s preferences, it’s most effective to reach out to some of their existing Staff-plus engineers and get a sense of the work they do. Most companies don’t deliberately think about the sort of Staff engineers they support, so asking directly rarely works as well as it should.&lt;/p>
&lt;p>Sufficiently large companies end up with at least some folks operating in each of the archetypes, but it takes a long time until that’s the case, usually &lt;em>after&lt;/em> their engineering organization has scaled to &lt;em>thousands&lt;/em> of engineers.&lt;/p>
&lt;h2 id="growth">Growth&lt;/h2>
&lt;p>If you’ve exclusively worked at fast-growing, successful startups, then it might not cross your mind that there can be a lack of room for additional folks operating in Staff-plus engineering roles, but it’s surprisingly common for slower-growing companies to simply not have the work or the budget for more folks in leadership roles. This is also a common constraint for companies that haven’t reached product-market fit&amp;ndash;there are limited leadership slots when a company needs to remain highly aligned while frequently changing&amp;ndash;with potential exceptions for those that happen to be selling a developer-centric or technical infrastructure product of some sort.&lt;/p>
&lt;p>If you join a fast-growing company, new Staff opportunities will organically open up. In slower-growing companies, you may need to wait for someone to vacate their current role before another becomes available. That’s not to say that you should necessarily join a fast-growing company if you don’t want to&amp;ndash;they’re often stressful and run on perpetually out-of-date processes&amp;ndash;just another factor to consider.&lt;/p>
&lt;h2 id="sponsorship">Sponsorship&lt;/h2>
&lt;p>Getting a Staff-plus offer at a new company requires someone inside that company who believes in you and is willing to push through a fair amount of organizational friction to get you the title. Getting promoted to Staff-plus requires a manager and management chain who believe in you and their willingness to push through &lt;em>even more&lt;/em> friction to get you the title. Without an empowered leader within a company who’s willing to invest their organizational capital in you, you can’t get a leadership role.&lt;/p>
&lt;p>When looking for a company to pursue a Staff-plus role at, a big part of the equation is identifying a company where you’ll have an effective sponsor. Interviewing outside of your current company is often effective at finding you a sponsor: your would-be hiring manager tends to have well-aligned incentives to extend you a Staff offer. Equally important, your time investment is high but still &lt;em>relatively&lt;/em> low compared to working at a company for two years to realize you’re never going to reach your goal.&lt;/p>
&lt;p>The easiest sponsors to find are folks who you’ve worked with before. The &lt;a href="https://en.wikipedia.org/wiki/Flying_wedge">flying wedge&lt;/a> pattern of one senior leader joining a company and then bringing on their previous coworkers is a well-known and justifiably-despised pattern that relies on this built-in referrer-as-sponsor, but it doesn’t have to be toxic if done sparingly.&lt;/p>
&lt;p>This is also where having &lt;a href="https://staffeng.com/guides/network-of-peers">an external presence and network&lt;/a> can greatly aid your search. Folks who’ve seen your presentations, read your blog posts, or nodded in agreement at your tweets are more likely to become your proactive sponsor in the interview process and later during promotion discussions.&lt;/p>
&lt;h2 id="durability">Durability&lt;/h2>
&lt;p>Particularly if you’re earlier in your career and pursuing a promotion into a Staff role, it’s important to consider the company’s durability: will the company even exist five years from now when you’re hoping your work will culminate in a Staff-plus promotion?&lt;/p>
&lt;p>Somewhat more subtly, you also have to consider the longevity of your would-be Staff sponsor. There are some wonderful engineering leaders creating pockets of equitable access to Staff-plus roles, but those pockets can quickly turn into a &lt;a href="https://lethain.com/values-oasis/">Values Oasis&lt;/a> that can’t sustain itself once the sponsoring leader departs the company or changes roles.&lt;/p>
&lt;p>Derisk durability by ensuring you join companies with business models that actually work and work for leaders who are values-aligned with their organization’s senior-most leadership (that way, even if they leave, you’re still aligned with potential sponsors).&lt;/p>
&lt;h2 id="pace">Pace&lt;/h2>
&lt;p>Throughout a &lt;a href="https://lethain.com/forty-year-career/">forty-year career&lt;/a>, there are times when you’re rested and looking for a challenging, enveloping role. There are going to be other times when you’re drained and worn out. You will harm yourself by accepting a role that demands more pace from you than you’re able to presently sustain. When taking on a technical leadership role, it’s particularly important to make sure that the company’s pace expectations align with what you’re able to provide because you’ll be evaluated in part on being a role model for the company’s pace.&lt;/p>
&lt;h2 id="and-everything-else-too">And everything else, too&lt;/h2>
&lt;p>Job searches for leadership roles are much slower than the typical software search, taking months rather than weeks, and trying to rush it rarely works out. As you evaluate whether a company might be an effective place to reach a Staff-plus role, you also have to assess it on everything else that you’d look into in a typical process.&lt;/p>
&lt;p>Dig into your whisper network for toxic issues and individuals. Make sure the mission is something you can stay supportive of and engaged with for years. Search for the folks you’ll be able to learn from during your work. If you find that these Staff criteria are pulling you towards a company that you otherwise have concerns about, the good money is that you’ll regret that decision.&lt;/p></description></item><item><title>Stephen Wan - Staff Engineer at Samsara</title><link>https://staffeng.com/stories/stephen-wan/</link><pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/stephen-wan/</guid><description>&lt;p>&lt;em>This story was recorded in September, 2020. Learn more about Stephen on his &lt;a href="https://github.com/stephen">Github&lt;/a>, &lt;a href="https://twitter.com/stpnwn">Twitter&lt;/a>, and &lt;a href="https://www.linkedin.com/in/stephenwan/">Linkedin&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;strong>Tell us a little about your current role: your title, the company you work at, and generally what sort of work does your team do?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I&amp;rsquo;m a Staff Engineer at &lt;a href="https://www.samsara.com/">Samsara&lt;/a>.&lt;/p>
&lt;p>I started at the company four years ago when the company had been around for a year and we had 50 or so employees. Nowadays, we have over a thousand folks at the company, with engineering teams in the Bay Area, Atlanta, and London.&lt;/p>
&lt;p>When I first started, we had yet to form real teams and our ten or so engineers worked on whatever came up. Nine months in, we had doubled up and formed product teams around a few core offerings at the time. I did a brief stint leading a product team before switching over to our budding infrastructure group to start our frontend infrastructure team. Over the years, I&amp;rsquo;ve gradually shifted down the stack, also taking stretches on our backend and observability systems.&lt;/p>
&lt;p>Today, I work in our Infrastructure &amp;amp; Platform (I&amp;amp;P) group, spending most of my time with the Developer Experience team which builds tools to keep our full-stack development workflow productive.&lt;/p>
&lt;p>&lt;strong>&lt;em>What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Most of our Staff+ engineers are in specialized roles, either in web infrastructure or device firmware. I suppose that puts me in the majority, but the work our Staff engineers do is varied so it&amp;rsquo;s a bit hard to claim being &amp;ldquo;normal&amp;rdquo; in the role.&lt;/p>
&lt;p>When looking at parallels between the IC and management tracks, Staff is considered a director-equivalent role. Staff engineers have the option to participate in many processes that are typically reserved for managers. We&amp;rsquo;re invited to the cross-eng director&amp;rsquo;s meeting and, at least in I&amp;amp;P, we&amp;rsquo;re involved in roadmap planning and management syncs. Recently, we&amp;rsquo;ve brought in Staff engineers to participate in some promotion calibration meetings.&lt;/p>
&lt;p>The level of access gives some sense of having a foot planted on both sides. The role is different enough from Senior levels that it&amp;rsquo;s not quite as much an &amp;ldquo;individual&amp;rdquo; software-contributing role, but it&amp;rsquo;s also quite different from our more people-focused management track.&lt;/p>
&lt;p>Out of &lt;a href="https://staffeng.com/guides/staff-archetypes">Will&amp;rsquo;s Staff archetypes&lt;/a>, I think my role fits somewhere between the Solver and the Tech Lead. Part of the fun for me has been jumping into a different role every 6-12 months, diving into a different part of the system with a different group of folks.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you spend your time day-to-day?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>It&amp;rsquo;s pretty varied by the day. Right now, I try to make Tuesdays and Thursdays meeting days so that I have dedicated focus time in the rest of the week.&lt;/p>
&lt;p>My meeting days typically include 1:1s with folks I&amp;rsquo;m working closely with as well as staff meetings. I&amp;rsquo;ll also spend some time pairing with individuals on code and design review or more open-ended design discussions.&lt;/p>
&lt;p>On other days my focus time is spent in investigation mode, trying to suss out both current issues and paving foundation for future projects. What systems need investment? How have our teams been executing? What upcoming changes should our group prepare for? This time is spent &lt;a href="https://basecamp.com/shapeup/1.1-chapter-02">shaping&lt;/a> in a broader sense.&lt;/p>
&lt;p>Looking back, this focus is distinct from my role prior to Staff. Instead of executing at the individual level working directly on a project or team, the time is centered around a wider lens and over a longer term.&lt;/p>
&lt;p>Notably, it&amp;rsquo;s hard for me to guarantee anything longer than a day at a time spent writing code. I don&amp;rsquo;t get counted when we consider engineering roadmap bandwidth, though I do try to reserve at least a day a week for writing some code.&lt;/p>
&lt;p>At the micro-level, I keep a document called &amp;ldquo;what is stephen doing?&amp;rdquo; that drives my work on the hour-by-hour granularity. There&amp;rsquo;s one main section for the current week and some reminders for future weeks. Every Monday, I start over - unstarted items from the previous week get deleted and few survive to the next week.&lt;/p>
&lt;p>&lt;img src="https://staffeng.com/stephen-wan/what-is-stephen-doing.png" alt="what is stephen doing?">&lt;/p>
&lt;p>That delete-by-default intention ends up helping me keep focused and not feel too strewn out. For a long time, I tried to groom a back-burner list of things to do but it mostly had the effect of stressing me out. Most back-burner items would end up deleted and incomplete anyways, a month later.&lt;/p>
&lt;p>&lt;strong>&lt;em>Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for? Can you share a story of influencing your organization?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Yes. The specific technology or methodology changes quarter to quarter, but advocacy ends up being a big part of my time. On the smaller end, I&amp;rsquo;ve helped write culture documents about how we try to approach design documents or code review or code ownership rules.&lt;/p>
&lt;p>For a bigger example, I spent a couple quarters helping our product teams adopt Service Level Objectives (SLOs).&lt;/p>
&lt;p>At the time, we had a fairly established set of features and customer base, but our measurements for uptime were still primitive. In outages, it was hard to get a sense for customer impact because we lacked the distinctions and definitions to communicate (&amp;ldquo;What percent of customers are affected? Is it both reads and writes? Is this an outage or an existing bug?&amp;rdquo;), even though we had plenty of metrics and dashboards to look at.&lt;/p>
&lt;p>Though introducing SLOs certainly required new engineering work, I&amp;rsquo;d guess that the majority of my time on the project was spent writing documentation, talking to people, and doing consultancy-style work with teams. We wanted folks to be able to understand reliability objectives end-to-end: how to define the objective, how to talk about it in outages, how to measure it in systems, how to keep track of it over time, how to react when it becomes unhealthy. That level of depth ends up needing a lot of messaging and massaging to sink in.&lt;/p>
&lt;p>As with most of our big &amp;ldquo;migrations,&amp;rdquo; getting many teams to adopt SLOs came iteratively. We first trialed our new tools with a single team with high-touch support before figuring out the widespread messaging for the rest of the org. I think a key role for me was being able to both talk with engineers about the new tools at a concrete, how-do-I-use-this level, while also convincing director-level folks that it would be worth their effort to speak in SLOs.&lt;/p>
&lt;p>This same pattern has held true over most of my projects as a Staff engineer. My role ends up being in brokering deals between groups to sell a change across the organization.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you keep in touch with how things really work as you spend less time on hands-on development?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I put in some time programming and doing code review each week, even if it&amp;rsquo;s just to put up a small bug fix. I try to put in time to participate in the same day-to-day rituals other ICs go through - code review, navigating docs, outage situations, etc.&lt;/p>
&lt;p>Of course, that&amp;rsquo;s not enough to keep a high-fidelity model in my head - there&amp;rsquo;s just too much happening across too many teams to keep track of. The rest is a lot of intentionally seeking out feedback and hearing first-hand experiences from others.&lt;/p>
&lt;p>I&amp;rsquo;ve also tried to help bake feedback loops into our organization. I helped get us started on doing half-year dev team surveys with a mix of questions about both our technical systems and engineering culture. The responses from those surveys have been super helpful in keeping a pulse on how the organization is feeling from the ground up.&lt;/p>
&lt;p>&lt;strong>&lt;em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Yes. I&amp;rsquo;ve tried to be intentional about giving away my state, stepping back, and letting others build up expertise.&lt;/p>
&lt;p>At the organizational level, I think there are ways to structurally sponsor others, pushing other engineers into taking positions as subject-matter experts. As an example, I worked on introducing a new distributed tracing system late last year. Our core web application is powered by a number of different backend systems and over years, the data flows between these systems became trickier to understand and page performance suffered. We needed a tool to dig ourselves out.&lt;/p>
&lt;p>I had worked on early iterations of our performance tools before and knowledge of those systems was largely stuck in my head. In the new project, a concrete goal for me was to bring more folks up to speed. It wasn&amp;rsquo;t enough to lay a technical foundation in the systems design: my teammates on the project would have to own that area of expertise for years to come.&lt;/p>
&lt;p>Practically, that meant spending more of my time discussing and pairing with the soon-to-be tracing owners and much less time directly contributing code or design. When we beta tested with a product team, I&amp;rsquo;d push another engineer to work on a sales pitch, or figure out the demo, or get the team onboarded.&lt;/p>
&lt;p>Today, the tracing system is widely used and fully managed by our SRE and Observability group. The folks I worked with at the time are now the go-to group for performance questions.&lt;/p>
&lt;p>On a more personal level, there are always small spots where I can help nudge other folks into the spotlight. Sponsorship opportunities can start small. Especially if I&amp;rsquo;m working with someone earlier in their career, I might suggest that they take on more unknown chunks of a new system design, or write a draft for new documentation, or demo our results at our group-wide meeting.&lt;/p>
&lt;p>That small push might be all someone needs to get going, but other times I think it flows nicely into an opportunity to mentor and pair as well. Some things (like building up a slide deck for the first time) can feel intractable until you do them a couple times. There, both the sponsorship and mentorship sides end up feeling impactful.&lt;/p>
&lt;p>It also feels like there&amp;rsquo;s some tension to get to the right spot. We want to grow folks into positions where they can own more and make systems decisions, but we also want there to be alignment in how those decisions get made and where we&amp;rsquo;re trying to go. It&amp;rsquo;s hard work - it ends up taking a lot of attention to not gatekeep but get to a satisfying result.&lt;/p>
&lt;p>&lt;strong>&lt;em>You first got the title Staff engineer at your current company. Were you hired as a Staff engineer? If not, what was the process of getting promoted to Staff?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>When I joined the company, we didn&amp;rsquo;t have IC titles. I was leveled into the Staff role when we introduced leveling in early 2019.&lt;/p>
&lt;p>I think I had a big advantage from being an early engineer on the team. That history was huge in giving me context on our past decisions - knowing what pitfalls we had already run into and helping land new projects into a good place.&lt;/p>
&lt;p>At every stage of growth, we would add more layers of people and management and there&amp;rsquo;d be a &amp;ldquo;relearning&amp;rdquo; period for how the organization worked. Over time, teams would narrow in scope and only be able to see a smaller part of the puzzle. Having a big part of the engineering history in my head not only helped me connect pieces across those divisions, but also gave me a headstart on keeping personal connections over to parts of the organization I stopped working with directly. That breadth naturally lent itself to being able to figure out what could be most impactful for the org.&lt;/p>
&lt;p>&lt;strong>&lt;em>What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>My background is somewhat less traditional - I studied Electrical Engineering instead of Computer Science and dropped out of school before completing my degree. That gap forced me to be more self-taught in my experience, but also left me with a lot of imposter syndrome. I failed a lot of software interviews early on for not having the right credentials. Early in my career, that imposter feeling made me really want to learn as much as I could to cover up for what I feared I didn&amp;rsquo;t know.&lt;/p>
&lt;p>The summer before I dropped out, I interned at Stripe. I remember, perhaps through rose-tinted glasses, feeling so energized by the engineering culture there: the hyperfocus on customer experience and excitement about building technology to get there. That experience ended up being quite influential to how I wanted a workplace to feel.&lt;/p>
&lt;p>Later when I left school, I started working full-time at a smaller startup where I really didn&amp;rsquo;t know what I was doing. The business meandered a bit during my time there, but I was lucky to have worked closely with thoughtful, senior engineers who had a penchant for mentorship. Working there ended up giving me a lot of flexibility on what I wanted to learn which was good for me but probably bad for the company.&lt;/p>
&lt;p>As a last bit of background, I worked at a computer camp for a couple summers in high school, teaching school-aged kids basic computer literacy. That teaching mindset certainly left me with more empathy for how folks end up understanding and interacting with computer systems.&lt;/p>
&lt;p>By the time I joined Samsara, those experiences gave me a clear sense for how I wanted work to feel - being an early employee gave me the influence to shape the way there.&lt;/p>
&lt;p>The final piece of the puzzle was my first three years at Samsara. I was fortunate enough to get to work with so many thoughtful collaborators in that time. I can easily trace back many of the working habits, mental models, and mannerisms that I have today to those individuals. I can&amp;rsquo;t imagine that I&amp;rsquo;d be in this spot in my career without their influence.&lt;/p>
&lt;p>&lt;strong>&lt;em>There is a popular idea that becoming a Staff engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>No, I didn&amp;rsquo;t have a designated Staff Project. Looking back, there were projects over the years that perhaps accumulated into the equivalent of a big Staff project, but it&amp;rsquo;s not something we explicitly talked about in leveling.&lt;/p>
&lt;p>As a concept, I&amp;rsquo;m skeptical of that kind of singularly focused project and worry that they can put folks into a &lt;a href="https://lethain.com/doing-it-harder-and-hero-programming/">hero mindset&lt;/a> when we really want to value engineers that can build the organization, not carry it. I&amp;rsquo;d be much more excited to see iterative improvement and consistent execution over time: a track record of thoughtful engineering.&lt;/p>
&lt;p>I&amp;rsquo;m happy Samsara seems to agree with that assessment. Our career path document ends up talking much more about that consistent execution over a single large-haul project.&lt;/p>
&lt;p>&lt;strong>&lt;em>What about a piece of advice for someone who has just started as a Staff engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>A couple things come to mind.&lt;/p>
&lt;p>&lt;em>Get comfortable talking a lot&lt;/em>. I think a big step-change between Senior and Staff roles ends up being the focus on people: reconciling competing priorities, clearing up miscommunication, aligning folks on the same page. Even though they typically don&amp;rsquo;t have direct reports, Staff engineers are working in a system of both the technology and the people: the biggest impact is going to come from influencing both.&lt;/p>
&lt;p>&lt;em>Do your best to not get exhausted&lt;/em>. As I transitioned into a Staff role, it felt easy to slip into a mindset where I was responsible for everything going on and had to timeslice my focus over too many things. It took me a while to recognize that this role didn&amp;rsquo;t mean I had to work many times harder to be involved in everything, but instead I needed to direct change through others in the organization. Trust folks, flag issues, and expect them to work it out.&lt;/p>
&lt;p>&lt;strong>&lt;em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Back in 2016, I remember having an initial conversation with my manager about pursuing an IC vs management path. At the time, I still felt early into my professional career and wanted to continue investing in my core technical experience.&lt;/p>
&lt;p>I reevaluated that decision every year or so and ended up coming to the same conclusion - that I wasn&amp;rsquo;t done getting my hands dirty on the technical side. Throughout that time, much of the work I was doing was focused around building development experiences for folks at the company. Those efforts ended up pushing me to do more Staff-like work and I naturally progressed from there.&lt;/p>
&lt;p>&lt;strong>&lt;em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I tend to prize literature that talks about complicated topics in plain English, both fiction and non-fiction.&lt;/p>
&lt;p>I remember reading about novelist &lt;a href="https://en.wikipedia.org/wiki/Haruki_Murakami">Haruki Murakami&lt;/a> writing his first novel in English first, then translating it back to Japanese as a way of shaping the style of his expression. He notes, &amp;ldquo;I could only write in simple, short [English] sentences. Which meant that, however complex and numerous the thoughts running around my head, I couldn&amp;rsquo;t even attempt to set them down as they came. The language had to be simple, my ideas expressed in an easy-to-understand way.&amp;rdquo;&lt;/p>
&lt;p>Writing software is a totally different domain, but it feels like the sentiment fits into some tenet that I really value about communicating: having an understanding in your head is half the battle - being able to express that understanding is just as hard and valuable.&lt;/p>
&lt;p>I love reading blogs and papers that really go in depth in a technical area. A few that I&amp;rsquo;ve come back to over the years include:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://journal.stuffwithstuff.com/category/language/">Bob Nystrom&amp;rsquo;s blog posts&lt;/a> on programming languages&lt;/li>
&lt;li>&lt;a href="https://mrale.ph/">Vyacheslav Egorov&amp;rsquo;s blog&lt;/a> about compilers and V8 internals (Chrome&amp;rsquo;s JS engine)&lt;/li>
&lt;li>&lt;a href="https://brandur.org/articles">Brandur&amp;rsquo;s blog&lt;/a> on various systems topics&lt;/li>
&lt;li>Nelson Elhage&amp;rsquo;s &lt;a href="https://accidentallyquadratic.tumblr.com/">Accidentally Quadratic&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mgba.io/tag/debugging/">Vicki Pfau&amp;rsquo;s Blog&lt;/a> on developing a GameBoy Advance emulator&lt;/li>
&lt;li>&lt;a href="https://fail0verflow.com/blog/">fail0overflow&amp;rsquo;s blog&lt;/a> and talks about console architecture and exploits&lt;/li>
&lt;li>&lt;a href="http://halo.bungie.net/inside/publications.aspx">Bungie&amp;rsquo;s engineering publications&lt;/a> on building and producing the original Halo games&lt;/li>
&lt;/ul>
&lt;p>As an anecdote, early in my career I had a budding interest in programming language internals and picked up a compilers textbook (&amp;ldquo;the Dragon book&amp;rdquo;) to learn from. It&amp;rsquo;s a pretty hard book to get through. Maybe it&amp;rsquo;s reasonable to get through it with a professor and a few classmates, but it was truly difficult for me to get a working mental model from a reading. Later, I found Bob Nystrom&amp;rsquo;s &lt;a href="https://craftinginterpreters.com/">Crafting Interpreters&lt;/a> which takes a much more practical approach and it felt like a huge breath of fresh air.&lt;/p>
&lt;p>I&amp;rsquo;m also a big fan of reading codebases. Early on in my career, I recall debugging a tricky React problem where some callback wasn’t happening in the order I expected. Reading the docs didn’t help. Putting in print statements wasn’t enough. My mentor at the time got me to read some of the source code to better understand what was going on and that really blew my mind a little bit. I got a bug fix in but also a much stronger understanding of how React worked.&lt;/p>
&lt;p>That was really a turning point. Being able to quickly dive in and jump through unfamiliar code has really felt like a superpower and gives me a larger pattern matching library for different approaches to software design. A recent favorite has been reading through the design and code of &lt;a href="https://github.com/evanw/esbuild/blob/master/docs/architecture.md">esbuild&lt;/a>, a super fast javascript bundler.&lt;/p>
&lt;p>Finally, some of my favorite recent non-fiction reads in the last couple years have been on the &lt;a href="https://www.amazon.com/BART-Dramatic-History-Transit-System/dp/1597143707">history of BART&lt;/a>, the &lt;a href="https://press.stripe.com/#the-dream-machine">history of Xerox PARC&lt;/a>, and &lt;a href="https://www.amazon.com/Making-Common-Policy-Institutional-Studies/dp/0822955105">an overview of modern Japanese culture&lt;/a>. In each niche, I&amp;rsquo;ve found the history and context fascinating as seemingly small, independent events and decisions have culminated into ways the world works today.&lt;/p></description></item><item><title>Deciding to switch companies</title><link>https://staffeng.com/guides/deciding-to-switch/</link><pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/deciding-to-switch/</guid><description>&lt;blockquote>
&lt;p>I was hired at Fastly as a Principal engineer. So, to be honest, for me, the biggest factor was changing companies. The type of work I was doing didn’t dramatically change, but changing companies was the thing that ultimately enabled me to get the title.
- &lt;a href="https://staffeng.com/stories/keavy-mcminn">Keavy McMinn&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>My father was a professor of economics. After he completed his Ph.D. in his late twenties, he started teaching at one university, got tenure at that university, and walked out forty-some years later into retirement. Working in technology, that sounds like a fairytale.&lt;/p>
&lt;p>There are very few software companies with a forty-year track record, and even fewer folks whose &lt;a href="https://lethain.com/forty-year-career/">forty-year career&lt;/a> consisted of one employer. There used to be a meme that many engineers spent either one or four years at each company to maximize their equity grants and then bounced on to the next. If that ever happened, it certainly isn’t common behavior for folks who aspire towards or reach Staff-plus roles.&lt;/p>
&lt;p>Instead, generally, those folks stay and are rewarded for staying at a given company as long as the circumstances support their success. If those circumstances change, they tend to either leave shortly thereafter or spend a while burning out and then leave after exhausting their emotional reservoir.&lt;/p>
&lt;p>It takes years to build the visibility and social credibility to get promoted from a Senior engineer role to a Staff-plus role, which makes it very difficult to walk away if you feel like you’re &lt;em>just&lt;/em> one hump away from the promotion. Leaving, it can feel like, means starting over from scratch.&lt;/p>
&lt;p>Then again, as described by &lt;a href="https://staffeng.com/stories/keavy-mcminn">Keavy McMinn&lt;/a>, it’s common for folks to attain their first Staff-plus title by joining a new company. Even with all your internal credibility, sometimes leaving is the most effective path forward.&lt;/p>
&lt;p>What’s the right decision for you?&lt;/p>
&lt;hr>
&lt;p>Before going further, I want to recognize two very different job-switching experiences: one of privileged flexibility and another of rigid constraints. Your residency might depend on a work-sponsored visa. You might be supporting an extended family. You might be constrained to a geographical area with few employers. This advice focuses on the former circumstances, which are more common circumstances for someone who’s deep enough into a technology career to pursue a Staff role. You should absolutely discount it to the extent this doesn’t reflect your circumstances.&lt;/p>
&lt;h2 id="why-leaving-works">Why leaving works&lt;/h2>
&lt;p>The company that knows your strengths the best is your current company, and they are the company most likely to give you a Staff-plus role. However, actually awarding the role depends on so many circumstantial factors that this isn’t how it works out in practice.&lt;/p>
&lt;p>If your current team is very senior, it may be hard to justify your impact at the Staff engineer level because it’s being attributed to your peers. Your manager might have a limited budget that doesn’t have room for another Staff engineer. You might lack an internal sponsor. There simply might not be the need for an additional Staff engineer at your company. Any of these can mean that while you ought to be promoted, you won&amp;rsquo;t be at your current company.&lt;/p>
&lt;p>Conversely, when you interview for new roles, you can keep interviewing until you find a company that’s able to grant the title.
You can also deliberately choose to interview at earlier stage companies who are likely to
value your experience more highly.
The interview process also brings an automatic sponsor with it&amp;ndash;the hiring manager&amp;ndash;whose incentives will never be more aligned with yours than in the interview process.&lt;/p>
&lt;p>Technical interviews are an inconsistent and unreliable predictor of success, which is bad for the industry and bad for companies, but works in your favor if you’re set on attaining a Staff-plus role and are willing to conduct a broad search. Interviewing creates the opportunity to play “bias arbitrage,” finding a company that disproportionately values &lt;em>you&lt;/em>. That might be a company that values folks with conference speaking visibility, your experience designing APIs, or &lt;a href="https://staffeng.com/stories/dmitry-petrashko">your Ph.D. thesis on compilers&lt;/a>.&lt;/p>
&lt;p>Similarly, sometimes you’ll get into a rut at a company where your reputation is preventing forward progress. Perhaps you’re tagged as “difficult” after flagging inclusion issues. Maybe you embarrassed an influential Director at lunch, and they’re blocking your promotion. A new company lets you leave that baggage behind.&lt;/p>
&lt;hr>
&lt;p>Yeah, of course, it’s always an open question whether you can &lt;em>really&lt;/em> leave anything behind you in the tech industry. It can feel a bit cliquey at times. If you’ve worked in tech hubs, at larger companies, and for more than ten years, then you almost certainly have mutual connections with the folks interviewing you.&lt;/p>
&lt;p>If you have a bad run at a company, maybe your manager was a bully, or maybe you were going through a challenging period in your own life, it can feel like a cloud poisoning your future prospects. That said, much like the interview process in general, references and backchannel reference checks are deeply random. If you need any further evidence of that, look to the serial harassers who continue to get hired job after job at prominent companies.&lt;/p>
&lt;h2 id="things-to-try-before-leaving">Things to try before leaving&lt;/h2>
&lt;p>If you’re planning to leave due to a lack of interest, excitement, support, or opportunity, it’s worthwhile to at least explore the internal waters first. This lets you carry your internal network with you while still getting many of the advantages of switching companies. Depending on your company’s size and growth rate, this might not be an option for you, but there are some folks who switch roles every two-to-three years within the same parent company and find that an effective way to remain engaged and learning.&lt;/p>
&lt;p>On the other hand, if you’re considering leaving due to burnout or exhaustion, it’s sometimes possible to negotiate a paid or unpaid sabbatical where you can take a few months recharging yourself, often in conjunction with switching internal roles. This is more common at larger companies. (In case you were wondering, no, your coworkers taking parental leave are not “on sabbatical” or “on vacation.”)&lt;/p>
&lt;h2 id="leaving-without-a-job">Leaving without a job&lt;/h2>
&lt;p>Speaking of burnout, if you’re &lt;em>particularly&lt;/em> burned out, it’s worth considering leaving your job without another job lined up. There’s a fairly simple checklist to determine if this is a good option for you:&lt;/p>
&lt;ul>
&lt;li>Does your visa support this?&lt;/li>
&lt;li>Are you financially secure for at least a year without working?&lt;/li>
&lt;li>Do you work in a high-density job market remotely, or are you flexible on where your next job is?&lt;/li>
&lt;li>Do you interview well?&lt;/li>
&lt;li>Could you articulate a coherent narrative to someone asking you why you left without a job lined up?&lt;/li>
&lt;li>Are there folks who can provide positive references on your work?&lt;/li>
&lt;/ul>
&lt;p>If all of those are true, I don’t know anyone who &lt;em>regrets&lt;/em> taking a sabbatical. However, bear in mind that it’s only the folks who took six-month-plus sabbaticals
who felt reborn by the experience. Folks taking shorter stints have appreciated them but often come back only partially restored.
If you do take a sabbatical, I highly recommend flushing out your experiences into writing.
Even if you don&amp;rsquo;t share what you&amp;rsquo;ve written, it&amp;rsquo;ll help process the experiences.&lt;/p>
&lt;h2 id="taking-the-plunge">Taking the plunge&lt;/h2>
&lt;p>If you’re almost at the Staff promotion in your current company, there is absolutely another company out there that will give you the Staff title. Whether or not you’ll enjoy working there or be supported after getting there, that’s a lot harder to predetermine. If your internal reputation is damaged or if you’ve been repeatedly on the cusp of promotion but a victim to a moving criteria line, then you should seriously consider switching roles if the title is important to you. At some point, you have to hear what your current company is telling you.&lt;/p>
&lt;p>Conversely, if you’re happy in your current role outside of the title, consider if you can be more intentional about pursuing your promotion rather than leaving. Many folks hit a rut in their promotion path to Staff-plus, and using techniques like the &lt;a href="https://staffeng.com/guides/promo-packets">promotion packet&lt;/a> can help you get unstuck. If you’ve used all the approaches, taken your self-development seriously, and still can’t get there&amp;ndash;it’s probably time to leave.&lt;/p>
&lt;p>That said, it’s easy to overthink these things. Few folks tell their decade-past story of staying at or leaving some job.&lt;/p></description></item><item><title>Being visible</title><link>https://staffeng.com/guides/being-visible/</link><pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/being-visible/</guid><description>&lt;blockquote>
&lt;p>When folks, particularly women and non-binary people, come to me for advice, I think they expect me to talk about how to grow as a technical leader, and are surprised when I say &amp;ldquo;You&amp;rsquo;ve probably already got the technical chops, what you need to do is work on your reputation at the company.&amp;rdquo; For better or for worse, you can&amp;rsquo;t get to Staff without a good reputation.
- &lt;a href="https://staffeng.com/stories/katie-sylor-miller">Katie Sylor-Miller&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://staffeng.com/stories/bert-fan">Bert Fan&lt;/a>&amp;rsquo;s best advice for those trying to reach a Staff-plus role was,
&amp;ldquo;Often reaching Staff is a combination of luck, timing, and work.&amp;rdquo;
Timing is a particular sort of luck, so you can simplify this even further down to just luck and work.&lt;/p>
&lt;p>If you&amp;rsquo;re fortunate, then you won&amp;rsquo;t have to pursue a deliberate path to a Staff-plus role. You&amp;rsquo;re already working on your company&amp;rsquo;s top priorities, have a well-positioned manager who cares about supporting your career and are working from your company&amp;rsquo;s headquarters office. If you&amp;rsquo;re starting with none of those things, getting promoted will be quite a challenge, but don&amp;rsquo;t count yourself out: it&amp;rsquo;s easy to underestimate your own role in getting lucky.&lt;/p>
&lt;p>One of the most effective ways to get luckier is to be more visible within your organization. There are, of course, very quick, very negative ways to increase your visibility, so I&amp;rsquo;ll refine the statement a bit. Your goal is to be known for good things while minimizing the organizational bandwidth you consume to do so.&lt;/p>
&lt;h2 id="why-visibility-matters">Why visibility matters&lt;/h2>
&lt;p>&lt;a href="https://staffeng.com/stories/katie-sylor-miller">Katie Sylor-Miller&lt;/a> describes visibility as a critical piece of getting promoted to Staff,&lt;/p>
&lt;blockquote>
&lt;p>Something I haven&amp;rsquo;t talked about enough is communication and transparency. A big part of being promoted to Staff is making sure that your work is visible, that people know your name and you have a good reputation.&lt;/p>&lt;/blockquote>
&lt;p>Staff-plus roles are &lt;em>leadership&lt;/em> roles, and by recognizing you with such a position, the company is bringing you into its leadership team. The existing members of that team want to be comfortable that they&amp;rsquo;re expanding their ranks with folks they believe in, and they can&amp;rsquo;t believe in you if they don&amp;rsquo;t know you.&lt;/p>
&lt;p>If you&amp;rsquo;re operating without much visibility within your company, this may likely come across as cliquey or gatekeeping behavior. Conversely, if you are well-known internally, this may feel like the necessary cost for maintaining a consistent set of expectations and criteria for folks taking on leadership roles &amp;ndash; how could you maintain consistency if you are unfamiliar with their work?&lt;/p>
&lt;hr>
&lt;p>It&amp;rsquo;s interesting to briefly reflect on how inclusive organizations mitigate the negative gatekeeping aspects of validating folks as appropriate additions to their leadership team. The answer is that they design mechanisms to ensure the &lt;em>full&lt;/em> swath of potential leaders get exposure to the folks who will evaluate them for leadership roles. Conversely, less inclusive organizations inadvertently center access on folks who most aggressively self-advertise.&lt;/p>
&lt;h2 id="internal-visibility">Internal visibility&lt;/h2>
&lt;p>The single best way to create internal visibility is to &lt;a href="https://staffeng.com/guides/work-on-what-matters">work on the things that matter&lt;/a> to your company and company leadership. This path is also the most aligned with how a well-managed company will evaluate your contribution.&lt;/p>
&lt;p>Sometimes that isn&amp;rsquo;t enough, though, and some other strategies are:&lt;/p>
&lt;ul>
&lt;li>Write and distribute more long-lived documents, like architecture docs or technical specification&lt;/li>
&lt;li>Lead (and, to a lesser extent, participate in) company forums like architecture reviews, company all hands, and learning circles&lt;/li>
&lt;li>Be a cheerleader for your team&amp;rsquo;s and peers&amp;rsquo; work on Slack&lt;/li>
&lt;li>You can also cheerlead via email instead of Slack&lt;/li>
&lt;li>&lt;a href="https://lethain.com/weekly-updates/">Share weekly notes&lt;/a> of your work to your team and stakeholders in a way that other folks can get access to your notes if they&amp;rsquo;re interested&lt;/li>
&lt;li>Contribute to your company&amp;rsquo;s blog&lt;/li>
&lt;li>Attend, or potentially even host, office hours for your team or org&lt;/li>
&lt;/ul>
&lt;p>Find the right mix of activities that leverage your strengths, aren&amp;rsquo;t already overburdened with volume, and feel authentic to you. If you&amp;rsquo;ve never communicated about your work, it may feel awkward to self-promote. You never want to wholly lose that sense of awkwardness&amp;ndash;restraint helps&amp;ndash;but you will have to get comfortable with some of it.&lt;/p>
&lt;h2 id="executive-visibility">Executive visibility&lt;/h2>
&lt;p>To be promoted to a leadership role, the most important kind of internal visibility is executive visibility.
Using the &lt;a href="https://staffeng.com/guides/promo-packets">promotion packet&lt;/a>, you will create visibility with your manager,
but it&amp;rsquo;s helpful to go further.
It&amp;rsquo;s particularly valuable to find opportunities to build a relationship with your manager&amp;rsquo;s manager,
but all positive, visibility at that layer will be helpful to you.&lt;/p>
&lt;p>These are the folks who tend to be in the room that approves promotions into Staff-plus roles,
and they rarely support folks whose work they don&amp;rsquo;t know.&lt;/p>
&lt;h2 id="external-visibility">External visibility&lt;/h2>
&lt;p>It&amp;rsquo;s helpful to complement your internal visibility work with external visibility work. There are many successful Staff-plus engineers with no external presence, but &lt;a href="https://staffeng.com/guides/network-of-peers">many find external visibility contributes to their career&lt;/a>.&lt;/p>
&lt;p>Compared to an exclusively internal focus, one advantage of building an external presence is that there&amp;rsquo;s a lot more room to create a niche and name for yourself. Internal efforts often end up competing for attention with your peers in a way that external efforts simply don&amp;rsquo;t.&lt;/p>
&lt;p>In terms of how to create this sort of visibility for yourself and your work, it could be
giving a conference talk like &lt;a href="https://staffeng.com/stories/keavy-mcminn">Keavy McMinn&lt;/a> or &lt;a href="https://staffeng.com/stories/dan-na">Dan Na&lt;/a>, going on a podcast like &lt;a href="https://staffeng.com/stories/michelle-bu">Michelle Bu&lt;/a>, turning a problem into a website and book like &lt;a href="https://staffeng.com/stories/katie-sylor-miller">Katie Sylor-Miller&lt;/a>&amp;rsquo;s &lt;em>&lt;a href="https://ohshitgit.com">ohshitgit&lt;/a>&lt;/em>, or creating a mailing list like Stephen Whitworth&amp;rsquo;s &lt;em>&lt;a href="https://highgrowthengineering.substack.com">High Growth Engineering&lt;/a>&lt;/em>.&lt;/p>
&lt;h2 id="should-you-focus-on-visibility">Should &lt;em>you&lt;/em> focus on visibility?&lt;/h2>
&lt;p>You can always have more visibility within your organization, but at some point, increasing your visibility is likely reducing the opportunities for others to create visibility for themselves. Internal visibility is not strictly zero-sum, but it&amp;rsquo;s constrained by the attention of the folks you want to see your work.&lt;/p>
&lt;p>My advice would be to use the &lt;a href="https://staffeng.com/guides/promo-packets">promotion packet exercise&lt;/a> to identify if the lack of visibility is likely to hold you back in the promotion process. If so, work to clear that threshold, but not much further. Visibility is a transient currency. Learning and developing yourself is a permanent one; focus on the latter once you&amp;rsquo;ve done the minimum to clear the former&amp;rsquo;s cliff.&lt;/p></description></item><item><title>About StaffEng</title><link>https://staffeng.com/about/</link><pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/about/</guid><description>&lt;p>&lt;em>Questions? Reach out to &lt;a href="https://twitter.com/lethain">@lethain&lt;/a> on Twitter.&lt;/em>&lt;/p>
&lt;hr>
&lt;h3 id="why">Why?&lt;/h3>
&lt;p>At most technology companies, you&amp;rsquo;ll reach Senior Software Engineer—the &lt;a href="https://lethain.com/mailbag-beyond-career-level/">career level&lt;/a>—in five to eight years. At that point, your path branches, and you have the opportunity to pursue engineering management or continue down the path of technical excellence to become a Staff Engineer.&lt;/p>
&lt;p>Over the past few years we&amp;rsquo;ve seen a flurry of books unlocking the engineering manager career path, like Camille Fournier&amp;rsquo;s &lt;a href="https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth/dp/1491973897">&lt;em>The Manager&amp;rsquo;s Path&lt;/em>&lt;/a>, Julie Zhuo&amp;rsquo;s &lt;a href="https://www.amazon.com/Making-Manager-What-Everyone-Looks/dp/0735219567/">&lt;em>The Making of a Manager&lt;/em>&lt;/a>, and my own &lt;a href="https://www.amazon.com/Elegant-Puzzle-Systems-Engineering-Management/dp/1732265186">&lt;em>An Elegant Puzzle&lt;/em>&lt;/a>. The management career isn&amp;rsquo;t an easy one, but increasingly there is a map available.&lt;/p>
&lt;p>The transition into Staff Engineer—and its further evolutions like Principal Engineer—remains particularly challenging and undocumented. What are the skills you need to develop to reach Staff Engineer? What skills do you need to succeed &lt;em>after&lt;/em> you&amp;rsquo;ve reached it? How do most folks reach this role? What can companies do to streamline the path to Staff Engineer? Will you &lt;em>enjoy&lt;/em> being a Staff Engineer or toil for years for a role that doesn&amp;rsquo;t suit you?&lt;/p>
&lt;hr>
&lt;h3 id="what">What?&lt;/h3>
&lt;p>The &lt;strong>StaffEng&lt;/strong> project aims to collect the stories of folks who are operating in Staff, Principal, or Distinguished Engineer roles. How did you get there? What were your lucky breaks? How did you learn to be effective?&lt;/p>
&lt;p>These stories will establish role models for folks hoping to become Staff Engineers. Further, the &amp;ldquo;metadata&amp;rdquo; around these stories will help create transparency into the most effective ways to navigate this career path.&lt;/p>
&lt;p>Finally, I hope to use those learnings to craft a small number of resources to help others draft their own map to Staff Engineer. What should you do in the first ninety days as a Staff Engineer? What are the highest leverage activities? What should you stop doing? What are the resources you can rely upon? Hopefully, we can provide good resources for all of this.&lt;/p>
&lt;hr>
&lt;h3 id="who-am-i">Who am I?&lt;/h3>
&lt;p>I&amp;rsquo;m &lt;a href="https://linkedin.com/in/will-larson-a44b543">Will Larson&lt;/a>, also known as &lt;a href="https://twitter.com/Lethain">@lethain&lt;/a> on Twitter. I serve as CTO at &lt;a href="https://calm.com">Calm&lt;/a>, blog at &lt;a href="https://lethain.com">Irrational Exuberance&lt;/a>, and wrote &lt;a href="https://www.amazon.com/Elegant-Puzzle-Systems-Engineering-Management/dp/1732265186">&lt;em>An Elegant Puzzle&lt;/em>&lt;/a>.&lt;/p>
&lt;p>I&amp;rsquo;ve been fortunate to work with and coach a number of wonderful Staff-plus engineers, but I&amp;rsquo;ve always been a bit uncertain whether my advice was any good. I knew what I thought I needed from the team I was supporting, but was my approach effective? Was I helping their careers or guiding them towards submerged rocks that I couldn&amp;rsquo;t quite see?&lt;/p>
&lt;p>This project came out of the desire to have a clearer understanding of the Staff-plus role, to ensure organizations I work with or support create room for those roles, and to make me a better coach to the Staff-plus engineers I&amp;rsquo;m fortunate enough to work with.&lt;/p>
&lt;p>Somewhat orthogonally, I also really enjoyed the pull arc of publishing &lt;a href="https://www.amazon.com/Elegant-Puzzle-Systems-Engineering-Management/dp/1732265186">&lt;em>An Elegant Puzzle&lt;/em>&lt;/a>, and wanted to start on a new project that could eventually lead to another book—one that addresses areas where my first work could have been stronger. In particular, a more cohesive structure and moving beyond my own experiences to operate through a broader lens.&lt;/p>
&lt;hr>
&lt;h3 id="want-to-help">Want to help?&lt;/h3>
&lt;p>The best ways to help are by &lt;a href="https://staffeng.com/share">sharing your story&lt;/a> or simply passing these stories along to folks who would benefit from them.&lt;/p>
&lt;p>When I started working on this project, I wrote up some notes on how I&amp;rsquo;d determine its success. A big part of that is the number of folks who reach out to say that these stories have helped them. If they&amp;rsquo;ve helped you, please let me know on Twitter at &lt;a href="https://twitter.com/Lethain">@lethain&lt;/a>, or via email at lethain[at]gmail.&lt;/p>
&lt;hr>
&lt;p>Let me know if you&amp;rsquo;d like this exported as a &lt;code>.md&lt;/code> file or need it styled for a specific platform like GitHub or Notion.&lt;/p></description></item><item><title>Staff projects</title><link>https://staffeng.com/guides/staff-projects/</link><pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/staff-projects/</guid><description>&lt;blockquote>
&lt;p>There isn&amp;rsquo;t an explicit expectation, nor is it listed anywhere as a formal requirement, but it is understood that you&amp;rsquo;ll complete a Staff Project to get promoted. I can&amp;rsquo;t think of any Staff promotion that didn&amp;rsquo;t include a really strong project, typically a multi-person project where the engineer was the Tech Lead.&lt;br>
- &lt;a href="https://staffeng.com/stories/ritu-vincent">Ritu Vincent&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>A popular recurring idea around reaching a Staff-plus role is that first, you need to successfully complete a &amp;ldquo;Staff project.&amp;rdquo; This is a project that is considered complex and important enough that the person who completes it has proven themselves as a Staff engineer. However popular this idea is, if you&amp;rsquo;re pursuing a Staff-plus role, it&amp;rsquo;s important to pierce the mythology of these projects and focus on the experiences of folks who&amp;rsquo;ve walked the path before you.&lt;/p>
&lt;p>The short answer on Staff projects is that most engineers don&amp;rsquo;t complete one as part of reaching a Staff role, although a large minority do complete one, particularly folks who attain the role via promotion at a company they&amp;rsquo;ve grown up in. For the folks who don&amp;rsquo;t complete one, typically, it&amp;rsquo;s either because they accumulated a track record of success over a longer period without a single capstone or because they switched companies to reach the title.&lt;/p>
&lt;p>We&amp;rsquo;ll dig into a few different angles on staff projects:&lt;/p>
&lt;ol>
&lt;li>Folks who didn&amp;rsquo;t complete Staff projects&lt;/li>
&lt;li>Folks who did complete Staff projects, including where they don&amp;rsquo;t end up working as planned&lt;/li>
&lt;li>Identifying and approaching your Staff project&lt;/li>
&lt;/ol>
&lt;p>Into the messy details, we go.&lt;/p>
&lt;h2 id="no-staff-project-required">No Staff project required&lt;/h2>
&lt;p>When I asked folks whether they had a Staff project, some of the answers were quite concise:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://staffeng.com/stories/joy-ebertz">Joy Ebertz&lt;/a>, &lt;em>&amp;ldquo;I actually didn&amp;rsquo;t really have a Staff Project.&amp;rdquo;&lt;/em>&lt;/li>
&lt;li>&lt;a href="https://staffeng.com/stories/diana-pojar">Diana Pojar&lt;/a>, &lt;em>&amp;ldquo;No, I did not have an assigned &amp;lsquo;Staff Project,&amp;rsquo; and that is not something that is part of the promotion process at Slack.&amp;rdquo;&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>Some folks were even skeptical of the Staff project concept overall. &lt;a href="https://staffeng.com/stories/nelson-elhage">Nelson Elhage&lt;/a> said,&lt;/p>
&lt;blockquote>
&lt;p>I&amp;rsquo;m instinctively a little bit wary of this sort of idea of a staff project, in part because one of the archetypes of Staff engineers that I&amp;rsquo;ve seen are people who don&amp;rsquo;t necessarily run grand projects themselves or do big things. But just are sort of incredibly effective gurus and routers who make the whole engineering organization run better.&lt;/p>&lt;/blockquote>
&lt;p>There are also folks like &lt;a href="https://staffeng.com/stories/dan-na">Dan Na&lt;/a> or &lt;a href="https://staffeng.com/stories/damian-schenkelman">Damian Schenkelman&lt;/a> who took a detour through engineering management to reach the role. Damian describes bypassing the Staff project,&lt;/p>
&lt;blockquote>
&lt;p>I did not. Because of how I grew at Auth0, I kind of &amp;ldquo;skipped that part&amp;rdquo;. As a Director at a startup, I got the opportunity to technically lead a lot of big, critical initiatives, but there was no specific/explicit &amp;ldquo;staff/principal project.&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;p>From these stories, it&amp;rsquo;s clear that anyone who tells you that you &lt;em>must&lt;/em> complete a Staff project to reach a Staff-plus title is wrong: there are many avenues to reach Staff-plus titles without doing a Staff project, with &lt;a href="https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/">a stint in engineering management&lt;/a> prominent among them.&lt;/p>
&lt;h2 id="staff-project-required">Staff project required&lt;/h2>
&lt;p>However, it&amp;rsquo;s also true that many companies require, or informally enforce, Staff projects for internal promotions, and consequently, many folks do take on a Staff project as part of their role transition.&lt;/p>
&lt;p>&lt;a href="https://staffeng.com/stories/ritu-vincent">Ritu Vincent&lt;/a> describes her experience at Dropbox,&lt;/p>
&lt;blockquote>
&lt;p>I definitely had a Staff Project. Back in the day, Dropbox was initially a consumer product that people downloaded and installed on their machines. When we launched Dropbox for Business, there was a request for both your personal and work Dropbox accounts to work simultaneously, including being able to switch across them without needing to log out and log back in.
The initial implementation was written under immense time pressure, and it ran multiple Dropbox processes. One for your personal account and another for business. My Staff project was to make it so a single Dropbox process could run with multiple users logged in. The hard part was that the project stretched from the kernel all the way to the user interface. I had to understand every single layer of the Dropbox system.
Initially, we thought it would take six months, and it ended up taking eighteen months. It took up most of the Desktop Client team&amp;rsquo;s resources for quite a while.&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://staffeng.com/stories/ras-kasa-williams">Ras Kasa Williams&lt;/a> joined an inflight project that he later became the lead on, which served as his Staff project:&lt;/p>
&lt;blockquote>
&lt;p>I joined Mailchimp as a Senior engineer. I was immediately added to a project team (which included an Engineering Director and two Principal engineers) meant to build out Mailchimp&amp;rsquo;s first internal, self–service analytics platform.
A key aspect of this project was being effective and executing at a high level. For better, or for worse, having two other Principal engineers meant expectations for me likely weren&amp;rsquo;t that high. But I was able to jump in immediately and start contributing to core aspects of the project with very little hand-holding from them; by the end, I was one of the key contributors on the team. I would ultimately be formally installed as a tech lead to help continue shepherding that project work as it was absorbed into my current engineering group, Data Services.&lt;/p>&lt;/blockquote>
&lt;p>Few companies write down their Staff project requirements. They&amp;rsquo;re more frequently the sort of &amp;ldquo;soft gate&amp;rdquo; that&amp;rsquo;s brought up during a promotion meeting, sometimes to the surprise of both the manager and the would-be Staff engineer. The most reliable technique for uncovering these requirements is your &amp;ldquo;sure thing&amp;rdquo; promotion not getting approved, but that isn&amp;rsquo;t much fun. Almost as reliable and much less frustrating is relying on the strategy of &lt;a href="https://staffeng.com/guides/promo-packets">maintaining and getting feedback on your promotion packet&lt;/a> well in advance of your promotion attempt.&lt;/p>
&lt;h2 id="why-you-should-do-a-staff-project">Why you should do a Staff project&lt;/h2>
&lt;p>Sometimes it&amp;rsquo;s hard to determine the precise line between gatekeeping and evaluation, and the premise of a Staff project exists in that hazy realm. Taking on a project of immense scope, navigating that ambiguity, and delivering it successfully is an effective way to distinguish folks who&amp;rsquo;ve reached Staff-plus impact, but it&amp;rsquo;s also clear that many folks attain Staff-plus roles without completing such a project.&lt;/p>
&lt;p>My advice is that although you can attain a Staff-plus role without completing a Staff project, they&amp;rsquo;re a particularly valuable opportunity to develop yourself as an engineer. You will &lt;em>personally&lt;/em> be stretched and grown by this kind of project in a way that you won&amp;rsquo;t be by other varieties of Staff level work.&lt;/p>
&lt;p>&lt;a href="https://staffeng.com/stories/keavy-mcminn">Keavy McMinn&lt;/a> describes how her Staff project helped her,&lt;/p>
&lt;blockquote>
&lt;p>I&amp;rsquo;ve never heard it given a name, but I understand the idea. I did lead and architect that type of project - solving gnarly engineering problems, with large impact for the company - a few times, but unfortunately, they didn&amp;rsquo;t lead to me being promoted. They did lead to my career progression though. Those projects gave me the experience, knowledge, and confidence to position myself differently. Even to give public conference talks or know that &amp;ldquo;I&amp;rsquo;ve done X and could do X again.&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;p>Although each of these projects is different, there are a few typical characteristics that capture why they&amp;rsquo;re so effective at stretching you as an engineer:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Complex and ambiguous&lt;/strong> - early in your career, you&amp;rsquo;re given well-defined problems, but as you get deeper into it, you&amp;rsquo;ll increasingly encounter poorly defined or undefined problems, and Staff projects will generally start with a poorly scoped but complex and &lt;em>important&lt;/em> problem. Your project might start with only the assertion that your company&amp;rsquo;s aging monolith is crippling product development. From that broad, unclear (and potentially wrong) statement, you&amp;rsquo;ll have to identify a concrete approach that works.&lt;/li>
&lt;li>&lt;strong>Numerous and divided stakeholders&lt;/strong> - the easiest projects start with organizational alignment around both the problem and the solution, but your Staff project might likely start with neither. It might be an area which management views as an existential risk, but many engineers feel it is good enough. It might be an area that everyone agrees is a problem, but with strong factional disagreement about approach, for example, disagreement between pursuing a service strategy or reinvesting in your existing monolith.&lt;/li>
&lt;li>&lt;strong>Named bet where failure matters&lt;/strong> - it&amp;rsquo;s going to be a project important enough that senior leadership talks about it at all-organization or all-company meetings. This means folks will be watching your work closely, and any failures will be very visible. Success will be highly visible, as well!&lt;/li>
&lt;/ul>
&lt;p>If you meet these, it&amp;rsquo;s probably a staff project. These can be pretty nerve-wracking, which is also why they&amp;rsquo;re so effective at developing you.&lt;/p>
&lt;h2 id="getting-access-to-staff-projects">Getting access to Staff projects&lt;/h2>
&lt;p>While deciding that you want to take on a Staff project is the first step, you still need to get &lt;em>access&lt;/em> to these projects, which depends on your management chain trusting you enough to bet on your success.&lt;/p>
&lt;p>This comes down to three factors.&lt;/p>
&lt;ol>
&lt;li>First is learning to stay aligned with your leadership team, some strategies for which are described in &lt;a href="https://staffeng.com/guides/getting-in-the-room">Getting in the room&lt;/a> and &lt;a href="https://staffeng.com/guides/staying-aligned-with-authority">Staying aligned with authority&lt;/a>.&lt;/li>
&lt;li>Second, you need to be known to have the technical aptitude for the problem at hand, which requires &lt;a href="https://staffeng.com/guides/being-visible">Being Visible&lt;/a>.&lt;/li>
&lt;li>Third, is less in your control, which is your company having a pressing need to solve a Staff-level problem, which can require some patience.&lt;/li>
&lt;/ol>
&lt;h2 id="should-you-pursue-a-staff-project">Should you pursue a Staff project?&lt;/h2>
&lt;p>In summary, if you&amp;rsquo;re looking to get promoted within your current company and haven&amp;rsquo;t previously held a Staff or management title before, then you&amp;rsquo;ll likely need to pursue a Staff project to establish yourself at that level. In other cases, you likely won&amp;rsquo;t.&lt;/p>
&lt;p>In any case, it&amp;rsquo;s worth keeping in mind that whether or not these projects are required, they are also some of the most challenging work you can find and are the sort of work that will stretch and develop you into a better engineer. In the short-term pursuit of the title, it may well be optimal to avoid these projects, but in the long-term pursuit of self-growth, they&amp;rsquo;re irreplaceable.&lt;/p></description></item><item><title>Work on what matters</title><link>https://staffeng.com/guides/work-on-what-matters/</link><pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/work-on-what-matters/</guid><description>&lt;blockquote>
&lt;p>I&amp;rsquo;ve taken to using the word &amp;ldquo;energized&amp;rdquo; over &amp;ldquo;impactful.&amp;rdquo; &amp;ldquo;Impactful&amp;rdquo; feels company-centric, and while that&amp;rsquo;s important, &amp;ldquo;energized&amp;rdquo; is more inwards-looking. Finding energizing work is what has kept me at Stripe for so long, pursuing impactful
work. - &lt;a href="https://staffeng.com/stories/michelle-bu">Michelle Bu&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>We all have a finite amount of time to live, and within that mortal countdown, we devote some fraction towards our work. Even for the most career-focused, your life will be filled with many things beyond work: supporting your family, children, exercise, being a mentor and a mentee, hobbies, and so the list goes on. This is the sign of a rich life, but one side-effect is that time to do your work will become increasingly scarce as you get deeper into your career.&lt;/p>
&lt;p>If you&amp;rsquo;re continuing to advance in your career, then even as your time available for work shrinks, the expectations around your impact will keep growing. You can try sleeping less or depriving yourself of the non-work activities you need to feel whole, but you&amp;rsquo;ll inevitably find that your work maintains an aloof indifference to your sacrifice rather than rewarding it. Only through &lt;a href="https://lethain.com/forty-year-career/">pacing your career to your life&lt;/a> can you sustain yourself for the long-term.&lt;/p>
&lt;p>Indeed, pacing yourself becomes the central challenge of a sustained, successful career: increasingly senior roles require that you accomplish more and more and do it in less and less time. The ledge between these two constraints gets narrower the further you go, but it remains walkable if you take a deliberate approach.&lt;/p>
&lt;p>First, a discussion on a few common ways to get tripped up: &lt;em>snacking&lt;/em>, &lt;em>preening&lt;/em>, and &lt;em>chasing ghosts&lt;/em>. Then we&amp;rsquo;ll get into the good stuff: how &lt;em>do&lt;/em> you work on what really matters?&lt;/p>
&lt;h2 id="avoid-snacking">Avoid snacking&lt;/h2>
&lt;p>&lt;img src="https://staffeng.com/snacking.png" alt="Quadrants of high and low impact by high and low effort">&lt;/p>
&lt;p>Hunter Walk recommends that folks &lt;a href="https://hunterwalk.com/2016/06/18/the-best-startups-resists-snacks-im-not-talking-about-food/">avoid &amp;ldquo;snacking&amp;rdquo;&lt;/a> when they prioritize work. If you&amp;rsquo;re in a well-run organization, at some point, you&amp;rsquo;re going to run out of things that are both high-impact and easy. This leaves you with a choice between shifting right to hard and high-impact or shifting down to easy and low-impact. The latter choice&amp;ndash;easy and low-impact&amp;ndash;is what Walk refers to as &lt;em>snacking&lt;/em>.&lt;/p>
&lt;p>When you&amp;rsquo;re busy, these snacks give a sense of accomplishment that makes them psychologically rewarding. Still, you&amp;rsquo;re unlikely to learn much from doing them, others are likely equally capable of completing them (&lt;em>and&lt;/em> for some of them, it might be a good development opportunity), and there&amp;rsquo;s a tremendous opportunity cost versus doing something higher impact.&lt;/p>
&lt;p>It&amp;rsquo;s ok to spend some of your time on snacks to keep yourself motivated between bigger accomplishments, but you have to keep yourself honest about how much time you&amp;rsquo;re spending on high-impact work versus low-impact work. In senior roles, you&amp;rsquo;re more likely to self-determine your work, and if you&amp;rsquo;re not deliberately tracking your work, it&amp;rsquo;s easy to catch yourself doing little to no high-impact work.&lt;/p>
&lt;h2 id="stop-preening">Stop preening&lt;/h2>
&lt;p>Where &amp;ldquo;snacking&amp;rdquo; is the broad category of doing easy and low-impact work, there&amp;rsquo;s a particularly seductive subset of snacking that I call &amp;ldquo;preening.&amp;rdquo; Preening is doing low-impact, high-visibility work. Many companies conflate high-visibility and high-impact so strongly that they can&amp;rsquo;t distinguish between preening and impact, which is why it&amp;rsquo;s not uncommon to see some companies&amp;rsquo; senior-most engineers spend the majority of their time doing work that&amp;rsquo;s of dubious value, but that is frequently recognized in company meetings.&lt;/p>
&lt;p>If you&amp;rsquo;re taking a short-term look at &lt;a href="https://yenkel.dev/posts/how-to-achieve-career-growth-opportunities-skills-sponsors">career growth&lt;/a>, then optimizing for your current organization&amp;rsquo;s pathologies in evaluating impact is the optimal path: go forth and preen gloriously. However, if you&amp;rsquo;re thinking about developing yourself to succeed as your &lt;a href="https://lethain.com/growing-with-your-company/">current role grows in complexity&lt;/a> or across multiple organizations, then it&amp;rsquo;s far more important to strike a balance between valued work and self-growth.&lt;/p>
&lt;p>This is also an important factor to consider when choosing a company to work at! Dig into what a company values and ensure it aligns with your intended personal growth. If a company&amp;rsquo;s leadership consists entirely of folks who focus their energy on performative urgency or acts of fealty, don&amp;rsquo;t be surprised when your success in the company depends on those activities.&lt;/p>
&lt;p>Worse, to be a successful preener requires near invulnerability to criticism of your actual impact, and your true work &lt;em>will&lt;/em> suffer if your energy is diverted to preening. Typically this means you need to be a vanity hire of a senior leader or to present yourself in the way a company believes leaders look and act. If that isn&amp;rsquo;t you, then your attempt to exchange your good judgment for company success will end up failing anyway: you&amp;rsquo;ll get held accountable for the lack of true impact where others who match the company&amp;rsquo;s expectation of how a leader appears will somehow slip upward.&lt;/p>
&lt;h2 id="stop-chasing-ghosts">Stop chasing ghosts&lt;/h2>
&lt;p>Many folks would assume that companies, rational optimizers that they are, avoid spending much time on low-impact high-effort projects. Unfortunately, that isn&amp;rsquo;t consistently the case. It&amp;rsquo;s surprisingly common for a new senior leader to join a company and immediately drive &lt;a href="https://lethain.com/grand-migration/">a strategy shift that fundamentally misunderstands the challenges at hand&lt;/a>. The ghosts of their previous situation hold such a firm grasp on their understanding of the new company that they misjudge the familiar as the essential.&lt;/p>
&lt;p>As a senior leader, you have to maintain a hold on your ego to avoid investing in meaningless work on a grand scale. This can be surprisingly challenging when during your hiring process, you&amp;rsquo;ve been repeatedly told that you&amp;rsquo;ve been hired to fix something deeply broken&amp;ndash;you&amp;rsquo;re the newly-hired savior. Of course, your instincts are right! Taking the time to understand the status quo before shifting it will always repay diligence with results.&lt;/p>
&lt;p>I had a recent discussion with someone who argued that new senior leaders &lt;em>deliberately&lt;/em> push for major changes even though they suspect the efforts will fail. Such changes make the organization increasingly dependent on the new leader and also ensures anything that &lt;em>does&lt;/em> go well gets attributed to the new leader directly rather than their team. If this is your approach to leadership, please know that you&amp;rsquo;re awful and take the time to work on yourself until the well-being and success of an entire company matter to you more than being perceived as essential.&lt;/p>
&lt;h2 id="existential-issues">Existential issues&lt;/h2>
&lt;p>Now that you&amp;rsquo;re done snacking, preening, and chasing ghosts, it&amp;rsquo;s time to start thinking from the other direction: what should you work on?
The first place to look for work that matters is exploring whether your company is experiencing an existential risk. Companies operate in an eternal &lt;a href="https://lethain.com/iterative-elimination-tournaments/">iterative elimination tournament&lt;/a>, balancing future success against surviving until that future becomes the present. If you&amp;rsquo;re about to lose one of those rounds, then always focus there.&lt;/p>
&lt;p>Running out of money, &lt;a href="https://lethain.com/digg-v4/">like my experience at Digg&lt;/a>, can be the most obvious issue, but not every existential issue is financial, like &lt;a href="https://www.theatlantic.com/technology/archive/2015/01/the-story-behind-twitters-fail-whale/384313/">Twitter&amp;rsquo;s fail whale stability challenges&lt;/a> or adapting to the shifts caused by the Covid-19 pandemic.&lt;/p>
&lt;p>If something dire is happening at your company, then that&amp;rsquo;s the place to be engaged. Nothing else will matter if it doesn&amp;rsquo;t get addressed.&lt;/p>
&lt;h2 id="work-where-theres-room-and-attention">Work where there&amp;rsquo;s room &lt;em>and&lt;/em> attention&lt;/h2>
&lt;p>Existential issues are usually &lt;em>not&lt;/em> the most efficient place to add your efforts, but efficiency isn&amp;rsquo;t a priority when the walls are crashing down around you. You &lt;em>should&lt;/em> swarm to existential problems, but if a problem isn&amp;rsquo;t existential, then you should be skeptical of adding your efforts where everyone&amp;rsquo;s already focused. Folks often chase leadership&amp;rsquo;s top priority, but with so many folks looking to make their impact there, it&amp;rsquo;s often challenging to have a meaningful impact.&lt;/p>
&lt;p>Instead, the most effective places to work are those that matter to your company but still have enough room to actually do work. What are priorities that will become critical in the future, where you can do great work ahead of time? Where are areas that are doing &lt;em>ok&lt;/em> but could be doing &lt;em>great&lt;/em> with your support?&lt;/p>
&lt;p>Sometimes you&amp;rsquo;ll find work that&amp;rsquo;s &lt;em>worthy&lt;/em> of attention but which an organization is incapable of paying attention to, usually because its leadership doesn&amp;rsquo;t value that work. In some companies, this is developer tooling work. In others, it&amp;rsquo;s inclusion work. In most companies, it&amp;rsquo;s &lt;a href="https://noidea.dog/glue">glue work&lt;/a>.&lt;/p>
&lt;p>There is almost always a great deal of room to do this sort of work that no one is paying attention to, so you&amp;rsquo;ll be able to make rapid initial progress on it, which &lt;em>feels&lt;/em> like a good opportunity to invest. At some point, though, you&amp;rsquo;ll find that the work needs support, and it&amp;rsquo;s quite challenging to get support for work that a company is built to ignore or devalue. Your early wins will slowly get eroded by indifference and misalignment, and your initial impact will be reclaimed by the sands of time.&lt;/p>
&lt;p>Does this mean you shouldn&amp;rsquo;t do inclusion work? No, that&amp;rsquo;s not the conclusion I want you to take away from this. Sometimes an area that an organization doesn&amp;rsquo;t pay attention to is so important that you&amp;rsquo;re going to want to advocate for it to start paying attention. Teaching a company to value something it doesn&amp;rsquo;t care about is the hardest sort of work you can do, and it often fails, so you should do as little of it as you can, but no less. As a senior leader, you have an ethical obligation that goes beyond maximizing your company-perceived impact, but it&amp;rsquo;s important to recognize what you&amp;rsquo;re up against and time your efforts accordingly.&lt;/p>
&lt;h2 id="foster-growth">Foster growth&lt;/h2>
&lt;p>One area that&amp;rsquo;s often underinvested in (i.e., lots of room to work in) while also being highly leveraged is growing the team around you. &lt;em>Hiring&lt;/em> has a lot of folks involved in it, usually in terms of optimizing the &lt;a href="https://lethain.com/hiring-funnel/">hiring funnel&lt;/a>, but onboarding, mentoring, and coaching are wholly neglected at many companies despite being &lt;em>at least&lt;/em> &lt;a href="https://lethain.com/productivity-in-the-age-of-hypergrowth/">as impactful as hiring to your company&amp;rsquo;s engineering velocity&lt;/a>.&lt;/p>
&lt;p>If you start dedicating even a couple of hours a week to developing the team around you, it&amp;rsquo;s quite likely that will become your legacy long after your tech specs and pull requests are forgotten.&lt;/p>
&lt;h2 id="edit">Edit&lt;/h2>
&lt;p>A surprising number of projects are one small change away from succeeding, one quick modification away from unlocking a new opportunity, or one conversation away from consensus. I think of making those small changes, quick modifications, and short conversations as &lt;em>editing&lt;/em> your team&amp;rsquo;s approach.&lt;/p>
&lt;p>With your organizational privilege, relationships you&amp;rsquo;ve built across the company, and ability to see around corners derived from your experience, you can often shift a project&amp;rsquo;s outcomes by investing the smallest ounce of effort, and this is some of the most valuable work you can do.&lt;/p>
&lt;p>It&amp;rsquo;s particularly valuable because it&amp;rsquo;s quick, it&amp;rsquo;s easy, it&amp;rsquo;s highly motivating for both you and the person you help, and it&amp;rsquo;s hugely impactful when done well. (Also, it&amp;rsquo;s highly demotivating when done poorly, so your approach matters!)&lt;/p>
&lt;h2 id="finish-things">Finish things&lt;/h2>
&lt;p>One special sort of editing is helping finish a project that just can&amp;rsquo;t quite close itself out. Often you&amp;rsquo;ll have a talented engineer earlier in their career who is already doing the work but can&amp;rsquo;t quite create buy-in or figure out how to rescope their project into finishable work. It&amp;rsquo;s surprisingly common that coaching a teammate on how to tweak a project into something finishable and then lending them your privilege to budge the right friction points will transform a six-month slog into a two-week sprint with almost an identical impact.&lt;/p>
&lt;p>We &lt;a href="https://www.amazon.com/dp/B078Y98RG8/">only get value from finishing projects&lt;/a>, and getting a project over the finish line is the magical moment it goes from risk to leverage. Time spent getting work finished is always time well spent.&lt;/p>
&lt;h2 id="what-only-you-can">What only you can&lt;/h2>
&lt;p>The final category of work that matters is the sort that you&amp;rsquo;re uniquely capable of accomplishing. Sure there&amp;rsquo;s work that you&amp;rsquo;re faster at or better at than some other folks, but much more important is the sort of work that simply won&amp;rsquo;t happen if you don&amp;rsquo;t do it.&lt;/p>
&lt;p>This work is an intersection of what you&amp;rsquo;re exceptionally good at and what you genuinely care about. It might be &lt;a href="https://lethain.com/magnitudes-of-exploration/">writing your company&amp;rsquo;s technology strategy&lt;/a> that folks &lt;em>will actually follow&lt;/em>, it might be convincing a great candidate to join, it might be changing your CEO&amp;rsquo;s mind on how you pay down tech debt, it might &lt;a href="https://increment.com/apis/api-design-for-eager-discerning-developers/">be crafting a discerning API&lt;/a>.&lt;/p>
&lt;p>Whatever it is, things that simply won&amp;rsquo;t happen if you don&amp;rsquo;t do them are your biggest opportunity to work on something that matters, and it&amp;rsquo;s a category that will get both narrower and deeper the further you get into your career.&lt;/p>
&lt;h2 id="why-it-matters">Why it matters&lt;/h2>
&lt;p>Suppose you&amp;rsquo;re interviewing for a new role twenty years into your career.
Will the folks interviewing you understand your real impact on any of your previous projects or companies? No, I guarantee they won&amp;rsquo;t. Instead, you&amp;rsquo;ll find yourself judged by a series of surprisingly subjective measures: your accumulated prestige, the titles you&amp;rsquo;ve had and companies you&amp;rsquo;ve worked at, your backchannel reputation, and how you present in your interview process.&lt;/p>
&lt;p>You can&amp;rsquo;t escape subjective interview practices, but you can deliberately accumulate expertise from doing valuable work. Indeed, that&amp;rsquo;s the only viable long-term bet on your career: focus on work that matters, do projects that develop you, and steer towards companies that value genuine experience.&lt;/p></description></item><item><title>Build a network of peers</title><link>https://staffeng.com/guides/network-of-peers/</link><pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/network-of-peers/</guid><description>&lt;p>As I talked to more and more Staff-plus engineers about career advice, the most consistent recommendation was to develop a personal network of peers doing similar work. Not &lt;em>every&lt;/em> person emphasized this approach, but more than half mentioned it, and for those who did, it tended to be their first and strongest recommendation.&lt;/p>
&lt;p>&lt;a href="https://staffeng.com/stories/ritu-vincent">Ritu Vincent&lt;/a> said,&lt;/p>
&lt;blockquote>
&lt;p>What&amp;rsquo;s been most impactful for me is having a lot of people who I think of as mentors, usually friends, former managers, and folks that I&amp;rsquo;ve worked with. I have a decent number of recurring monthly lunches, coffee chats, and dinners with people who&amp;rsquo;ve worked with me in the past, know me, and I trust. It&amp;rsquo;s those conversations about career challenges and growth that have gotten me to where I am in my career.&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://staffeng.com/stories/keavy-mcminn">Keavy McMinn&lt;/a> mentioned her network as an important way to get honest feedback,&lt;/p>
&lt;blockquote>
&lt;p>The thing that springs to mind is to find your peers or support network. Just like management, it gets lonely the higher up you go, and it&amp;rsquo;s important to find peers that will still challenge you, and you can brainstorm ideas with. It doesn&amp;rsquo;t even matter if they&amp;rsquo;re in your similar area of work or even are in different companies.&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://staffeng.com/stories/nelson-elhage">Nelson Elhage&lt;/a> similarly shared,&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s also been really valuable for me to cultivate a good personal network of other senior engineers. I chat with them informally about whatever it is that we&amp;rsquo;re working on and thinking about. When you have personal connections, you can get very unvarnished views of the problems people are seeing and the solutions they&amp;rsquo;re considering.&lt;/p>&lt;/blockquote>
&lt;p>While it&amp;rsquo;s helpful to know you &lt;em>should&lt;/em> build a network, some folks struggle to figure out how to do it. Among the various &lt;a href="https://lethain.com/meeting-people/">tactics to build your network&lt;/a>, the two most common strategies are: being easy to find and networking internally.&lt;/p>
&lt;h2 id="be-visible">Be visible&lt;/h2>
&lt;p>There is so much pent-up demand for community among Staff-plus engineers that the easiest way to build your network is being easy to find as a Staff-plus engineer.
One effective approach is contributing to the discussion around Staff-plus engineering itself,
like Joy Ebert&amp;rsquo;z &lt;a href="https://staffeng.com/stories/joy-ebertz">What a Senior Staff Software Engineer Actually Does&lt;/a>
or Keavy McMinn&amp;rsquo;s &lt;a href="https://keavy.com/work/thriving-on-the-technical-leadership-path/">Thriving on the Technical Leadership Path&lt;/a>.
Although there are a good number of folks &lt;a href="https://staffeng.com/guides/learning-materials">who&amp;rsquo;ve written up their view on the Staff-plus role&lt;/a>, each one brings a new, valuable perspective. There&amp;rsquo;s room for your words on the topic.&lt;/p>
&lt;p>If writing isn&amp;rsquo;t your jam, there&amp;rsquo;s room for your voice, and speaking at tech conferences is another effective way to become visible in the broader community. &lt;a href="https://staffeng.com/stories/keavy-mcminn">Keavy McMinn&lt;/a> described her motivation for conference speaking as,&lt;/p>
&lt;blockquote>
&lt;p>Mostly, I enjoyed the people I met at conferences. Later the speaker networks led to job opportunities for me.&lt;/p>&lt;/blockquote>
&lt;p>If those both feel high-stakes, even starting a Twitter account or joining a couple of related Slacks (for example, &lt;em>#staff-principal-engineering&lt;/em> in the &lt;a href="https://randsinrepose.com/welcome-to-rands-leadership-slack/">Rands Leadership Slack&lt;/a>) can be a good start.&lt;/p>
&lt;h2 id="internal-networks-too">Internal networks, too&lt;/h2>
&lt;p>Rather than focusing on public speaking and writing, &lt;a href="https://staffeng.com/stories/katie-sylor-miller">Katie Sylor-Miller&lt;/a> &amp;rsquo;s networking advice was to build your internal network within your current company,&lt;/p>
&lt;blockquote>
&lt;p>Networking, networking, networking, networking… You have to be really cognizant of who you&amp;rsquo;re talking to and make sure that you have connections across multiple teams and multiple groups to leverage those networks.&lt;/p>&lt;/blockquote>
&lt;p>Although it&amp;rsquo;s easy to think of networking as something that only happens externally, it&amp;rsquo;s often easier to do at the company you&amp;rsquo;re already in, where it happens semi-organically and semi-deliberately over the course of your work. This approach has the added advantage of directly improving your day-to-day work as well. Longer-term, those folks will eventually leave and spread across the industry, bootstrapping your broader network. This works &lt;em>really&lt;/em> well when you&amp;rsquo;re at a decently large or prestigious company and is a bit less effective as your current company gets smaller or less prestigious.&lt;/p>
&lt;h2 id="ambient-networks">Ambient networks&lt;/h2>
&lt;p>Among the folks who didn&amp;rsquo;t mention developing a personal network, most mentioned creating an ambient network of learning based on keeping current with industry books and following industry leaders on social networks, particularly Twitter.&lt;/p>
&lt;p>&lt;a href="https://staffeng.com/stories/diana-pojar">Diana Pojar&lt;/a>’s comment was&lt;/p>
&lt;blockquote>
&lt;p>I use Twitter extensively, but I&amp;rsquo;m mostly a consumer and follow many people in tech. I usually follow people that I saw talking at conferences, or I worked with, and I find their content relevant to me. Here’s a couple, in no specific order: &lt;a href="https://twitter.com/skamille">Camille Fournier&lt;/a>, &lt;a href="https://twitter.com/lara_hogan">Lara Hogan&lt;/a>, &lt;a href="https://twitter.com/josh_wills">Josh Wills&lt;/a>, &lt;a href="https://twitter.com/vboykis">Vicki Boykis&lt;/a>, &lt;a href="https://twitter.com/gasca">David Gasca&lt;/a>, &lt;a href="https://twitter.com/jewelia">Julia Grace&lt;/a>, &lt;a href="https://twitter.com/holdenkarau">Holden Karau&lt;/a>, &lt;a href="https://twitter.com/allspaw">John Allspaw&lt;/a>, &lt;a href="https://twitter.com/mipsytipsy">Charity Majors&lt;/a>, &lt;a href="https://twitter.com/postwait">Theo Schlossnagle&lt;/a>, &lt;a href="https://twitter.com/jessitron">Jessica Joy Kerr&lt;/a>, &lt;a href="https://twitter.com/sarahcat21">Sarah Catanzaro&lt;/a>, &lt;a href="https://twitter.com/orangebook_">Orange Book&lt;/a>.&lt;/p>&lt;/blockquote>
&lt;p>&lt;a href="https://staffeng.com/stories/damian-schenkelman">Damian Schenkelman&lt;/a> mentioned,&lt;/p>
&lt;blockquote>
&lt;p>I try to follow people on Twitter who I think are doing interesting things and from who I can learn. There are so many people doing interesting things and so much to learn! Some of the names that come to mind: [including &lt;a href="https://twitter.com/aphyr">Aphyr&lt;/a>, &lt;a href="https://twitter.com/whereistanya">Tanya Reilly&lt;/a>, and &lt;a href="https://twitter.com/davidfowl">David Fowler&lt;/a>].&lt;/p>&lt;/blockquote>
&lt;p>If the idea of building a network this way feels uncomfortable then building an ambient network can be a good starting step in the right direction. That said, you&amp;rsquo;ll find the personal network more impactful, and finding an authentic way to build one is an important step towards reaching and remaining impactful in senior roles over the long arch of your career.&lt;/p>
&lt;h2 id="quality-over-quantity">Quality over quantity&lt;/h2>
&lt;p>A coworker once told me the story of someone determined to make their name in Business Development, who would fly from SF to NYC with a list of people they wanted to meet. They&amp;rsquo;d look for tweets and Foursquare check-ins for where those people might be that night, go there, buy a drink, and pretend to serendipitously meet them. On a good night, they&amp;rsquo;d try to meet six or more new connections this way.&lt;/p>
&lt;p>It goes without saying that you shouldn&amp;rsquo;t do that &amp;ndash; it&amp;rsquo;s a total violation of boundaries. Further, doing this doesn&amp;rsquo;t even make sense: when it comes to building a network of peers, the volume doesn&amp;rsquo;t matter. Instead, focus on slowly building with folks you genuinely trust, respect, and are inspired by. That&amp;rsquo;s what&amp;rsquo;ll create a truly powerful network to help you solve the hardest problems and trickiest situations that come your way.&lt;/p>
&lt;p>Finally, if you&amp;rsquo;ve reached this paragraph and really want to build a network but just aren&amp;rsquo;t sure how to get started, I&amp;rsquo;ll share what&amp;rsquo;s worked for me as an introvert who struggled to craft an authentic approach. Find someone you respect and send them a short 1-2 paragraph email or DM with a specific question asking for advice. If they reply, thank them and send another question in six to twelve months. If they subsequently ask you for a favor or question, do what you can to help. If they don&amp;rsquo;t reply, don&amp;rsquo;t worry about it; just move on without comment. This works surprisingly well, and the worst thing that can happen is totally fine: they&amp;rsquo;ll just never reply.&lt;/p></description></item><item><title>Damian Schenkelman - Principal Engineer at Auth0</title><link>https://staffeng.com/stories/damian-schenkelman/</link><pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/damian-schenkelman/</guid><description>&lt;p>&lt;em>Story recorded in August, 2020. Learn more about Damian on his &lt;a href="https://yenkel.dev">blog&lt;/a>, &lt;a href="https://twitter.com/dschenkelman">Twitter&lt;/a>, and &lt;a href="https://www.linkedin.com/in/damianschenkelman/">Linkedin&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;strong>Tell us a little about your current role: your title, the company you work at, and generally what sort of work does your team do?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I&amp;rsquo;m a Principal Engineer at &lt;a href="https://auth0.com/">Auth0&lt;/a>, an Identity as a Service platform. I work in the Systems Architecture group, which today has three Principal Engineers. We work with different teams on strategic initiatives and also shape Auth0&amp;rsquo;s &lt;a href="https://yenkel.dev/posts/achieving-alignment-and-efficiency-through-a-technical-strategy">technical strategy&lt;/a>, architecture decisions, and guidelines.&lt;/p>
&lt;p>At the time of writing, I am working with a group of &lt;a href="https://auth0.com/learn/cloud-identity-access-management/">Identity and Access Management&lt;/a> (IAM) teams as a tech lead of a large new product feature, as well as driving reliability and scaling related initiatives with other teams.&lt;/p>
&lt;p>&lt;strong>&lt;em>What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Within Engineering, we are organized in domains (today Identity &amp;amp; Access Management, Developer Experience, Service Management, and Platform). Auth0&amp;rsquo;s Staff Engineers are people that can technically lead teams within a domain. A Staff Engineer would typically be part of a single team in a domain, while also being able to actively contribute to initiatives across the scope of a domain.&lt;/p>
&lt;p>Principal is the next level in our ladder. Principal Engineers can either be in a specific team (depth) or work with multiple teams and their scope spans the entire organization (breadth). Today I am operating in &amp;ldquo;breadth mode.&amp;rdquo; This means both working on specific initiatives and also the definition of technical strategy, technology choices for our Platform, and leading the Design and Architecture workgroup (a.k.a. DNA).&lt;/p>
&lt;p>DNA has 6 members (3 permanent Principal, and 3 Staff/Senior II that rotate every 6 months). The workgroup defines decisions and guidelines to help drive Auth0&amp;rsquo;s technology in a specific direction (e.g. avoid language proliferation so we can build libs once and people can switch teams easily) and also collaborate with teams in technical reviews of large initiatives.&lt;/p>
&lt;p>The biggest way in which my role differs, because I have been at the company for 6+ years, 3+ of those as a Director of Engineering, is that I have the &amp;ldquo;broadest scope.&amp;rdquo; I work with both Product and Platform teams on initiatives and also work often with other parts of the company: joining conversations with high profile prospects, working with our legal team on contract language, or collaborating with Marketing.&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>Some talks from Damian&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=OoA-gx-19tQ">The dirty secrets of building large, highly available, scalable HTTP APIs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=vGywoYc_sA8">Multi-Region High-Availability Architecture that Scales to 1.5B+ Logins/Month&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=1PVyDzfX1Ng">The Path to SRE&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=88OLQ_fb2Oo">Real-Life Node.js Troubleshooting&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;strong>&lt;em>How do you spend your time day-to-day?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>This varies a lot. A typical week involves a lot of meetings, so I am trying a new thing: grouping meetings on Mondays, Wednesdays, and Fridays. Thursdays are completely blocked, and Tuesdays are only for urgent matters. Because we are remote all meetings are over Zoom.&lt;/p>
&lt;p>On meeting days I have recurrent:&lt;/p>
&lt;ul>
&lt;li>1:1s: to catch up with my manager (VP of Engineering), or a team manager or tech lead. Those conversations are great to stay up to date with them and know their challenges. I feel being too detached from that would impact my ability to get things done effectively.&lt;/li>
&lt;li>team meetings: Engineering leadership, Design &amp;amp; Architecture workgroup.&lt;/li>
&lt;/ul>
&lt;p>Non-recurrent meetings also take place. Some example topics might be:&lt;/p>
&lt;ul>
&lt;li>specific initiatives I am tech leading&lt;/li>
&lt;li>helping a group of teams figure out how to get something started&lt;/li>
&lt;li>doing a sync design review&lt;/li>
&lt;/ul>
&lt;p>On Thursdays (and as much of I can on Tuesdays) I spend my time thinking about:&lt;/p>
&lt;ul>
&lt;li>current initiatives and how they are going&lt;/li>
&lt;li>what we could/should be doing in the future (next quarter, next year)&lt;/li>
&lt;li>writing docs, guidelines, blog posts&lt;/li>
&lt;li>(not often) doing POCs and/or writing small tools&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;em>Where do you feel most impactful as a Staff-plus engineer? A specific story would be grand.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>The biggest impact comes from being able to help achieve &amp;ldquo;people scale,&amp;rdquo; positively influencing the work of as many people as possible internally. The book &lt;a href="https://www.amazon.com/dp/B00EGMQIDG/">Scaling Up Excellence&lt;/a> provides an easy to understand analogy: scaling is a ground war, not a one-off airstrike. It requires a lot of time, and patience but to get to your goals you need to align the whole company in terms of goals and how to get to them.&lt;/p>
&lt;p>As a Principal Engineer, I try to find opportunities/gaps that I believe will set a direction for as many people as possible in the long term. There&amp;rsquo;s a lot more value to align the ~200 people we have in our Product Delivery organization around a certain topic than to code a solution for a problem myself. The former has more impact, it scales better.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done before reaching that title?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Before becoming a Principal I was a Director of Engineering at Auth0. The most interesting thing is that as a Principal Engineer people get a lot less defensive when I provide feedback and they seem a lot more open in 1:1s. I think it might be related to the fact that as a Principal Engineer you are not &amp;ldquo;representing a part of the organization&amp;rdquo;.&lt;/p>
&lt;p>In that regard, being an individual contributor feels a lot better.&lt;/p>
&lt;p>&lt;strong>&lt;em>Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for? Can you share a story of influencing your organization?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>A common problem for fast-growing companies is that there&amp;rsquo;s usually some &amp;ldquo;lack of clarity.&amp;rdquo; In our case, there was a lot of confusion about what was coming in the future and that made us slow and inefficient in making technological decisions. Teams were uncertain if they should be using a particular technology because they didn’t know if that technology would be supported in the future, they were uncertain if they should be building a particular product in a certain way because they didn’t know if that approach was aligned with our long-term technical strategy, etc. Naturally, this caused a lot of inefficiencies.&lt;/p>
&lt;p>&lt;img src="https://staffeng.com/damian-schenkelman/Damian-Schenkelman0.jpg" alt="">&lt;/p>
&lt;p>We believed we needed a long-term direction that explained how to approach the technical implementation of problems today and how to bridge the gap between our initial situation and the future vision. More precisely, we needed a documented technical strategy that would detail what we should and shouldn’t be doing to be successful in the long run.&lt;/p>
&lt;p>After talking to a great number of people I learned that all of them have been exposed to inconsistent information, and rumors, which made them afraid of making decisions, e.g.: &amp;ldquo;I heard the company is going for X in the future&amp;rdquo; or &amp;ldquo;I heard this particular technology Y is not going to be supported by our platform teams.&amp;rdquo; A lot of confusion was caused by a particular rumor that we were going to support a certain customer need and its technical implications. People kept hearing about it, but concrete plans were never announced. I wrote down these issues, connecting all the dots and aiming to translate that information into knowledge. I realized we needed both short and long term ways of solving the problem.&lt;/p>
&lt;p>&lt;strong>Short term:&lt;/strong> We had to fill the gap of uncertainty relating to some more urgent and short-term matters. Teams needed to make technical decisions and couldn&amp;rsquo;t wait for a full-fledged technical vision and roadmap. We also realized that once we had that long term vision and decisions, there would naturally be the need to review decisions for specific exceptions. I put together the &amp;ldquo;design and architecture&amp;rdquo; (DNA) group, which also wrote guidelines and recommendations, including &amp;ldquo;approved&amp;rdquo; technology choices, to guide teams towards independent decisions that don&amp;rsquo;t require review, and also established an RFC review process.&lt;/p>
&lt;p>&lt;strong>Long term:&lt;/strong> I came up with a set of topics that I believed the company needed to make decisions about. I tailored my presentations to suit two different audiences &amp;ndash; executive and technical. For the executive audience, I developed a succinct presentation, applying non-technical analogies and explanations, and providing actionable solutions. The technical presentation was much more detailed and included many technical terms. I used &lt;a href="https://en.wikipedia.org/wiki/Nemawashi">nemawashi&lt;/a> (an informal process of quietly laying the foundation for some proposed change or project, by talking to the people concerned, gathering support and feedback, and so forth) and shared with my VP of Engineering, other execs, my peers, and other senior leaders through to get buy-in before formally making a decision. More specifically, I approached people asking them for their thoughts and opinions securing the buy-in, so that by the time we met to discuss our decisions, it wouldn&amp;rsquo;t be the first time they were seeing the ideas. We finally met, discussed tradeoffs, and arrived at a set of decisions. All decisions were documented in a decision log and we committed specific owners &amp;ndash; in writing &amp;ndash; to carry them forward.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you keep in touch with how things really work as you spend less time on hands-on development?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>There are two aspects of this, keeping up with technology in general and keeping up with what goes on at Auth0 and the current &amp;ldquo;state of affairs&amp;rdquo; in Engineering teams.&lt;/p>
&lt;p>These are the things I do to keep in touch with things related to Auth0:&lt;/p>
&lt;ul>
&lt;li>Internally: keep an ear to the ground both through Slack and having 1:1s with some tech leads and Engineering Managers. This helps me understand what challenges they are having first hand, and also find patterns or arrive at global solutions instead of local ones.&lt;/li>
&lt;li>Externally: talk with customers/prospects to see how they use the product, read tweets and news mentioning Auth0 and the identity space.&lt;/li>
&lt;/ul>
&lt;p>I don&amp;rsquo;t feel I am &amp;ldquo;keeping in touch&amp;rdquo; as much as I&amp;rsquo;d like technology-wise, but I do try to. So many new important new things are happening in our industry every month that it is hard to keep up. Accepting the fact that meetings and not being hands-on means that I will likely be less in touch than I&amp;rsquo;d like with things is important. Once I accepted that I could start prioritizing what was valuable.&lt;/p>
&lt;p>I read books, carve out time to do some POCs or read blogs/papers about specific topics, and ask to lead specific initiatives to stay up to date with how we are developing even if I don&amp;rsquo;t code that often.&lt;/p>
&lt;p>&lt;strong>&lt;em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Yes, a lot! I am a member of our Engineering Leadership team. We meet twice a week to discuss topics around the organization. This, together with keeping an ear to the ground, and being part of meetings about mid-term plans helps me know about (and sometimes propose) opportunities that might be available ahead.&lt;/p>
&lt;p>Whenever that happens I typically propose the names of people that I believe would benefit from that opportunity, explain why I think they would be good at it, and, if helpful, offer to mentor them in case there are any perceived skill gaps.&lt;/p>
&lt;p>&lt;strong>&lt;em>You first got the title Principal engineer at Auth0. Were you hired as a Principal engineer? If not, what was the process of getting promoted to Principal?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>My story here is a particular one. I started at Auth0 in May 2014 as the fifth engineer, ~tenth employee. There were no titles, no ladder, nothing like that. Around 2015, I started mentoring and doing 1:1s with a couple of new hires. Towards the end of 2015, I was working on my initiatives, and also leading others, helping with hiring, etc. Late 2015 &lt;a href="https://twitter.com/woloski">Matias Woloski&lt;/a>, Auth0&amp;rsquo;s CTO and co-founder, was looking for someone to lead Engineering teams and he asked me if I would be a Director of Engineering.&lt;/p>
&lt;p>I&amp;rsquo;ve been privileged enough to be able to approach my career in a way that maximizes learning and opportunities for hard problem-solving. That&amp;rsquo;s the main principle that helps me make decisions. When he offered me, a 25 year old living in Argentina, the opportunity to lead the Engineering organization for a &amp;ldquo;Silicon Valley,&amp;rdquo; remote-first company that was growing exponentially I naturally said &amp;ldquo;yes.&amp;rdquo; I had never thought &amp;ldquo;I want to manage,&amp;rdquo; it just happened because I wanted to learn and solve hard problems.&lt;/p>
&lt;p>&lt;img src="https://staffeng.com/damian-schenkelman/Damian-Schenkelman1.jpg" alt="">&lt;/p>
&lt;p>Things worked out great. I learned a lot about building teams, organizations, leading people, etc. Because I was one of the first engineers, had built a lot of the systems and I enjoyed technical conversations I also did a lot of technical leadership in that role, both with Product and Platform/Infrastructure teams. Towards early 2019 as a Director of Platform, I started thinking that I was not learning as fast as before and that I wanted a broader scope than just working on our platform. After many conversations with &lt;a href="https://twitter.com/cmccarrick">Christian McCarrick&lt;/a>, Auth0&amp;rsquo;s VP of Engineering at the time, I realized that the challenge I wanted to take up next would be being one of Auth0&amp;rsquo;s technical leaders. I transitioned to Principal Engineer in August 2019.&lt;/p>
&lt;p>&lt;strong>&lt;em>What two or three factors were most important in you reaching Principal? How have the companies you joined, your location, or your education impacted your path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>A quote I love from Seneca is &lt;em>&amp;ldquo;Luck is what happens when preparation meets opportunity.&amp;rdquo;&lt;/em> Getting to Principal required getting some things right, but also a lot of luck. I want to call out some of the key factors that got me to Principal and also show how luck played a part in them.&lt;/p>
&lt;p>&lt;strong>First job:&lt;/strong> In Argentina it&amp;rsquo;s common to start working while you are in University. When I finished high school I found a job at a fantastic company called &lt;a href="https://www.southworks.com/">Southworks&lt;/a>. The two key things about that place were that:&lt;/p>
&lt;ul>
&lt;li>the company worked on projects with cutting edge technologies, which gave me lots of opportunities to hone my learning skills&lt;/li>
&lt;li>the company worked mainly as a Microsoft US vendor remotely, which meant that not only technical skills were valued, but also we got to practice communication, expectation management, and other interpersonal skills often.&lt;/li>
&lt;/ul>
&lt;p>The reason I could work in software right out of high school was that when I was eleven I started telling my mom I wanted to &amp;ldquo;build video games&amp;rdquo; and my parents found and paid for a high school that taught programming.&lt;/p>
&lt;p>&lt;strong>How luck played a part:&lt;/strong> I was about to take a job at another company when a friend of mine from high school told me her brother worked at Southworks and they were looking to hire junior people. He did a good job selling the company to me and I decided to put the other opportunity on hold to see if I could get into Southworks.&lt;/p>
&lt;p>&lt;strong>Auth0:&lt;/strong> I was one of the first engineers at Auth0 and over the years I worked on many parts of its product and infrastructure, which makes it easy for me to help people and provide valuable input on various topics. Being a Director of Engineering also helped me understand many things about our business that help me be a more effective contributor.&lt;/p>
&lt;p>&lt;strong>How luck played a part:&lt;/strong> the success of any startup requires a lot of luck at many different points in time. If Auth0 had not grown as it did, I wouldn&amp;rsquo;t have had the opportunities to learn what I did and be where I am. This is particularly important because I live in Argentina where the Software industry is much smaller than it is in the US and most companies don&amp;rsquo;t have dual tracks.&lt;/p>
&lt;p>&lt;strong>Team sports:&lt;/strong> I played basketball as a kid and during my teens and I realized early on it felt a lot better to win by scoring any amount of points than to lose scoring lots of points. That shaped how I worked in two ways:&lt;/p>
&lt;ul>
&lt;li>it led me to help team members often to see how we could succeed as a team&lt;/li>
&lt;li>it led me to learn and do things that would be required to &amp;ldquo;cover gaps,&amp;rdquo; which helped me build leadership and interpersonal skills that are very useful as I grew in my career&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&lt;em>There is a popular idea that becoming a Staff engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I did not. Because of how I grew at Auth0 I kind of &amp;ldquo;skipped that part&amp;rdquo;. As a Director at a startup, I got the opportunity to technically lead a lot of big, critical initiatives, but there was no specific/explicit &amp;ldquo;staff/principal project.&amp;rdquo;&lt;/p>
&lt;p>I think implicitly the closest thing to a &amp;ldquo;Staff Project&amp;rdquo; was the work I led in 2017 &amp;amp; 2018 to increase the reliability and scalability of Auth0, leading some projects to offer higher SLAs for a subset of our key customers.&lt;/p>
&lt;p>&lt;strong>&lt;em>What piece of advice do you have for someone who has just started as a Staff engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Staff means different things at different places, so the first piece of advice I would give is to talk to as many people as possible to define expectations where they are.&lt;/p>
&lt;p>The next thing I would tell people is to be patient. They probably got to where they are because they are fairly technical and got results, but as you grow in the ladder the outcome of your work takes time to develop. You might be working on more things at once, and the impact of them has a longer time horizon. You are also now influencing more people in different roles, and sometimes it takes them longer to &amp;ldquo;see&amp;rdquo; the things that you might see clearly. Being patient, progressively influencing people, and teaching others pays off long term.&lt;/p>
&lt;p>Finally: get used to writing things down and repeating them to others. Writing down thoughts, plans, reasoning, and standards is the way you will scale yourself. When you document something you make it easy for anyone to access it and read in the future, it is easier to reference. It is a lot better than &amp;ldquo;just talking about it&amp;rdquo;: it scales better and it also reduces the chances of things being misunderstood. Repetition is also necessary as just publishing written documents is not useful, so you have to share your ideas with people. Hosting AMAs, brown bags, and other sessions to explain what your thoughts are very valuable.&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>Some of Damian's writing&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://yenkel.dev/posts/achieving-alignment-and-efficiency-through-a-technical-strategy">Achieving Alignment and Efficiency Through a Technical Strategy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yenkel.dev/posts/starting-a-personal-mentoring-program-at-work">Starting a Personal Mentoring Program at Work&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yenkel.dev/posts/jiro-dreams-of-sushi-lessons-for-saas">'Jiro dreams of sushi' lessons for SaaS&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;strong>&lt;em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I wasn&amp;rsquo;t planning for it, but when the opportunity came to be Director I took it. However, my thinking is that &lt;a href="https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/">there&amp;rsquo;s a pendulum&lt;/a> where you can go back and forth between the two paths. How easy it will be will depend on the company and how specialized the skills as a Staff/Principal are, but I think it is possible.&lt;/p>
&lt;p>Nowadays I am very interested in continuing to develop my technical skills and leadership skills, as that&amp;rsquo;s what I think will bring the most valuable learnings and challenges.&lt;/p>
&lt;p>&lt;strong>&lt;em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I try to follow people on Twitter who I think are doing interesting things and from who I can learn. There are so many people doing interesting things and so much to learn! Some of the names that come to mind:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://twitter.com/aphyr">Aphyr&lt;/a>&amp;rsquo;s work with &lt;a href="https://jepsen.io/">Jepsen&lt;/a> and general content about distributed systems is great.&lt;/li>
&lt;li>&lt;a href="https://twitter.com/whereistanya">Tanya Reilly&lt;/a> has some very good content like &lt;a href="https://engineering.squarespace.com/blog/2019/the-power-of-yes-if">RFC process @ Squarespace&lt;/a> and &lt;a href="https://www.youtube.com/watch?v=KClAPipnKqw">Being Glue&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://twitter.com/davidfowl">David Fowler&lt;/a> shares a lot of content about the .NET Framework and ASP.NET internals which I find interesting. There&amp;rsquo;s also this video of him sharing how he became the &lt;a href="https://channel9.msdn.com/Shows/Careers-Behind-the-Code/Becoming-the-ASPNET-Architect-with-David-Fowler">ASP.NET Architect&lt;/a>.&lt;/li>
&lt;li>At Auth0 I work with &lt;a href="https://www.linkedin.com/in/jon-allie-b250296">Jon Allie&lt;/a> who is a fantastic engineer and person. He strives for simplicity, can explain things very clearly, and is extremely humble considering how much he knows.&lt;/li>
&lt;/ul>
&lt;p>I haven&amp;rsquo;t found a lot of books or similar content specific to senior &amp;ldquo;individual contributors&amp;rdquo; (might be interesting to write one). I recently read &lt;a href="https://www.oreilly.com/library/view/fundamentals-of-software/9781492043447/">Fundamentals of Software Architecture&lt;/a> that does a fairly good job at describing that role while also understanding the nuances and gray areas of it.&lt;/p>
&lt;p>Some books about management are useful to get organizational awareness and help with mentoring, 1:1s, hiring which are things one typically helps with as a staff-plus engineer. In &lt;a href="https://www.amazon.com/dp/B015VACHOK/">High Output Management&lt;/a> Andrew Grove refers defines the &amp;ldquo;know-how manager&amp;rdquo; as &amp;ldquo;people who may not supervise anyone directly but who even without strict organizational authority affect and influence the work of others&amp;rdquo;, which sounds an awful lot like staff-plus engineers. I strongly recommend &lt;a href="https://www.amazon.com/Managing-Humans-Humorous-Software-Engineering/dp/1484221575/">Managing Humans&lt;/a> as it shares stories that are easy and fun to read, and also helps generate empathy with managers, which is important as a staff-plus engineer. &lt;a href="https://www.amazon.com/dp/B00GOZV3TM/">The 7 habits of highly effective people&lt;/a> is also a book that has a lot of good lessons for staff-plus engineers.&lt;/p>
&lt;p>&lt;a href="https://www.amazon.com/dp/B07B9F83WM/">Accelerate&lt;/a> is another great book that helps tie company success to engineering practices and outcomes in a way that is useful to influence stakeholders, especially at an executive level.&lt;/p></description></item><item><title>Katie Sylor-Miller - Frontend Architect at Etsy</title><link>https://staffeng.com/stories/katie-sylor-miller/</link><pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/katie-sylor-miller/</guid><description>&lt;p>&lt;em>This story was recorded in August, 2020. Learn more about Katie on her &lt;a href="https://sylormiller.com/">website&lt;/a>, &lt;a href="https://www.linkedin.com/in/ksylor/">Linkedin&lt;/a>, and &lt;a href="https://twitter.com/ksylor">Twitter&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;strong>Tell us a little about your current role: your title, the company you work at, and generally what sort of work does your team do?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I work at Etsy, which is the world&amp;rsquo;s leading online marketplace for sellers of handmade goods. We let sellers put their items up for sale and sell them to folks all around the world. We really focus on providing people with unique, special or handmade goods that are an alternative to kind of the facelessness of big box stores.&lt;/p>
&lt;p>I&amp;rsquo;m currently on the Frontend Systems team, which is a product infrastructure team that’s responsible for our frontend architecture - including our PHP view rendering framework, although I&amp;rsquo;m not super actively participating in the work that the team is doing right now. For the last several months I’ve been focusing on web performance - functioning in an advisory capacity for all things performance - improving our monitoring and reporting systems, identifying areas for improvement, and being available to product teams for help with performance related questions.&lt;/p>
&lt;p>Web Performance is something that I think many companies either ignore or don’t focus on. When I started at Etsy, we had a great performance culture thanks to folks like Lara Hogan, but due to organizational changes a few years ago, we no longer had a web performance team, and I think that as an organization, we rested on our laurels and deprioritized web performance. Now, we’re bringing it back to the forefront because there have been a lot of changes in the industry around how “good” performance is defined and measured, particularly for SEO. Google is really pushing for web performance being a criteria that companies focus on as part of their search ranking. So it’s very much a top of mind area, especially for retailers.&lt;/p>
&lt;p>&lt;strong>&lt;em>What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>The interesting thing to me about how we think about the role of a “staff engineer” is that we take two different ways that a person can be senior and we put all of those people into one bucket called staff engineer. But really, there are two different buckets.&lt;/p>
&lt;p>Someone can become really senior in their role by being an expert in a particular subject area, by really taking on the role of tech lead, where they are driving their team or org’s technical approach and roadmap. Then there&amp;rsquo;s this other way to be a senior engineer, which are the folks who broaden their scope of work and their focus such that they&amp;rsquo;re thinking about problems that are cross cutting, they&amp;rsquo;re driving the creation of systems and practices that operate across multiple teams. That second bucket is what I think of as an architect. It’s not that you aren&amp;rsquo;t a subject matter expert, but it&amp;rsquo;s just that the scope of influence that you have is greater than operating as a tech lead for a particular team.&lt;/p>
&lt;p>At Etsy we have a few levels of seniority: Senior Engineer I and II, then Staff I and II, then Senior Staff which is considered equivalent to a Director level role. I&amp;rsquo;m technically a Staff Engineer II, and that’s how I think of myself, but my specific role is as the frontend architect. That means instead of being responsible for just what my team is doing, I’m responsible for looking at what all of Etsy is doing in the frontend space. What does the future look like? What are the problems we need to solve? How are we going to get there? I think about all that, and advocate for the technical approaches that will get us there at the company level.&lt;/p>
&lt;p>&lt;strong>&lt;em>In your role as an architect, do you spend much time doing software development?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Yeah, it&amp;rsquo;s funny. I’m a frontend architect, but by far the main thing I&amp;rsquo;ve been writing lately is SQL, because I&amp;rsquo;m doing a lot of data analysis. I’ve been looking at our performance metrics to figure out where the areas for improvement are, and what would be the most impactful issues to fix to improve performance and business metrics. I will write little bits of JS or PHP here and there, but it&amp;rsquo;s mostly to help unblock teams or to run small performance-related experiments, or if there is something important that needs to be done but other folks don’t have time for.&lt;/p>
&lt;p>I’ve definitely found that I&amp;rsquo;m moving slower, and it&amp;rsquo;s taking me longer to actually find the dedicated focus time to write code as my calendar fills up with meetings. So I don&amp;rsquo;t think you want me to write much code anymore! I’m much more focused on identifying areas for opportunity and then trying to sell that as work that my team or other teams should be doing.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you spend your time day-to-day?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I would say 50% meetings, and the rest of the time it varies pretty widely from day to day. Sometimes I spend the other 50% writing docs, sometimes I&amp;rsquo;m in SQL doing a lot of data analysis, sometimes I&amp;rsquo;m in Slack talking to people across multiple teams and roles. At times my meeting load will spike a bit as projects come into my lap where I&amp;rsquo;m reaching out to other teams to learn more about what they&amp;rsquo;re working on, or trying to influence them to make changes. It varies pretty widely.&lt;/p>
&lt;p>&lt;strong>&lt;em>I’ve found that folks in these roles often struggle to quantify their work, have you found any useful ways to measure your impact?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I&amp;rsquo;m glad to hear that because it is something that I really, really struggle with. I always have a bunch of different projects and discussions happening at any given time, and I have a bad tendency to get caught up in the newest thing or let my focus wander, so I have to be really thoughtful and cognizant about how I organize my work and my notes. I&amp;rsquo;m always looking at everything that I could potentially be doing and picking what is the most impactful or the most important thing for me to do that day, and that can be really hard.&lt;/p>
&lt;p>I didn&amp;rsquo;t realize, until I moved into the architect role, how much I relied on sprints and JIRA boards and the ritual of completing a ticket and moving it to the “done” column as a way to check in with myself and know that I am accomplishing the things that I need to accomplish. Now that I don’t have that kind of team context to help me organize my day, I&amp;rsquo;ve had to rely much more on my own to-do lists and I’m still working to improve my systems for that.&lt;/p>
&lt;p>One thing that has definitely been helpful is making sure that I’m keeping track of all of the different tasks I complete every day - logging meetings, emails, Slack discussions, etc. Then, when I have my official quarterly goals check-in with my manager, I review all of my notes and realize, wow, I helped engineers fix performance issues on six different experiments, or I influenced this team to take a better direction with their new feature, or I gave that engineer feedback that helped them. These are all little things that in the moment don’t feel like much, but taken together show real impact.&lt;/p>
&lt;p>&lt;strong>&lt;em>Where do you feel most impactful as a Staff-plus engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>What I absolutely love to do the most is to identify a new or unique problem that hasn’t been tackled before, come up with a wild idea to solve the problem, and then my brilliant coworkers take that idea and really run with it to build something awesome. It starts with taking in a ton of input from the work folks are doing - seeing that this team has a problem doing x, and another team has a problem doing y. Then you mix all that input up with your experience and what’s happening in the industry as a whole and let it sit in your brain for a while, until finally it all clicks and you realize that the deeper cause underlying both problems is z, so you come up with a plan to fix that problem which is really hard to fix.&lt;/p>
&lt;p>An example of this process from before I moved into the Architect role was when my team owned our Design System components. Making changes or fixing issues with our shared components was really difficult because we didn&amp;rsquo;t have a single source of truth for the markup and the templates for each component. Rather than everyone in the company reusing the same template file, folks were copying and pasting the HTML into a bunch of different places. So when we had to make changes to a component, it was hard to find all the places to update because the pieces of the component were spread out and managed in different places - sometimes in JavaScript, sometimes in Mustache, sometimes in PHP logic.&lt;/p>
&lt;p>So I had this wild idea: what if we extended our custom PHP framework to enable reusable template blocks in mustache that represented all of our components, and we were able to easily compose them together the way that you would in a React application. I went out and made a proof of concept and wrote up a proposal for the project and brought that to the team. Then the team really took the ball and ran with it, they built the infrastructure to support this component system and it turned out far better and more robust than anything I could have done on my own.&lt;/p>
&lt;p>The part that I really enjoyed was identifying the problem and thinking creatively about how we can solve it, then shopping the proposal around and getting other people engaged with the work to execute it.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can people doing frontend work create leverage for a company similarly to folks in developer productivity or infrastructure roles?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Yes, most definitely. I personally only know a handful of other Frontend-specific staff engineers, and I think that frontend as a skillset is not valued in the industry as much as I think that it should be. I&amp;rsquo;m very lucky that I got my foot in the door at a place like Etsy, which tends to hire “full stack” engineers, by having computer science fundamentals in my background - I went to school for Computer Science, and I have experience working in and understanding the whole stack. But really, my passion and my focus has always been the frontend because it’s what’s in front of your users. I&amp;rsquo;d love to see more companies value the frontend, because I believe we bring valuable skills and a unique way of thinking to the table.&lt;/p>
&lt;p>As far as becoming a staff engineer, I think that the qualities of a good Staff Engineer transcend what stack you&amp;rsquo;re working in. Ultimately, staff engineers need to be able to think about engineering decisions as a series of tradeoffs, and articulating those tradeoffs is a skill that you can have from any perspective within the stack.&lt;/p>
&lt;p>I also think that Staff Engineers should have a broad understanding of all of the adjacent fields of work to their own specialty. For me, working in the frontend, I put a lot of time and effort into understanding marketing, business goals, user experience, visual design, the view and business logic layers on the server, how we ship code to the browser, how browsers take all that code and turn it into a website, and then how users interact with it. Having expertise in all of these different areas makes it easier for me to see the broader impact of my technical decisions and understand those tradeoffs better.&lt;/p>
&lt;p>Having empathy for your users, in particular, is an important skill for all types of engineers to develop, and I think it can be undervalued in many infrastructure or developer support orgs that don’t understand that yes, they actually do have users! I work in Frontend Infrastructure, and we really try to see ourselves as product engineers - it’s just that the products we&amp;rsquo;re building are systems for other engineers to use. So we have customers. We have users. When we think about the API for the systems that we build, we&amp;rsquo;re designing our APIs for users, and we need to understand our users - aka product engineers - to do that well.&lt;/p>
&lt;p>So I personally think that frontend-leaning folks make great Staff Engineers, because they&amp;rsquo;re so used to constantly thinking about users and how users are going to interact with what they build. User empathy is a superpower that frontend people bring to the table.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you maintain empathy and awareness of the realities of developing at your company when you do less development yourself?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Networking, networking, networking, networking. One-on-ones are particularly important because I&amp;rsquo;m a full-time remote. Obviously, everyone&amp;rsquo;s remote right now, but as a remote on a not-completely-distributed team, you have to be really cognizant of who you&amp;rsquo;re talking to, and make sure that you have connections across multiple teams and multiple groups to leverage those networks.&lt;/p>
&lt;p>At Etsy, we are really lucky that we have a few different Employee Resource Groups for folks to connect across the company. I’m fairly active in the ERG for marginalized gender identities in tech (MAGIC), and it&amp;rsquo;s great because there are folks who are part of that community who work in every single department in engineering. The same is true with the community of remote employees. I make time to mentor more junior folks, have regular 1:1’s, and participate in Slack discussions to foster and grow these connections, because it helps so much to have a finger on the pulse of what’s happening broadly in the org. I also try to make sure that I&amp;rsquo;m talking to engineers throughout product engineering in particular, because product engineers are our customer base.&lt;/p>
&lt;p>Something I&amp;rsquo;m working on getting better about is connecting a lot more with managers. For a long time I&amp;rsquo;ve had really good networks inside the Individual Contributor track and I&amp;rsquo;ve been working a lot in the last few months on broadening the reach of my network to include more engineering managers. A lot of times the work that I do requires “influence without authority”, I’m not making the decisions myself, but trying to influence the decisions that others are making, and a lot of times, managers are the ones who make the final decisions on things.&lt;/p>
&lt;p>&lt;strong>&lt;em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I was very lucky to work with Lara Hogan for a few years at Etsy and she&amp;rsquo;s talked a ton about sponsorship and as a woman in tech I&amp;rsquo;ve benefited from and seen the value of sponsorship myself. I definitely put a lot of time and energy into that.&lt;/p>
&lt;p>About a year and a half ago, my colleague Andy Yaco-Mink, another Staff Engineer, and I noticed there wasn’t really a good method of communication for product teams to share what they are working on with each other, or to connect with teams working on product infrastructure. To try and fix that, we proposed and started up a monthly meeting that we call the Product Engineering Confab. It’s an open forum for folks to bring up questions, share their work, celebrate wins, and for us folks in infra to share what we’re working on.&lt;/p>
&lt;p>Something that I don’t think we fully anticipated is that it&amp;rsquo;s also been a really great way to create opportunities for sponsorship . Every month Andy and I have to figure out what folks are doing that would be interesting to share more broadly. What are experiments that have run that have gotten interesting results? Who’s out there doing cool stuff that should be shared? Then we’ll reach out to engineers on those teams and say, “You should come and talk about what you&amp;rsquo;ve been working on at the confab!” It&amp;rsquo;s really easy. It&amp;rsquo;s five minutes. It&amp;rsquo;s super informal, but it&amp;rsquo;s a good way to get public speaking experience.&lt;/p>
&lt;p>Since then, we&amp;rsquo;ve had a couple of folks who&amp;rsquo;ve come and spoken at the meeting, and then went on to speak at company all-hands meetings or local meetups. At least one person ended up giving an expanded version of their talk at a big conference. We’ve also heard from folks that giving a talk at the confab was something they used as evidence of leadership in their promotion packet, which is an amazing feeling!&lt;/p>
&lt;p>&lt;strong>&lt;em>You first got the title Staff engineer at your current company. What was the process of getting promoted to Staff?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I was hired as a Senior Engineer because at the time we didn’t hire into the Staff title, although we’ve since changed that policy. I was working in the industry for almost ten years before I joined Etsy, but largely at smaller and lesser known companies. I’d been serving as a frontend tech lead for more than five years before I came to Etsy. Because of that, I was already extremely comfortable in the role of being a mentor and a leader. I’d already spent a lot of time working closely with management, product and design, as well as figuring out roadmaps and execution. Altogether, I felt like I had the tech lead role down pat.&lt;/p>
&lt;p>But, when I came to Etsy the scope was much bigger than what I’d seen previously. The engineering department was many magnitudes bigger than any engineering department I’d worked at before. I had a lot to learn about operating at a really big scale and how that’s very different than when you’re at a smaller company. I learned to be more cognizant of looking at data: I had to go out and teach myself basic statistics to understand the experimentation framework.&lt;/p>
&lt;p>From the beginning, though, I was always looking around for places we could improve. I came in and said, “Oh hey, we’re not doing this thing. We should be doing this thing.” For example, I noticed that folks had been writing the design system JavaScript components any old way, so I said “Let’s come up with a framework and a standard boilerplate for that.” It was such a small thing and it felt obvious to me, but it was a big improvement in our practices. I think a lot of what gets someone to Staff is noticing problems and acting on solving them proactively, instead of letting them go.&lt;/p>
&lt;p>Altogether, I had been at Etsy for a little less than two years when the promotion to Staff came. My manager at the time was brand new and didn’t know my track record, so we worked really closely and collaboratively on putting together my packet. I’ve heard experiences on both ends of the spectrum of manager-driven versus IC-driven, and I’m glad that I ended up being a big part of the promotion process. Especially being a remote, I think that unless you’re proactive a lot of your work can go unnoticed because it happens over Slack, in pull requests or documents, and not out in the open where managers tend to operate. You’re always going to be your best advocate, but that’s even more true as a remote. You have to put a lot of effort into making sure your accomplishments are out there and they’re known.&lt;/p>
&lt;p>&lt;strong>&lt;em>What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I’ve discussed a few things in this vein already: creativity, proactiveness, empathy, etc. Something I haven’t talked about enough is communication and transparency. A big part of being promoted to Staff is making sure that your work is visible, that people know your name and you have a good reputation.&lt;/p>
&lt;p>I’m lucky to be on a team that builds frontend infrastructure because we naturally write a lot of emails to everyone in engineering about the work we do, so we get a lot of visibility. But a bigger part of being in infrastructure is customer service - helping folks who come into your Slack channel with questions or issues to be solved. I worked in the service industry for several years before going back to school to finish my degree in computer science, and I always try to model the lessons I learned about customer service from that experience in every interaction I have with folks at work: be available, be humble, and focus on really hearing and understanding people’s needs. When you truly care about helping our colleagues it shows.&lt;/p>
&lt;p>&lt;strong>Do you think some companies are particularly good at growing Staff engineers?&lt;/strong>&lt;/p>
&lt;p>To be perfectly honest, I don’t really know how Staff engineering works at companies other than Etsy, so I am totally biased! I think Etsy is good at growing Staff Engineers because we have a strong internal culture that values technical excellence combined with a culture of blamelessness and a desire to do good in the larger world. I think that leads to really smart and kind people working at Etsy, and that combination of intelligence and humbleness makes folks great staff engineers. This kind of environment feeds on itself, creating good role models and people who want to emulate those role models in order to get promoted. So I think that on the whole, we have a great cohort of folks who work or have worked at Etsy and model good practices for Staff Engineers.&lt;/p>
&lt;p>I think it’s important to remember, though, that there are lots of smaller and less-well-known companies with amazing people who do Staff engineering type work, but aren’t called staff engineers, they’re acknowledged as technical-track leaders in other ways. In many companies people who are strong technical leads become managers, and might not even have the idea of something like a Staff engineer role. It’s easy in a big name company to get stuck on this title of Staff as the end-all be-all, but remember that there are as many different ways of growing your career.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>One of the best pieces of advice that someone gave me, and that I make sure to pass on to other staff engineers, is that there&amp;rsquo;s a misconception that you become a Staff Engineer and then you’ll be in control of the work you do, and everyone will listen to you and do what you want them to do. That&amp;rsquo;s absolutely the opposite of what happens! You have this really tangible goal of getting a promotion for so long, and then you become a Staff Engineer, and all of a sudden, everything is vague and ambiguous. You transition from solving somewhat clear-cut problems, to being responsible for finding the right problems, and then figuring out how to convince people that it’s important to solve them. You are going to be challenged in a completely different way than you have been in your career thus far.&lt;/p>
&lt;p>&lt;strong>&lt;em>What’s your advice to people pursuing a Staff role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I was nominated for the Staff Engineer promotion twice before I got promoted; the third time was the charm. I think what finally pushed it forward for me was that I had a good sponsor in my Director. So my advice is to make sure that you develop your network and start meeting with your Director or your VP, because those are the people who are in the room making the decision about whether you’re getting promoted or not. It’s not your peers and it’s not really your manager, it’s this other group of people, so you want them to know your name and your work. During that promotion discussion, you want them to think, “Oh, she sent that engineering-wide email about this project.” or “I see him in Slack answering people’s questions all the time.” or “They spoke at that conference, didn’t they?”&lt;/p>
&lt;p>When folks, particularly women and non-binary people, come to me for advice, I think they expect me to talk about how to grow as a technical leader, and are surprised when I say “You’ve probably already got the technical chops, what you need to do is work on your reputation at the company.” For better or for worse, you can’t get to Staff without a good reputation. I think people want or expect it to be a meritocracy, when it’s really not. There are so many factors that go into getting a Staff-level role.&lt;/p>
&lt;p>&lt;strong>&lt;em>Advice for navigating uncertainty and ambiguity that comes with more senior roles?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>It’s important to develop a lot of self-knowledge to see when you’re pursuing something because it’s what you want and not because it’s going to be beneficial for the organization. That can be really hard to do. You have to be ready to kill your darlings, pivot, and try something new. If an approach you’re taking doesn’t work, don’t try to force it.&lt;/p>
&lt;p>I also really love &lt;a href="https://blog.danielna.com/talks/pushing-through-friction/">Dan Na’s talk about pushing through friction&lt;/a>, because that’s something you experience constantly when you’re growing as a technical leader. I think about this concept of “influence without authority” a lot, because when you’re a Staff Engineer then your job is to figure out what the team or organization needs to do, align the organization around that goal, and figure out how to get people to do that when you have no authority over staffing or final decision making. It takes a lot of tenacity and you have to flex a whole bunch of quote-unquote non technical skills to push things forward.&lt;/p>
&lt;p>&lt;strong>&lt;em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>A lot of names that I’ve already said, especially &lt;a href="https://larahogan.me/">Lara Hogan&lt;/a>, &lt;a href="https://blog.danielna.com/">Dan Na&lt;/a>. I just love everything that &lt;a href="https://jvns.ca/">Julia Evans&lt;/a> does and I am really lucky that I got to collaborate with her on a project. &lt;a href="https://www.ryn.works/">Ryn Daniels&lt;/a> who used to work at Etsy blogs a lot on career progression. &lt;a href="https://noidea.dog/">Tanya Reilly&lt;/a> is a big inspiration to me as another badass working Mom who is also a respected technical leader. In the frontend space, &lt;a href="http://www.stubbornella.org/content/">Nicole Sullivan&lt;/a>, &lt;a href="https://jensimmons.com/">Jen Simmons&lt;/a>, and &lt;a href="https://ethanmarcotte.com/">Ethan Marcotte&lt;/a> are huge inspirations to me to name just a few. I really enjoyed reading Camille Fournier’s &lt;a href="https://www.amazon.com/dp/B06XP3GJ7F/">The Manager’s Path&lt;/a>. I’ve never done the management track so it was a bit of a black box and anything that gives you insight into the world of management is helpful because as a Staff Engineer you’re almost like a manager without the people aspect.&lt;/p></description></item><item><title>Promotion packets</title><link>https://staffeng.com/guides/promo-packets/</link><pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/promo-packets/</guid><description>&lt;p>Some folks think of their promotion packet as the capstone of reaching a Staff-plus role, but I’ve seen many folks succeed by taking the opposite approach: starting to write their first Staff promotion packet long before they think they’re likely to be promoted to Staff, much the way they might use a &lt;a href="https://jvns.ca/blog/brag-documents/">brag document&lt;/a>. Used this way, your packet becomes the map to accomplishing your goal.&lt;/p>
&lt;p>It’s likely your company will have its own format for promotion packets, and &lt;em>eventually&lt;/em> you’ll need to translate your packet into that format before it’s submitted to an internal promotion committee or process, but there’s no need to rush it. You’ll spend more time relying on it as a guide than as a formal artifact for official review, so optimize for the former.&lt;/p>
&lt;p>For traversing towards your Staff-plus promotion, a general template format that’s useful is:&lt;/p>
&lt;ul>
&lt;li>What are your Staff projects? What did you do? What was the project’s impact (including a &lt;a href="https://lethain.com/goals-and-baselines/">well-defined goal&lt;/a>)? What made this project complex? Keep it very short and then link out to supporting design documents&lt;/li>
&lt;li>What are the high-leverage ways you’ve improved the organization?&lt;/li>
&lt;li>What is the quantifiable impact of your projects? (Did you increase revenue by $10 million? Did you reduce year-on-year customer support tickets by 20%?)&lt;/li>
&lt;li>Who have you mentored and through what accomplishments?&lt;/li>
&lt;li>What &lt;a href="https://www.slideshare.net/TanyaReilly/being-glue">glue work&lt;/a> do you do for the organization? What’s the impact of that glue work?&lt;/li>
&lt;li>Which teams and leaders are familiar with and advocates for your work? What do they value about your work? One sentence, include data (e.g. survey data) when possible&lt;/li>
&lt;li>Do you have a real or perceived skill or behavior gaps that might hold you back? For each, how would you address the concern? One sentence each&lt;/li>
&lt;/ul>
&lt;p>It’s useful to spend some time to write out those answers yourself, but getting promoted into a leadership role isn’t a solo activity &amp;ndash; it’s something you can only accomplish with a team of folks supporting you along the way.&lt;/p>
&lt;p>The approach that I recommend for iterating on your packet is:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Answer why you’re doing this&lt;/strong>. Many folks choose not to pursue the Staff level; you should have a reason why this is important to you. If you don’t, you’re liable to find yourself in a role you don’t enjoy.&lt;/p>
&lt;p>&lt;a href="https://staffeng.com/stories/michelle-bu">Michelle Bu warns&lt;/a>,
&lt;em>“My first piece of advice to engineers is that they should avoid pattern matching in ways that lead them towards work they don’t enjoy. I’m deeply energized by the work I do, partnering with teams to solve abstract modeling and design problems. It takes a certain amount of fortitude to try again and again after many rounds of feedback. To be honest, it’s not for everyone. If you’re more focused on hitting Staff than on setting yourself up to do work that energizes you, it’s easy to end up stuck in a role you don’t want.”&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Temper your expectations.&lt;/strong> Promotions, especially at this level, are built over quarters, halves, and years. Avoid the expectation of instant results&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Bring your manager into the fold.&lt;/strong> Bring the &lt;em>promotion packet&lt;/em> to your next 1:1 with your manager, and tell them that attaining a Staff promotion is a goal of yours. Review the empty packet with them, and ask them what’s missing, what to emphasize, and if they’d recommend adding steps to the workflow. Your goal is to ensure they know this is something you’re interested in and to solicit their guidance on your approach.&lt;/p>
&lt;p>&lt;a href="https://staffeng.com/stories/ritu-vincent">Ritu Vincent suggests&lt;/a>,
&lt;em>“People frequently come to me and ask, ‘What should I do next to reach Staff?’ One of the things that I tell them is to be super open and honest with their manager about what you want from your career. A mistake I made early on in my one-on-ones was telling my manager what I thought they wanted to hear, instead of what I actually felt.”&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Write the &lt;em>promotion packet&lt;/em>.&lt;/strong> Sit down for an hour and throw all your ideas together in a first version&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Edit the &lt;em>promotion packet&lt;/em>.&lt;/strong> Wait two days, reread your &lt;em>promotion packet&lt;/em> and edit for content, clarity, and context&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Edit the &lt;em>promotion packet&lt;/em> with peers.&lt;/strong> Share your &lt;em>promotion packet&lt;/em> with several trusted peers to get feedback, preferably peers already in a Staff-plus role. Peers are often better at identifying your strengths and contributions than you are, and they are closer to your work than your manager might be&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Edit the &lt;em>promotion packet&lt;/em> with your manager.&lt;/strong> Share your &lt;em>promotion packet&lt;/em> with your manager and request feedback. Ask for a particular focus on enumerating gaps to address. Ask if you can spend time in the following 1:1 discussing the kinds of projects and opportunities to both address gaps and make the packet stronger&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Periodically review the &lt;em>promotion packet&lt;/em> with your manager.&lt;/strong> Continue to review the promotion packet with your manager during your career and performance-oriented 1:1s. Both you and your manager should use it to steer you towards demonstrating the promotion criteria over time. This is particularly important to do if your direct manager changes. Maintaining this sort of document and reviewing it across managers will help mitigate the loss of progress towards your promotion that often occurs after a manager change&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>If you methodically follow this advice, then you’ll put together your first Staff promotion packet long before you’re nominated for promotion. From there, you’ll use the packet to focus your attention and your partnership with your manager towards that goal. It won’t necessarily get you there quickly, and it even might not get you there at your current company, but it will consolidate your energy on the development and work that’ll move you towards your goal.&lt;/p>
&lt;p>When it finally does come time to write your formal packet, it’ll be a matter of editing down what you’ve collected into the official template rather than an archival process of dusting through years of effort. Hopefully, nothing &lt;a href="http://lethain.com/promo-pathologies/">goes awry in the promotion process&lt;/a>, and a Staff title follows.&lt;/p></description></item><item><title>Create space for others</title><link>https://staffeng.com/guides/create-space-for-others/</link><pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/create-space-for-others/</guid><description>&lt;blockquote>
&lt;p>At this point, I spend less time advocating for specific technologies or programs and more time empowering others to advocate for the technologies and programs that they think are important. I also try to be a source of knowledge and support that people can reach out to for feedback, especially on cross-cutting product decisions and on presentation of ideas to the rest of the organization.
- &lt;a href="https://staffeng.com/stories/michelle-bu">Michelle Bu&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>One of the best measures of your long-term success as a Staff-plus engineer is that the organization around you increasingly benefits from, &lt;strong>but doesn’t rely upon&lt;/strong>, your contributions. Because many folks reach their first Staff-plus role by being the “go-to” person for the organization, it can be a difficult transition from essential to adjacent.&lt;/p>
&lt;p>This transition requires learning to deliberately create space for the team around you and comes down to actively involving them in discussions, decisions, and ultimately substituting sponsorship for repeating the successes that got you to Staff in the first place.&lt;/p>
&lt;h2 id="discussions">Discussions&lt;/h2>
&lt;p>When you’re focused on maximizing your personal impact, a good discussion is one that ends quickly with a reasonable answer, alignment among the participants, and positive feelings among the participants. When you start thinking about creating space, the definition of a good discussion expands quite a bit!&lt;/p>
&lt;p>This broader definition depends on getting more folks involved and getting to a good set of decisions without much of your own personal contribution. A good discussion is, in this new world, one that it turns out you didn’t need to attend. When you make a key contribution, feel good about it, and then think about what needs to happen for someone else to make that contribution next time.&lt;/p>
&lt;p>Along with the shift in mindset, there are a few techniques that I’ve found helpful in creating more space in discussions:&lt;/p>
&lt;ul>
&lt;li>Shift your contribution towards asking questions. Asking the right questions &lt;a href="https://lethain.com/learn-to-never-be-wrong/">helps avoid missteps&lt;/a>, but also makes it easier for more folks to contribute&lt;/li>
&lt;li>If you see someone in the meeting who isn’t participating, pull them into the discussion. It works best to pull &lt;em>exactly one&lt;/em> person at a time into the discussion. It gets confusing when you open it up broadly to everyone or even just try to pull two or three people at once&lt;/li>
&lt;li>Be the one to take notes. This helps destigmatize note-taking as “low status” and also frees up an alternative would-be notetaker to contribute more instead. It also gives you something to focus on other than speaking!&lt;/li>
&lt;li>If you realize someone’s missing from the discussion who should be there, be the person to pull them into the next occurrence of the meeting. Talk with the meeting coordinator to let them know why it’s valuable to include them&lt;/li>
&lt;/ul>
&lt;p>As you follow these more and more faithfully, your speaking in meetings will shrink, and your impact on the organization will grow.&lt;/p>
&lt;h2 id="decisions">Decisions&lt;/h2>
&lt;p>For so much of your career, success is making the right decision, and it takes a while to realize that at a certain point making the decisions isn’t the work. &lt;a href="https://staffeng.com/stories/ritu-vincent">Ritu Vincent&lt;/a> described that transition well,&lt;/p>
&lt;blockquote>
&lt;p>It was also on that project where my manager helped me understand that my first impulse as a tech lead didn’t scale. Initially, I was thinking, “I’ll break it into twenty pieces, assign out eighteen pieces, and keep the two hardest for myself,” and my manager pushed me to delegate the hard pieces to the team to stretch and develop them.&lt;/p>&lt;/blockquote>
&lt;p>On the other hand, it’s hard to transfer your &lt;a href="https://staffeng.com/guides/staff-plus-interview-process">judgment&lt;/a> to someone else, particularly around complex decisions. Fortunately, it’s possible to take an incremental approach to shift increasingly complex and important decisions to your wider team.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Write it down.&lt;/strong> There’s a well-worn model of genius encapsulated in the Feynman algorithm: “1) Write down a problem. 2) Think very hard. 3) Write down the solution.” This mystical view of genius is both unapproachable and discouraging. It’s also unrealistic, but it’s hard for folks to know it’s unrealistic if we don’t write down our thinking process for others to follow. By writing down the process of finding an answer, as well as the rationale for the answer, folks around us can begin to &lt;em>learn from&lt;/em> our decisions rather than simply being &lt;em>directed&lt;/em> by them&lt;/li>
&lt;li>&lt;strong>Circulate early,&lt;/strong> and do it before you’ve crystallized on a decision. Most folks struggle to walk back from a formed opinion, and by gathering feedback early, it’s much easier to incorporate feedback and involve folks in the decision-making process so they can see the trajectory of your thinking in addition to the final output&lt;/li>
&lt;li>&lt;strong>Separate style from substance,&lt;/strong> and stop giving style feedback on other folks’ decisions. If a piece of feedback won’t meaningfully change a project’s success, then consider not giving it. If it’s useful but not critical, potentially make a private suggestion rather than pulling a meeting into your orbit&lt;/li>
&lt;li>&lt;strong>Don’t try to &lt;a href="https://lethain.com/showing-value/">show value&lt;/a>&lt;/strong>. Some senior folks feel like they need to weigh in on everything to justify their seniority. Others require each decision to exactly mirror a similar decision they once made. Both of these center insecurity over impact and prevent others from growing as leaders&lt;/li>
&lt;li>&lt;strong>Change your mind.&lt;/strong> One of the biggest signs of respect for your coworkers is listening to them and then changing your mind afterward. If senior leaders don’t change their mind, then soon everyone will correlate bluster with success&lt;/li>
&lt;/ul>
&lt;p>Involving folks in decisions you make and sharing your decision-making approach is a valuable component of growing the team around you, but what about making the decisions &lt;em>theirs&lt;/em>?&lt;/p>
&lt;h2 id="sponsorship">Sponsorship&lt;/h2>
&lt;p>By including folks in your discussions and decisions, you involve them in your work. This is a great way to grow, involve, and learn from those around you, but at some point, you have to take the next step.&lt;/p>
&lt;p>Instead of involving them in your work, make the work theirs.&lt;/p>
&lt;p>This final step is &lt;a href="https://larahogan.me/blog/what-sponsorship-looks-like/">sponsoring&lt;/a> others for the kind of work that got you to a Staff-plus role. When critical work comes to you, your first question should become, “Who could be both successful with and grown by this work?” See if you can get them to lead the work, and then work with them to scaffold the project for their success. What would your approach be? What are some initial concerns they might want to think through? Who are the stakeholders they should discuss the problem with early?&lt;/p>
&lt;p>When you identify new critical work, perhaps identifying a gap in your tooling or process, think about who else could be generating that work and then sit down with them to have them put together the proposal you planned to write. Then build support for their proposal just as you would have for your own.&lt;/p>
&lt;p>Importantly, when the work becomes theirs, you have to let it be theirs. Counsel, give advice, provide context, but ultimately sponsorship includes letting them take an approach that you wouldn’t. It might end up going poorly, and they’ll learn from that &amp;ndash; just like you’ve learned from your mistakes over your career. It might end up going very well, and then you’ll learn something instead.&lt;/p>
&lt;p>While sponsorship should become your default approach to problems, it shouldn’t be your only tool. Most Staff-plus engineers find it’s important to remain directly involved in some projects to retain their context of how their software, tooling, and organization work in practice. If you need a rule of thumb, keep a sponsorship journal and ensure you’re sponsoring others at least a few times a month &amp;ndash; if you find yourself sponsoring less frequently than that, dig into what’s stopping you.&lt;/p>
&lt;p>Conversely, if you look back and can’t think of anything you’ve worked on directly in the past few months, that’s worth course-correcting too.&lt;/p>
&lt;h2 id="what-if-you-dont">What if you don’t?&lt;/h2>
&lt;p>If you’ve cemented the final cobblestones to a Staff-plus role by becoming the “go-to person” for a key company leader, then you’ve learned that solving an urgent problem for an organizational leader is one of the surest paths to recognition. If you’ve become the technical visionary whose ideas saturate the company’s architecture roadmap, then you’ve learned how powerful it feels to operate the gate to your company’s technical future.&lt;/p>
&lt;p>It’s hard to give those up.&lt;/p>
&lt;p>However, the best case for this model is a company that &lt;a href="https://www.amazon.com/dp/B0058DRUV6/">thrives temporarily until that individual leaves&lt;/a>. The far more common worst case is a company constrained by your personal limitations, and the only company that can tolerate being constrained by you is a company that doesn’t grow.&lt;/p>
&lt;p>The only way to remain a long-term leader of a genuinely successful company is to continually create space for others to take the recognition, reward, and work that got you to where you’re currently sitting. It can be surprisingly uncomfortable, but don’t worry: there will always be new work for you anyway.&lt;/p></description></item><item><title>Ras Kasa Williams - Staff Engineer at Mailchimp</title><link>https://staffeng.com/stories/ras-kasa-williams/</link><pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/ras-kasa-williams/</guid><description>&lt;p>&lt;em>This story was recorded in July, 2020. Learn more about Kasa on &lt;a href="https://www.linkedin.com/in/raskasawilliams/">Linkedin&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;strong>&lt;em>Tell us a little about your current role: where do you work, your title and generally the sort of work that you and your team do.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I’m a Staff Engineer at Mailchimp, working in the Data Services engineering group. Data Services can be seen as the home of data engineering within the company. Our group builds systems that primarily support our data science and analyst teams (i.e. product analysts, finance analysts, marketing analysts, etc.).&lt;/p>
&lt;p>I have been serving as one of the tech leads in this group where I focused on building scalable data processing pipelines that power our internal analytics platform and supporting the advancement of critical business intelligence initiatives. I have been performing a significant portion of the Eng Manager responsibilities for the team as well (although I wasn’t formally the Eng Manager). After almost 2 years in this role, I am actively transitioning it to another engineer.&lt;/p>
&lt;p>&lt;strong>&lt;em>What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>At Mailchimp, once you become a Staff Engineer, you’re a member of “Engineering Leadership”. Since a formal engineering ladder was implemented only a couple years ago, the answer to &lt;em>“What does it mean to be a Staff Engineer?”&lt;/em> or &lt;em>“What does it mean to be a member of Engineering Leadership?”&lt;/em> will likely vary.&lt;/p>
&lt;p>In my view, it’s about thinking globally. That means partnering with other members of that cohort to understand the company–wide business / product strategy and distill that into an Engineering–wide technical strategy that seeks to enable execution for Product, Marketing, and our peers across other functions. That means partnering to improve on processes like hiring, onboarding, cross–team communication, and production operations. That means partnering to grow the entire department’s technical and social skills.&lt;/p>
&lt;p>It’s about taking that global thinking and applying it locally. That means aligning your team’s (technical) initiatives / roadmaps to the Engineering–wide technical strategy; and being intentional about when you veer off of that path to serve the needs of your team’s immediate stakeholders. That means collaborating with your team’s managers in adopting successful practices in hiring, onboarding, and production operations from other teams; and sharing practices from your team that would be beneficial for others. That means taking context from company–wide business / product strategy and translating that to how it impacts your team’s immediate projects. That means being intentional about creating opportunities for your team’s individual contributors to grow their skills, get visibility, and access to others across the company.&lt;/p>
&lt;p>Of course, I don’t get it right all the time. But it’s been a successful mode of operation for me.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you spend your time day-to-day?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>As mentioned before, I have been serving as one of the tech leads in Data Services (and performing a lot of the Eng Manager responsibilities).&lt;/p>
&lt;p>As tech lead, I was responsible for defining, and accountable for execution of, my team’s technical strategy and approach. I worked to underpin this strategy in its value to our internal customers (or the business) and effectively communicate that across the company when needed. A couple of times a year I reflected on what progress was made, and if anything had changed within the business that required adjustments to this strategy. I still contributed code regularly—certainly less than the rest of the engineers on my team; but it was important that I sustained &amp;ldquo;hand to keyboard&amp;rdquo; work to ensure that my technical strategy (and other macro–level decision–making) was informed by the on–the–ground experiences of the rest of my team. A focus for me was growing and developing the other engineers on the team as a result of the technical direction I set. More concretely: I worked to help my teammates (via mentoring or coaching) understand how to approach technical decision–making and how it should be underpinned by the customer / business problem it&amp;rsquo;s solving and the value it’s providing; I worked to help them understand how to drive engineering projects from problem statement to production release / long–term operations; I worked to help them understand the proper communication practices for different audiences (i.e. engineering peers, vs. engineering management, vs. non–technical stakeholders, etc.). In aggregate, I worked to help them get to a level of self–sufficiency where they can operate and communicate in a way that aligns with my technical strategy, direction, and approach without me having to be in the room or in the conversation.&lt;/p>
&lt;p>Our group doesn’t have product managers. But those needs around things like understanding internal customer needs and stakeholder management still exist. The recently hired Eng Manager for my team is accountable for this; but we shared a lot of the responsibility here. I did a fair amount of chatting with internal customers, answering quick one–off questions, understanding needs for new pieces of work (i.e. new datasets), recommending paths forward, setting expectations around when we’d be able to execute on the new piece of work, etc.&lt;/p>
&lt;p>Our group doesn’t have project managers either. But, again, those needs exist. I believe in empowering each team member to own the project management responsibilities for their assigned project (i.e. status updates to stakeholders, etc.). I did a fair amount of coaching on project management tactics like proactively communicating risks / blockers so that I can help unblock them and how to continuously deliver incremental value to maintain momentum.&lt;/p>
&lt;p>I spent a good amount of time building passive internal customer and business context. I’d occasionally read merged pull requests for repos that I didn’t maintain; I’d read tech specs and proposals that are shared publicly; I’d occasionally attend various internal presentations from the data science and analyst teams where they presented projects they completed or ideas they’re exploring. All of these are small tactics, but they aided in my situational awareness and was one key input into my team’s quarterly planning activities.&lt;/p>
&lt;p>As a tech lead, I was a member of the Eng Tech Lead Cohort. It’s a formal group of all of the tech leads across the Engineering department meant to share context, talk through ideas, and help advance the Engineering–wide technical roadmap. There’s some ad hoc conversations and work that may come out of this group from time to time. There’s also a recurring call for all Staff, Senior Staff, and Principal Engineers meant as a space to surface and discuss problems, assign owners and actions items when needed, and generally build community with each other. We have a close partnership with Google; they serve as our cloud provider. Occasionally, I’d spend time talking with our assigned partner team about challenges we’re running into, plans we have, proper approaches to solutions, formal training that would be helpful, etc.&lt;/p>
&lt;p>As I’m transitioning out of the tech lead role, there will definitely be a change in how I spend my time day–to–day. But I’m honestly not sure what that will look like.&lt;/p>
&lt;p>&lt;strong>&lt;em>Where do you feel most impactful as a Staff-plus engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>It’s always a rewarding feeling if I can end the work day and feel like I’ve helped my peers get unblocked and maintain momentum.&lt;/p>
&lt;p>That can mean helping one of my Data Services team members think through options for solving a complex technical problem and trade–offs like providing immediate value versus being sustainable long–term. Or helping them think through how to deeply investigate a new technology and if it can be applicable to solving one of our top 3 problems.&lt;/p>
&lt;p>That can mean helping a peer on another team think through their deliverables over the past quarter, whether those deliverables provided real business / customer value, and how to build a narrative around that impact to make the case for promotion.&lt;/p>
&lt;p>That can mean identifying that a short–term piece of “org work” is at a standstill because consensus wasn’t achieved, encouraging an involved peer to take ownership of making a decision (with proper feedback from interested parties), and drive it to completion.&lt;/p>
&lt;p>This is a feeling I’ve always felt throughout my career; I enjoy the success of my peers as much as I do my own. But taking on the tech lead role certainly elevated the importance of doing it. It morphed from something I just liked doing, to something that I liked and was also important for the health of the team I was responsible for.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done before reaching that title?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>As mentioned before, once you become a Staff Engineer at Mailchimp, you’re a member of Eng Leadership.&lt;/p>
&lt;p>It’s noticeable that Staff+ Engineers generally have more agency and ownership of their time. They encounter less resistance when they make time for work outside of their primary responsibilities. This has certainly been my personal experience.&lt;/p>
&lt;p>I’ve also had a lot more organic opportunities to coach, mentor, and generally support more peers outside my team. It was something I was certainly doing before being promoted to Staff Engineer; but it noticeably increased. It’s definitely a rewarding part of my work day, so I welcome it.&lt;/p>
&lt;p>Often industry peers tend to make the case that titles don’t matter. But I disagree 100% with this statement; my personal experiences and observations across the companies that I’ve worked at have shown me otherwise.&lt;/p>
&lt;p>&lt;strong>&lt;em>There is a popular idea that becoming a Staff engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>In some sense, I guess.&lt;/p>
&lt;p>I joined Mailchimp as a Senior Engineer. I was immediately added to a project team (which included an Engineering Director and two Principal Engineers) meant to build out Mailchimp’s first internal, self–service analytics platform.&lt;/p>
&lt;p>A key aspect of this project was &lt;strong>being effective and executing at a high level&lt;/strong>. For better, or for worse, having two other Principal Engineers meant expectations for me likely weren’t that high. But I was able to jump in immediately and start contributing to core aspects of the project with very little hand–holding from them; by the end, I was one of the key contributors on the team. I would ultimately be formally installed as a tech lead to help continue shepherding that project work as it was absorbed into my current engineering group, Data Services.&lt;/p>
&lt;p>Another key aspect of this project was a lot of &lt;strong>visibility across the company&lt;/strong>. The project team’s work was categorized as a company–level initiative. This meant a lot of executive–level visibility; and, of course, the associated pressures of that. But the overall project team was able to sustain good momentum throughout and ultimately succeed in building out an initial iteration of the analytics platform. Also, my manager and the team’s Principal Engineers were intentional about creating opportunities for me to present the work of the project team; I ended up presenting at an Engineering All Hands, a company–wide All Hands, and co–delivering a tech talk at an Engineering recruiting event. Because of the visibility of the project and general culture at Mailchimp, I was able to collaborate with engineers at all levels in the company and engage with analysts from other departments in a very short time after joining—which is something most folks take a year or so to have the opportunity to do.&lt;/p>
&lt;p>So, it was a combination of doing good work and being really effective alongside more senior engineers; and those senior engineers (and others) being intentional about giving me visibility and access across the company even though they were the technical leaders on the project.&lt;/p>
&lt;p>Important note: The promotion didn’t come until I had also served some meaningful time as tech lead and delivered a lot of value there. But this project was definitely the firestarter.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>First was from my manager, &lt;a href="https://twitter.com/marcprecipice">Marc Hedlund&lt;/a>. He told me to write my performance review in the third person. The idea being that you&amp;rsquo;re more likely to praise others, and be less critical, when giving them a review. It&amp;rsquo;s pretty simple, but has been super useful to me. Oddly enough, it&amp;rsquo;s played a part in helping me understand how to build a coherent narrative around the work I do and the value it provides to the business.&lt;/p>
&lt;p>Second was from &lt;a href="https://mcfunley.com/">Dan McKinely&lt;/a>, one of the senior engineers on the “Staff project” I talked about. He provided direct feedback on my strengths and weaknesses when I asked for them. He noted that my strength around building relationships across the company is an important skill to have since the people / social aspects of engineering don’t go away; in fact, they are key to getting anything done.&lt;/p>
&lt;p>Third was from &lt;a href="https://codahale.com/">Coda Hale&lt;/a>, the other senior engineer on the “Staff project” I talked about. He talked about scaling your impact. Specifically:&lt;/p>
&lt;blockquote>
&lt;p>first, effectively setting technical direction
for other engineers; second, mentoring them and developing
their talent as a consequence of the work you’re structuring
for them.&lt;/p>&lt;/blockquote>
&lt;p>This advice is core to how I think about my role as tech lead; like, really being intentional about creating opportunities for the team to extend, flex their skills, and learn a lot.&lt;/p>
&lt;p>&lt;strong>&lt;em>What about a piece of advice for someone who has just started as a Staff engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Don’t think you’re going to solve ALL of the Engineering department’s problems; from what I’ve seen, it’ll get exhausting and you’ll get jaded pretty quickly. Slowly build up to those things. Hopefully, you were promoted because you were already operating at the Staff level; so you shouldn’t have to do anything dramatically different. Continue to do the great work that got you to this title. Once you feel like you’re settling into things, extend from there.&lt;/p>
&lt;p>Communication and building narratives are key. Make sure to write … A LOT. When thinking through problems or ideas, write it down (even if you don&amp;rsquo;t intend to share them). Usually when I can&amp;rsquo;t capture a problem statement or idea in a coherent, concise paragraph it means I need to do more research and / or I&amp;rsquo;ll have a rough time trying to convince others it&amp;rsquo;s a worthwhile investment. Also, the written word allows you to scale your ideas and discussion around them more effectively; much easier than scheduling a meeting with every possible person to pitch the idea.&lt;/p>
&lt;p>Try to make your managers&amp;rsquo; job easier. Don&amp;rsquo;t just bring them problems; also bring them (multiple if possible) recommendations / suggestions for solutions to that problem and ask for their feedback. This way, the manager doesn&amp;rsquo;t have to do all the work of solving the problem for you (they likely have enough on their plates) and they have an opportunity to draw from their experiences to help you rule in / out your suggestions. Funny enough, it’s probably much easier for someone to provide feedback on why your solution is bad than it is to come up with a fleshed out solution on their own.&lt;/p>
&lt;p>Start thinking intentionally about creating opportunities for other engineers you work directly with to grow their skills and get access and visibility to others in the company that they usually wouldn’t.&lt;/p>
&lt;p>Build relationships early. It can help in situations where you need to spend some social / political capital to take a stance on something. If the first time you engage with someone is when, as an example, you’re fighting for opposing solutions to a hiring problem, you’re already starting from a deficit with that person. To be clear, you should never look to “people please”. But your working relationship and ability to collaborate productively on future endeavors with a specific person can be significantly easier if a relationship was built up beforehand.&lt;/p>
&lt;p>Frankly speaking, trying to apply all of this is a lot; and it’s just one person’s opinion. Treat it like a restaurant menu; choose what resonates with you and try to apply it. Then, pay it forward by sharing your experience with the next person trying to make it to Staff.&lt;/p>
&lt;p>&lt;strong>&lt;em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I get asked this regularly.&lt;/p>
&lt;p>I do have a goal of being a CTO; but that’s more of a directional thing to ensure I don’t get complacent about my career progression. In the context of Mailchimp, getting promoted to Principal Engineer would satisfy that goal for me. I’ve been able to deliver real, tangible business value at my current level; so I think I could continue that and continue to feel rewarded by sticking with the individual contributor track.&lt;/p>
&lt;p>Also, I had been fulfilling a lot of the responsibilities of an Eng Manager for my team (without formally being the Eng Manager). So, a lot of the things I would have wanted to start doing if I switched to management, I was able to put in practice and get that experience. So, I’m sure that satisfied any itch I had for the time being.&lt;/p>
&lt;p>&lt;strong>&lt;em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Verbal communication about technology with various technical and non–technical audiences is a skill. It’s one that I try to cultivate and hone everyday. One person that I watch for a visual on how to do it right is &lt;a href="https://twitter.com/kelseyhightower">Kelsey Hightower&lt;/a>. Another is my college professor for a couple of my Software Engineering courses. He rarely ever came to class; but when he did I usually learned more about software development than I have in any other academic setting. They both know how to explain things well and tailor it to the audience.&lt;/p>
&lt;p>There are a couple blogs that I’ve come across that have helped me hone, and fine tune, how I develop a technical approach and strategy. The first is &lt;em>&lt;a href="https://blog.thepete.net/blog/2019/12/09/delivering-on-an-architecture-strategy/">”Delivering on an architecture strategy” from Pete Hodgson&lt;/a>&lt;/em> that presents a framework for achieving a sustainable balance between feature delivery and foundational architectural work. The second is &lt;em>&lt;a href="https://medium.com/@jamesacowling/stepping-stones-not-milestones-e6be0073563f">“Stepping Stones not Milestones” from James Cowling&lt;/a>&lt;/em> which is about delivering real value with big architectural initiatives.&lt;/p></description></item><item><title>Staff-plus career ladders</title><link>https://staffeng.com/guides/staff-career-ladders/</link><pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/staff-career-ladders/</guid><description>&lt;p>There are &lt;em>so&lt;/em> many different career ladders shared in public these days
that there&amp;rsquo;s no reason &lt;em>not&lt;/em> to read a half-dozen different ones before
attempting to design your own.&lt;/p>
&lt;p>Some that are particularly worth reading through:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://docs.google.com/spreadsheets/d/1k4sO6pyCl_YYnf0PAXSBcX776rNcTjSOqDxZ5SDty-4/edit#gid=0">Rent the Runway&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gist.github.com/jamtur01/aef437a79fee5a9cefdc#junioreng">Kickstarter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://levels.patreon.com">Patreon&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>You can find even more collected at &lt;a href="https://www.progression.fyi">progression.fyi&lt;/a>.
Charity Majors has also written a helpful guide of &lt;a href="https://charity.wtf/2020/09/14/useful-things-to-know-about-engineering-levels/">things to know about engineering levels&lt;/a>.&lt;/p>
&lt;p>I think it&amp;rsquo;s important to recognize that career ladders only apply effectively against
populations of individuals. They rarely, if ever, apply cleanly against any individual.
This effect becomes particularly pronounced in Staff-plus roles, which are often only
populated by a couple of folks. Ladders are essential but don&amp;rsquo;t get caught believing
they&amp;rsquo;re a map of how things actually work rather than a mythos of how things are intended to work.&lt;/p></description></item><item><title>Staff-plus interview processes</title><link>https://staffeng.com/guides/staff-plus-interview-process/</link><pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/staff-plus-interview-process/</guid><description>&lt;p>When we talk about designing a Staff-plus engineer interview loop, the first thing to talk about is that absolutely no one is confident their Staff-plus interview loop works well. Many loops end up looking for a senior engineer who&amp;rsquo;s &lt;em>really&lt;/em> fast at solving problems, which doesn&amp;rsquo;t reflect the actual role. Others focus on communication skills, which &lt;em>are&lt;/em> a key part of the role but certainly not the entirety of it. A few companies even construct their process to assess whether the candidate &lt;em>feels&lt;/em> like a member of their existing senior engineering team, conflating excellence with familiarity.&lt;/p>
&lt;p>Even if no one feels great about their loop, there is still a body of collective learnings to incorporate into your attempt to design a loop, which is what we&amp;rsquo;ll cover here. We&amp;rsquo;ll start with examining the frequent failure modes of Staff-plus interview loops, discuss the signals that you &lt;em>do&lt;/em> want to test for in these loops, and finally discuss some interview formats which can be useful for assessing those signals.&lt;/p>
&lt;h2 id="challenges">Challenges&lt;/h2>
&lt;p>While technology interviews, in general, are a bit of a mess, interviews for very senior candidates have enough issues of their own to pack a dedicated struggle bus. It&amp;rsquo;s helpful to start with understanding some of the common failure modes before we move into considering what might work better:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>A senior engineer, but better.&lt;/strong> Many interview processes look at Staff-plus engineers as Senior engineers who are a bit better at everything. They&amp;rsquo;re a bit faster. They&amp;rsquo;re a bit clearer in their communication. They&amp;rsquo;re a bit more nuanced in architecture discussions. This stems from most folks being unfamiliar with Staff roles and usually causes Staff-plus engineers to perform poorly on these loops. In particular, most Staff-plus engineers are programming less than Senior engineers, and consequently are &lt;em>slower&lt;/em> rather than &lt;em>faster&lt;/em> at rote programming tasks. You&amp;rsquo;ll find some Staff-plus engineers who remain very quick programmers, but you won&amp;rsquo;t find much correlation between that speed and their impact.&lt;/li>
&lt;li>&lt;strong>A senior engineer, but worse.&lt;/strong> Conversely, other interview processes recognize that Staff-plus engineers are spending less time programming and anticipate slower performance on some of the more mundane programming exercises. This makes it more likely for Staff-plus engineers to succeed in the loop but doesn&amp;rsquo;t get signal on what makes these sorts of engineers exceptionally impactful. If you don&amp;rsquo;t add additional interviews to capture those strengths, reduced speed on rote work will likely correlate with seniority to some extent, but it correlates more strongly with many other factors.&lt;/li>
&lt;li>&lt;strong>A senior engineer, but they&amp;rsquo;ll accept the offer.&lt;/strong> Another failure mode is companies that are struggling to hire Senior engineers and decide to inflate their titles without changing the role expectations. In these cases, the interviews are appropriate to the actual work, but the title isn&amp;rsquo;t. With neither the company nor the candidate fully willing to acknowledge the inflation, all future Staff-plus hiring at the company acquires a veneer of uncertainty.&lt;/li>
&lt;li>&lt;strong>Someone like us.&lt;/strong> Many loops focus on whether the Staff-plus candidate &lt;em>projects&lt;/em> the same wisdom and confidence as the existing Staff-plus engineers at the company, where the interview debrief might include statements like, &amp;ldquo;They feel like they&amp;rsquo;d be a natural part of this team.&amp;rdquo; This sort of approach is more likely to anchor on semi-arbitrary features like how they project their confidence than on the candidate&amp;rsquo;s capabilities.&lt;/li>
&lt;li>&lt;strong>Not better than me.&lt;/strong> Especially when hiring your first Staff-plus engineers, you&amp;rsquo;ll often find some earlier career interviewers who undervalue the candidate&amp;rsquo;s strengths and instead anchor on the candidate&amp;rsquo;s capability to perform the interviewer&amp;rsquo;s current role. You&amp;rsquo;ll have an impressive Staff-plus candidate, but the interview panel will be skeptical of their ability to thrive as a mid-level engineer. This seems to be brought up most frequently for women and minority candidates.&lt;/li>
&lt;li>&lt;strong>The reverse filter.&lt;/strong> Certain kinds of interviews are signals that you as an organization don&amp;rsquo;t know how to use Staff-plus engineers: whiteboard algorithmic interviews, interviewers are predominantly early career, and so on. Many Staff-plus processes cause the best candidates to opt-out early in the process, often somewhat invisibly to the recruiting metrics.&lt;/li>
&lt;li>&lt;strong>Too title-oriented?&lt;/strong> At a certain level of accomplishment, people don&amp;rsquo;t care much about internal leveling, generally because they&amp;rsquo;re already financially secure. This creates a peculiar pressure on folks newly reaching Staff-plus levels to avoid appearing overly career or title motivated, making it harder for folks to attain the title for the first time.&lt;/li>
&lt;/ul>
&lt;p>Some of these are quite difficult to address, others are easy as long as you keep them in mind, but all of them are worth considering as you start to design or re-envision your Staff-plus interview process.&lt;/p>
&lt;h2 id="signals">Signals&lt;/h2>
&lt;p>The &lt;a href="https://lethain.com/designing-interview-loops/">best interview loops&lt;/a> reason forward from the signals you want to capture back to the interview topics and format, which means the first important question to answer is, &amp;ldquo;Which signals are important for hiring successful Staff-plus engineers?&amp;rdquo;&lt;/p>
&lt;p>The signals I&amp;rsquo;d recommend focusing on are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Self-awareness&lt;/strong>. Are they accountable for mistakes? Have they demonstrated growth in areas where they&amp;rsquo;ve previously been weaker?&lt;/li>
&lt;li>&lt;strong>Judgment.&lt;/strong> Are they able to see around corners to identify problems? Are they able to navigate broad, ambiguous problems? Can they effectively mediate between folks in an argument about tradeoffs or design? Can they derisk the execution of difficult problems?&lt;/li>
&lt;li>&lt;strong>Collaboration.&lt;/strong> Do they partner well with others? What about folks less experienced than them? More experienced than them? Their managers? Cross-functionally? Executives?&lt;/li>
&lt;li>&lt;strong>Communication.&lt;/strong> Are they good listeners who understand the points made by others? Are they able to communicate their ideas clearly? Can they communicate in the formats that your company relies upon (written, verbal, etc)?&lt;/li>
&lt;li>&lt;strong>Development.&lt;/strong> Do they grow others around them? Does the &amp;ldquo;organizational bench&amp;rdquo; grow in areas they lead or atrophy? Do broken systems and processes get cleaned up?&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s interesting to note that many would not consider these to explicitly be technical skills. Domain expertise is a major factor in success at all of them, but it&amp;rsquo;s exercising that expertise in conjunction with other critical skills and behaviors that transition someone from a tenured Senior engineer into a Staff-plus one.&lt;/p>
&lt;h2 id="formats-and-structures">Formats and structures&lt;/h2>
&lt;p>The two key questions to ask yourself when designing an interview loop are always:&lt;/p>
&lt;ol>
&lt;li>What tasks and behaviors will this person need to succeed on a day to day basis?&lt;/li>
&lt;li>How can we get them to demonstrate actually doing them?&lt;/li>
&lt;/ol>
&lt;p>Most senior candidates become increasingly diplomatic and &lt;em>asking&lt;/em> them about their work is never as helpful as &lt;em>watching&lt;/em> them do the work. If mentorship is the most important activity, don&amp;rsquo;t rely on them talking about mentorship, but instead find a way to &lt;em>see&lt;/em> them mentoring someone. If it&amp;rsquo;s architecture, present your current systems and ask them to bring their questions to see how they react to decisions they disagree with &amp;ndash; get away from the ambiguous abstract.&lt;/p>
&lt;p>Moving beyond the typical one-on-one discussions and programming interviews, some of the interview formats and structures that I&amp;rsquo;ve found particularly effective for evaluating Staff-plus signals are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Structured presentation.&lt;/strong> Have the candidate prepare and present for twenty to thirty minutes on a narrow topic to a group of peers. The format gives a great signal on structured thinking, communication, listening to, and answering questions. Depending on the topic you select, you can get strong signals on one or two areas of your choice. This format is particularly effective at hearing how folks talk about their peers and coworkers.&lt;/li>
&lt;li>&lt;strong>Code review.&lt;/strong> Prepare a pull request and ask the candidate to provide feedback on it, focusing on empathy, clarity, and usefulness.&lt;/li>
&lt;li>&lt;strong>Data modeling, interfaces, and architecture.&lt;/strong> Have the candidate walk through the design of a system, typically with a focus on evolving it to meet changing requirements. These interviews often try to do too much: narrow your focus and add layers to the question to allow you to continue drilling deeper for candidates who make significant progress.&lt;/li>
&lt;li>&lt;strong>Subject matter expertise.&lt;/strong> Interviews that test their areas of domain expertise. For example, a frontend engineer might collaborate with a designer and product manager on how technical constraints would impact a proposed design and launch timeline. For backend engineers, you might provide the candidate with a broken piece of software or environment and have them debug the problem back to a fix.&lt;/li>
&lt;li>&lt;strong>Mentorship panel&lt;/strong>. It&amp;rsquo;s challenging to hire Staff-plus candidates if your panel consists entirely of earlier career folks, but it&amp;rsquo;s equally risky to hire a Staff-plus candidate if they haven&amp;rsquo;t demonstrated success mentoring folks earlier in their careers. Have a panel of three to four folks they might be expected to mentor come with questions. Watching folks redirect roughly framed questions into a useful discussion is an especially great insight into their ability to mentor in their new role.&lt;/li>
&lt;/ul>
&lt;p>If these formats aren&amp;rsquo;t enough, then start asking around! Most companies have designed bespoke approaches to their Staff-plus loops, and you can learn a great deal from that discussion.&lt;/p>
&lt;h2 id="how-to-pull-it-together">How to pull it together&lt;/h2>
&lt;p>You might reasonably expect this to end with a precompiled interview loop for your company to use to evaluate Staff-plus engineers, and I hate to disappoint, but I think most of the value comes from thinking through the signals that matter to you and designing formats that get at those signals in a way that resonates to you and your company.&lt;/p>
&lt;p>Whatever interviews you end up using, test them, gather candidate feedback, and keep evolving them to be better!&lt;/p></description></item><item><title>Does the title even matter?</title><link>https://staffeng.com/guides/does-the-title-even-matter/</link><pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/does-the-title-even-matter/</guid><description>&lt;p>If you&amp;rsquo;re safely nestled within the comfortable clutches of the Senior engineer &lt;a href="https://lethain.com/career-levels-and-more/">career level&lt;/a>, you might wonder if you ought to pursue the Staff title. It&amp;rsquo;s a considerable investment of time and energy, along with requiring a good amount of luck.
Is that investment worth your time?&lt;/p>
&lt;p>The answer is, of course, that it might be! The three consistent advantages that generally come with a Staff-plus title are:&lt;/p>
&lt;ol>
&lt;li>allowing you to bypass informal gauges of seniority,&lt;/li>
&lt;li>facilitating access to &amp;ldquo;the room,&amp;rdquo;&lt;/li>
&lt;li>increase in current and career compensation.&lt;/li>
&lt;/ol>
&lt;p>A potential fourth advantage is
that some folks find that the title grants more agency to select the projects you work on, but others find that
increase in agency is swallowed by a commensurate increase in accountability to the business.&lt;/p>
&lt;h2 id="informal-gauges-of-seniority">Informal gauges of seniority&lt;/h2>
&lt;p>When I spoke with &lt;a href="https://staffeng.com/stories/nelson-elhage">Nelson Elhage&lt;/a> about whether reaching the Staff level allowed him to take on new work, he answered:&lt;/p>
&lt;blockquote>
&lt;p>The question of &amp;ldquo;allowed&amp;rdquo; is interesting and might not be quite the right question because there were very few official policies on who got what kind of role. Most things relied on more informal gauges of seniority.&lt;/p>&lt;/blockquote>
&lt;p>Many technology companies describe themselves as pursuing meritocracy, defined as
creating the conditions for talented employees to rise to the top naturally.
Given there isn&amp;rsquo;t any widely accepted measure of individual merit, such companies
come to rely on what Nelson aptly termed &amp;ldquo;informal gauges of seniority.&amp;rdquo;
While these gauges are believed to evaluate ideas objectively,
their sheer informality becomes a broad vector of bias and often conflate confidence with competence.&lt;/p>
&lt;p>Freedom from the cycle of re-establishing one&amp;rsquo;s competence came up frequently as a key advantage of the Staff title.
These informal gauges weren&amp;rsquo;t mentioned by every Staff-plus engineer I spoke with,
but they were routinely mentioned by individuals who didn&amp;rsquo;t conform to their company&amp;rsquo;s stereotype of an experienced technologist.&lt;/p>
&lt;p>&lt;a href="https://staffeng.com/stories/keavy-mcminn">Keavy McMinn&lt;/a> shared,&lt;/p>
&lt;blockquote>
&lt;p>When you have a title, you don&amp;rsquo;t have to spend so much energy putting your credentials on the table. It helps set the context for others. You&amp;rsquo;re more respected from the outset, and that&amp;rsquo;s been really noticeable.&lt;/p>&lt;/blockquote>
&lt;p>A Staff-plus title allows you to reinvest the energy you&amp;rsquo;ve previously spent on proving yourself into the core work you&amp;rsquo;re evaluated on. If you find that you&amp;rsquo;re not investing much energy into proving yourself, that&amp;rsquo;s great!
Perhaps you&amp;rsquo;ve been at your current company long enough and proven yourself enough times
that it&amp;rsquo;s no longer an issue.
If you &lt;em>do&lt;/em> find your time diverted towards proving and reproving yourself,
the title will return a considerable measure of time to you for reinvestment.&lt;/p>
&lt;h2 id="being-in-the-room">Being in the room&lt;/h2>
&lt;p>Another frequent advantage of a Staff-plus title is &amp;ldquo;being in the room.&amp;rdquo; &lt;a href="https://staffeng.com/stories/dan-na">Dan Na&lt;/a> described this as,&lt;/p>
&lt;blockquote>
&lt;p>I have a seat at the table in higher-level engineering discussions that occur at a level above individual projects and teams. We have recurring staff engineering meetings where we discuss problems that span teams which are both technical and non-technical in nature. As a hypothetical example, I&amp;rsquo;d feel comfortable surfacing what I perceive as shortcomings in the engineering onboarding process in this type of meeting.&lt;/p>&lt;/blockquote>
&lt;p>For any important decision, there&amp;rsquo;s the time leading up to the core decision being made, and then there&amp;rsquo;s everything afterward. In more senior roles, you&amp;rsquo;re often in the right place to provide input when it&amp;rsquo;s relatively cheap to incorporate, where otherwise your feedback might not be incorporated&amp;ndash;despite being very valuable&amp;ndash;because the related roll out or implementation has advanced too far.&lt;/p>
&lt;h2 id="compensation">Compensation&lt;/h2>
&lt;p>Small companies tend to have fairly ad-hoc compensation, and increases come from direct negotiation with your manager. A promotion to a Staff-plus role in such a company might not even come with a corresponding increase in your compensation.
However, most companies introduce compensation bands for each role by the time they reach one to two hundred folks. Those compensation bands will generally ensure your compensation increases along with the role.&lt;/p>
&lt;p>The highest-paid roles at any company tend to be the executive and senior management roles. As companies grow, they typically create a compensation mapping between management and engineering roles, such that reaching Staff-plus roles (and sometimes this is Sr Staff or Distinguished roles rather than the initial Staff role) will significantly bump your compensation.&lt;/p>
&lt;p>Even if your current company doesn&amp;rsquo;t compensate for Staff-plus engineer roles much differently than for Senior engineer roles, &lt;em>&lt;a href="https://www.levels.fyi/">some companies do&lt;/a>&lt;/em>. Throughout your career, you can choose to steer towards such companies, and doing so with a Staff-plus title will meaningfully increase your lifetime earnings.&lt;/p>
&lt;h2 id="access-to-interesting-work">Access to interesting work&lt;/h2>
&lt;p>Many folks take on Staff-plus roles believing it will give them access to the most visible or exciting work.
That&amp;rsquo;s true to some extent, but it depends on the &lt;a href="https://staffeng.com/guides/staff-archetypes">Staff archetypes&lt;/a> which are most prevalent at your company.
For example, &lt;em>Solvers&lt;/em> often do get access to the most interesting work.
Conversely, a &lt;em>Tech Lead&lt;/em> would probably be undermining their team if they operated that way.&lt;/p>
&lt;p>Among the folks I&amp;rsquo;ve spoken with, the most consistently effective way to get access to interesting work is being hired to do it, such as &lt;a href="https://staffeng.com/stories/ritu-vincent">Ritu Vincent&lt;/a> who was hired to launch Dropbox&amp;rsquo;s product incubator and &lt;a href="https://staffeng.com/stories/keavy-mcminn">Keavy McMinn&lt;/a> who was hired to design Fastly&amp;rsquo;s API strategy.&lt;/p>
&lt;p>This doesn&amp;rsquo;t always work out.
Sometimes the interesting work will be plainly visible but still inaccessible.
You&amp;rsquo;ll be too obligated to the business&amp;rsquo; needs to pursue a project out of personal interest.
In earlier roles, you might be able to sneak that sort of project into your backlog,
but now you&amp;rsquo;ll have a responsibility to model good behavior.
Even in cases where the project is the best thing for the company, you&amp;rsquo;ll often decide to
pass the opportunity on to another engineer who would benefit from it more than you would.&lt;/p>
&lt;h2 id="different-rather-than-better">Different rather than better&lt;/h2>
&lt;p>Even though the title does matter, it&amp;rsquo;s not necessarily the case that you ought to pursue the role. Even if you love the privileges and perks of a Staff-plus title, it&amp;rsquo;s important to recognize that they come on the back of a very different job. &lt;a href="https://staffeng.com/stories/michelle-bu">Michelle Bu&lt;/a> captured this in her advice for folks pursuing the Staff title,&lt;/p>
&lt;blockquote>
&lt;p>If you&amp;rsquo;re more focused on hitting Staff than on setting yourself up to do work that energizes you, it&amp;rsquo;s easy to end up stuck in a role you don&amp;rsquo;t want. Being a Staff-plus engineer, especially a broad-scoped Staff-plus engineer, is a very different job than being a Senior engineer. It&amp;rsquo;s important to take a step back and think about whether it&amp;rsquo;s a job you really want.&lt;/p>&lt;/blockquote>
&lt;p>The advantages of senior titles are real, and for some folks, those advantages shift their career from one characterized by survival to one with the necessary prerequisites for their success. However, many folks find that their Staff role&amp;rsquo;s heightened expectations eliminate the work that used to excite them. In your career, there are few choices without consequences, and this isn&amp;rsquo;t one of them.&lt;/p>
&lt;h2 id="material-but-not-magic">Material but not magic&lt;/h2>
&lt;p>You&amp;rsquo;ll occasionally meet an engineer who believes that attaining a certain title is the only thing standing between them and an important accomplishment or opportunity.
Such folks might express frustrations, such as, &amp;ldquo;If I just had the Staff title, I could decide the technology stack for our team.&amp;rdquo;&lt;/p>
&lt;p>Increased organizational authority does provide new tools for solving problems, but successfully retaining organizational authority in a well-managed organization requires a great deal of nuance and restraint. If you have a problem and believe that your title is the only thing holding you back, I want to reassure you that focusing on developing your approach and skills will be far more impactful than the title. The title will get you over the ledge once you&amp;rsquo;re close, but it&amp;rsquo;ll never do as much work as you&amp;rsquo;d expect.&lt;/p>
&lt;p>The one consistent exception to this rule is that women and minorities often do find
they spend significantly less time and energy, proving themselves once they attain a Staff-plus title.
The title doesn&amp;rsquo;t unlock new abilities for them, but it does remove some of the weight they&amp;rsquo;d been
carrying with them throughout their career.&lt;/p></description></item><item><title>Where do Staff-plus engineers fit into the org?</title><link>https://staffeng.com/guides/where-should-staff-plus-eng-report/</link><pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/where-should-staff-plus-eng-report/</guid><description>&lt;p>When I work on the organization design of an engineering organization, I think a lot about &amp;ldquo;&lt;a href="https://lethain.com/sizing-engineering-teams/">organizational mathematics&lt;/a>,&amp;rdquo; the guideline that each team should have one manager and six to eight engineers, and each manager of managers should support four to six managers. From those numbers, you can rapidly determine an appropriate structure for your organization that&amp;rsquo;ll work fairly well. It might not be &lt;em>perfect&lt;/em>, but it&amp;rsquo;ll &lt;em>work&lt;/em>.&lt;/p>
&lt;p>As I&amp;rsquo;ve applied that approach to designing multiple organizations, one of the recurring edge cases that have come up is deciding where the senior-most engineers should report. Should they, as the org math dictates, report to managers in the organizational leaf nodes? Or should they, as key leaders in your organization, report to more senior leaders to have better access to the information and authorization they need to excel in their role?&lt;/p>
&lt;p>Before answering, it&amp;rsquo;s worth describing the most common configurations you&amp;rsquo;ll find in companies today, in particular how configurations vary across the &lt;a href="https://staffeng.com/guides/staff-archetypes">Staff-plus archetypes&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Tech Leads&lt;/strong> typically report to a manager responsible for one team. Less frequently, they&amp;rsquo;ll report to a manager responsible for two to four teams. In both cases, they&amp;rsquo;ll operate at the same scope as that manager. &lt;em>Examples&lt;/em>: &lt;a href="https://staffeng.com/stories/dan-na">Dan Na&lt;/a> reported to the manager for the Internationalization Platform.&lt;/li>
&lt;li>&lt;strong>Architects&lt;/strong> typically report to a more senior manager, often a manager of managers. Often they&amp;rsquo;ll be responsible for a horizontal-slice across that manager&amp;rsquo;s area of responsibility, for example, data modeling. &lt;em>Examples&lt;/em>: &lt;a href="https://staffeng.com/stories/keavy-mcminn">Keavy McMinn&lt;/a> reported to the CTO.&lt;/li>
&lt;li>&lt;strong>Solvers&lt;/strong> typically operate in companies that feature a &amp;ldquo;&lt;a href="https://lethain.com/weak-and-strong-team-concepts/">weak team concept&lt;/a>,&amp;rdquo; and often reporting hierarchies are less defined or deliberate in such companies. It is &lt;em>most&lt;/em> common to see them reporting to a team manager, but you&amp;rsquo;ll find a bit of everything. Another common pattern is collecting these folks into an &lt;em>&amp;ldquo;Office of the CTO&amp;rdquo;&lt;/em> or &lt;em>&amp;ldquo;Office of the CEO&amp;rdquo;&lt;/em> where they report to an executive who directs their work. &lt;em>Examples&lt;/em>: &lt;a href="https://staffeng.com/stories/ritu-vincent">Ritu Vincent&lt;/a> is part of an incubator reporting to the CEO.&lt;/li>
&lt;li>&lt;strong>Right Hands&lt;/strong> report into a senior leader, often managers responsible for a hundred or more folks, operating with that leader&amp;rsquo;s authority. &lt;em>Examples&lt;/em>: &lt;a href="https://staffeng.com/stories/rick-boone">Rick Boone&lt;/a> reported to the VP of Infrastructure; Michelle Bu reported to the &lt;a href="https://staffeng.com/stories/michelle-bu">Chief Product Officer&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Understanding how these different archetypes typically report differently into the organization helps decode &lt;em>some&lt;/em> of the seeming arbitrariness of reporting structures.&lt;/p>
&lt;h2 id="office-of-the-cto">Office of the CTO&lt;/h2>
&lt;p>An aside on the &amp;ldquo;&lt;strong>Office of the CTO&lt;/strong>&amp;rdquo; concept, as many folks haven&amp;rsquo;t encountered it in their work. Typically, the CTO, although sometimes a CEO will do something similar, will have two to eight Staff-plus engineers who report to them directly. These folks are treated as senior leaders in the sense of getting a problem or opportunity to pursue, very little management support, and the proximity to lean on the executive for support when necessary.&lt;/p>
&lt;p>Within these offices, you&amp;rsquo;ll find a mix of &lt;em>Architects&lt;/em>, &lt;em>Solvers&lt;/em> and &lt;em>Right Hands&lt;/em>.&lt;/p>
&lt;p>Typically the &lt;em>Office of the CTO&lt;/em> comes relatively late in a company&amp;rsquo;s evolution and is often introduced as a workaround to an existing organizational problem that is a challenge to address, for example, lack of trust between Staff-plus engineers and management teams, or an inability to delegate by the CTO. If you find yourself reaching for it &lt;em>early&lt;/em> in a company&amp;rsquo;s evolution, ask yourself if you&amp;rsquo;re avoiding a problem you should be fixing instead of introducing this concept into your structure.&lt;/p>
&lt;h2 id="but-in-practice">But in practice…&lt;/h2>
&lt;p>Based on the archetypes, there is usually a theoretically correct place for every engineer to fit into the organization, but you&amp;rsquo;ll find that in practice, few organizations fully align their actual reporting structure with that theoretical structure.&lt;/p>
&lt;p>Sometimes this is due to a lack of attention to organizational structure by your management team. In other cases, it&amp;rsquo;s due to a lack of managerial bandwidth to support folks at the correct positions. For example, the &amp;ldquo;correct&amp;rdquo; manager is already managing a team of twelve and can&amp;rsquo;t support another engineer effectively. Another common scenario is that the structure is shifting frequently enough that managers are reluctant to change the engineer&amp;rsquo;s manager &lt;em>again&lt;/em>, especially as manager-changes often lead to abstract, middle-of-the-road performance reviews.&lt;/p>
&lt;p>If you find yourself reporting to someone who you believe is the wrong manager, it&amp;rsquo;s a reasonable conversation to have with your manager, but it&amp;rsquo;s worth acknowledging that many managers will react defensively to the implication that they&amp;rsquo;re not the right manager for you. If your manager is mature and you have a strong relationship with them, go ahead and have the conversation. If not, it may be less risky to instead have a more abstract discussion with their skip-level about where Staff-plus engineers report in their organization.&lt;/p>
&lt;p>Before you rush to advocate for change, ask yourself what you think would be different if your reporting structure changed. The reporting structure is a form of authority, and generally, folks over-estimate how authority will help them. The classic trap is, of course, that the folks who benefit the most from additional authority&amp;ndash;minorities and women&amp;ndash;are the folks whose managers are most likely to react defensively to the suggestion of the change.&lt;/p>
&lt;h2 id="how-should-it-work">How should it work?&lt;/h2>
&lt;p>If you&amp;rsquo;re looking to design a proposal for your management team on how they ought to perform these sorts of organizational adjustments over time, a few things to consider. When possible, &lt;strong>reporting changes should happen immediately.&lt;/strong> Delaying forces folks to navigate two transitions, including a particularly
challenging intermediate environment between the previous and new roles. It&amp;rsquo;s always lower risk to navigate a single role
transition, even if it means agreeing to reduced manager support if your new manager is underwater with their workload.&lt;/p>
&lt;p>If you can&amp;rsquo;t make them immediately, &lt;strong>always set a timeline&lt;/strong> for reporting to the correct manager after a role change. If you don&amp;rsquo;t have a timeframe to clearly reopen the structure, it&amp;rsquo;s relatively less likely to happen.&lt;/p>
&lt;p>Most companies struggle to set up this sort of organizational infrastructure to fully support Staff-plus engineers as genuine leaders, so you should look at this as a problem you want to make progress on &lt;em>over years&lt;/em>, rather than one that&amp;rsquo;ll get fixed overnight. If you go into it expecting an immediate, permanent solution, you&amp;rsquo;re likely in for some turbulence.&lt;/p></description></item><item><title>Ending words</title><link>https://staffeng.com/guides/ending-words/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/ending-words/</guid><description>&lt;p>Frequently when a group of Staff-plus engineers sit down to chat, they’ll spend time commiserating about the industry’s broken technical leadership track. It’s true; it is broken. What isn’t true is that this is inevitable. The industry’s views on technical leadership are the summation of the collective daily actions taken by each person operating in, aspiring towards, or managing a Staff-plus engineer role. By changing our habits and approach, we will change the industry.&lt;/p>
&lt;p>By improving ourselves, we make the industry better. Make a plan to sponsor someone else in your organization. Synthesize a strategy document, taking the time to make others feel heard. Build a network of peers, and invite more folks into that network. As you do that work, your engineering organization will learn from your example.&lt;/p>
&lt;p>Your manager and management chain will learn from your example as well. Many managers have never worked with an effective Staff-plus engineer. They instead view the role through the lens of a previous disaster. Partner with them to understand their priorities and concerns to build alignment. Hold yourself accountable to the same pressures your manager experiences. Work through their fear of what could go wrong, and create excitement for how much can go right.&lt;/p>
&lt;p>Does it feel odd to talk about fearing Staff-plus roles? It does, but it’s unavoidable. At most companies, the primary factor preventing the adoption of an impactful Staff-plus role is the fear of creating a tyrannical architect. That fear is driven by their previous experiences with inept and poorly managed technical leaders. This fear will only subside as we collectively replenish the groundwater of good Staff-plus role models.&lt;/p>
&lt;p>My hope is that reading &lt;em>Staff Engineer&lt;/em> has given you a map to follow towards a rewarding Staff-plus career or inspired you to keep walking the path of your own that you’ve already found. The software technology industry is still in its infancy, and what it becomes is wholly in our hands.&lt;/p></description></item><item><title>Additional resources on Staff-plus engineering</title><link>https://staffeng.com/guides/learning-materials/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/learning-materials/</guid><description>&lt;p>None of the Staff Engineer I spoke with got there alone. Most got there either through voracious reading
or building a powerful network of colleagues. This section is a collection of recommended resources.&lt;/p>
&lt;h2 id="your-network">Your Network&lt;/h2>
&lt;p>Almost unanimously, Staff-plus engineers&amp;rsquo; most valuable learning resources wasn&amp;rsquo;t a book, blog, talk, or paper, but instead their network of peers and mentors. If you only have one hour to develop yourself as an engineer, your best bet would be &lt;a href="https://staffeng.com/guides/network-of-peers">building a network of people in similar roles&lt;/a>.&lt;/p>
&lt;p>If you&amp;rsquo;re looking for a Slack community, &lt;code>#staff-principal-engineering&lt;/code> in the
&lt;a href="https://randsinrepose.com/welcome-to-rands-leadership-slack/">Rands Leadership Slack&lt;/a>
is a fairly lively room.&lt;/p>
&lt;h2 id="what-do-staff-plus-engineers-do">What do Staff-plus Engineers do?&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/@SkyscannerEng/being-a-principal-engineer-at-skyscanner-1830dfa17d30">Being a principal engineer at Skyscanner&lt;/a> by Nicky Wrightson&lt;/li>
&lt;li>&lt;a href="https://blog.jessfraz.com/post/defining-a-distinguished-engineer/">Defining a Distinguished Engineer&lt;/a> by Jessie Frazelle&lt;/li>
&lt;li>&lt;a href="https://amyunger.com/blog/2020/09/10/staff-engineer-at-heroku.html">How I operated as a Staff engineer at Heroku&lt;/a> by Amy Unger&lt;/li>
&lt;li>&lt;a href="https://leaddev.com/not-all-engineering-leaders-are-engineering-managers">Not all engineering leaders are engineering managers&lt;/a> by Tanya Reilly&lt;/li>
&lt;li>&lt;a href="https://engineering.squarespace.com/blog/2020/the-nuts-and-bolts-with-tanya-reilly">The Nuts and Bolts with Tanya Reilly&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.dbsmasher.com/2019/01/28/on-being-a-principal-engineer.html">On Being A Principal Engineer&lt;/a> by Silvia Botros&lt;/li>
&lt;li>&lt;a href="https://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/">On Being a Senior Engineer&lt;/a> by John Allspaw&lt;/li>
&lt;li>&lt;a href="https://tychoish.com/post/staff-engineering/">Staff Engineering&lt;/a> by Sam Kleinman&lt;/li>
&lt;li>&lt;a href="https://davidxiang.com/2021/01/19/staff-software-engineer-responsibilities/">Staff Software Engineer Responsibilities&lt;/a> by David Xiang&lt;/li>
&lt;li>&lt;a href="https://keavy.com/work/thriving-on-the-technical-leadership-path/">Thriving on the Technical Leadership Path&lt;/a> by Keavy McMinn&lt;/li>
&lt;li>&lt;a href="https://jvns.ca/blog/senior-engineer/">What&amp;rsquo;s a senior engineer&amp;rsquo;s job?&lt;/a> by Julia Evans&lt;/li>
&lt;li>&lt;a href="https://medium.com/box-tech-blog/what-a-senior-staff-software-engineer-actually-does-f3fc140d5f33">What a Senior Staff Software Engineer Actually Does, Part 1: The Role and My Tasks&lt;/a> and &lt;a href="https://medium.com/box-tech-blog/what-a-senior-staff-software-engineer-actually-does-d55308fcdd41">Part 2: The Mindset and Focus of the Role&lt;/a> by Joy Ebertz&lt;/li>
&lt;li>&lt;a href="https://about.gitlab.com/blog/2020/02/18/staff-level-engineering-at-gitlab/">What does Staff level mean at GitLab?&lt;/a> by Charlie Ablett&lt;/li>
&lt;/ul>
&lt;h2 id="becoming-a-staff-plus-engineer">Becoming a Staff-plus Engineer&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://elpha.com/posts/4j56np6p/becoming-a-staff-engineer-interview-with-kristina-fox-staff-ios-engineer-at-intuit">Becoming a Staff Engineer – Interview with Kristina Fox, Staff iOS Engineer at Intuit&lt;/a> by Kaya Thomas&lt;/li>
&lt;li>&lt;a href="https://blog.coinbase.com/on-becoming-a-senior-technical-leader-14106f1383b8">On becoming a senior technical leader&lt;/a> by Jesse Pollak&lt;/li>
&lt;li>&lt;a href="https://www.ryn.works/blog/on-mid-career-and-managers">On Mid-Career and Managers&lt;/a> by Ryn Daniels&lt;/li>
&lt;li>&lt;a href="https://www.quora.com/How-does-one-become-a-Staff-Software-Engineer-at-Google-What-might-a-new-grad-entering-the-company-do-to-grow-their-career-to-reach-that-level">How does one become a Staff Software Engineer at Google?&lt;/a> on Quora&lt;/li>
&lt;li>&lt;a href="https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/">The Engineer/Manager Pendulum&lt;/a> by Charity Majors&lt;/li>
&lt;li>&lt;a href="https://charity.wtf/2020/09/14/useful-things-to-know-about-engineering-levels/">Things to Know About Engineering Levels&lt;/a> by Charity Majors&lt;/li>
&lt;/ul>
&lt;h2 id="operating-as-a-staff-plus-engineer">Operating as a Staff-plus engineer&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://noidea.dog/glue">Being Glue&lt;/a> by Tanya Reilly&lt;/li>
&lt;li>&lt;a href="https://blog.nelhage.com/post/computers-can-be-understood/">Computers can be understood&lt;/a> by Nelson Elhage&lt;/li>
&lt;li>&lt;a href="https://medium.com/@copyconstruct/effective-mental-models-for-code-and-systems-7c55918f1b3e">Effective Mental Models for Code and Systems&lt;/a> by Cindy Sridharan&lt;/li>
&lt;li>&lt;a href="https://noidea.dog/blog/getting-there-from-here">&amp;ldquo;I Wouldn&amp;rsquo;t Start From Here.&amp;rdquo; How to Make a Big Technical Change&lt;/a> by Tanya Reilly&lt;/li>
&lt;li>&lt;a href="https://lethain.com/migrations/">Migrations: the sole scalable fix to tech-debt&lt;/a> by Will Larson&lt;/li>
&lt;li>&lt;a href="https://www.ryn.works/blog/on-mid-career-and-team-dynamics">On Mid-Career and Team Dynamics&lt;/a> by Ryn Daniels&lt;/li>
&lt;li>&lt;a href="https://noidea.dog/blog/surviving-the-organisational-side-quest">Surviving the Organisational Side Quest&lt;/a> by Tanya Reilly&lt;/li>
&lt;li>&lt;a href="https://blog.nelhage.com/post/systems-that-defy-understanding/">Systems that defy detailed understanding&lt;/a> by Nelson Elhage&lt;/li>
&lt;li>&lt;a href="https://svpg.com/team-objectives-overview/">Team Objectives&lt;/a> by Marty Cagan&lt;/li>
&lt;li>&lt;a href="https://medium.com/@copyconstruct/technical-decision-making-9b2817c18da4">Technical Decision Making&lt;/a> by Cindy Sridharan&lt;/li>
&lt;li>&lt;a href="https://keavy.com/work/technical-preparation/">Technical Research and Preparation&lt;/a> by Keavy McMinn&lt;/li>
&lt;li>&lt;a href="https://blog.coleadership.com/behind-the-scenes-tech-leadership/">The Behind-the-scenes Work of Tech Leadership&lt;/a> by Jean Hsu&lt;/li>
&lt;li>&lt;a href="https://blog.danielna.com/understanding-project-management-will-improve-your-developer-job/">Understanding Project Management Will Improve Your Developer Job&lt;/a> by Daniel Na&lt;/li>
&lt;li>&lt;a href="https://larahogan.me/blog/what-sponsorship-looks-like/">What Does Sponsorship Look Like?&lt;/a> by Lara Hogan&lt;/li>
&lt;li>&lt;a href="https://keavy.com/work/where-to-start/">Where to Start&lt;/a> by Keavy McMinn&lt;/li>
&lt;li>&lt;a href="https://caitiem.com/2020/03/29/design-docs-markdown-and-git/">Design Docs, Markdown and Git&lt;/a> by Caitie McCaffrey&lt;/li>
&lt;/ul>
&lt;h2 id="technical-specifications">Technical Specifications&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://stackoverflow.blog/2020/04/06/a-practical-guide-to-writing-technical-specs/">A practical guide to writing technical specs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.industrialempathy.com/posts/design-docs-at-google/">Design Docs at Google&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://caitiem.com/2020/03/29/design-docs-markdown-and-git/">Design Docs, Markdown, and Git&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cognitect.com/blog/2011/11/15/documenting-architecture-decisions">Documenting Architecture Decisions&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.range.co/blog/better-tech-specs">How to write a better technical design document&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://multithreaded.stitchfix.com/blog/2020/12/07/remote-decision-making/">Technical Decision-Making and Alignment in a Remote Culture&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/machine-words/writing-technical-design-docs-71f446e42f2e">Writing Technical Design Docs&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="engineering-strategy">Engineering Strategy&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://multithreaded.stitchfix.com/blog/2019/08/19/framework-for-responsible-innovation/">A Framework For Responsible Innovation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://slack.engineering/how-big-technical-changes-happen-at-slack-f1569d25ee7b">How Big Technical Changes Happen at Slack - Several People Are Coding&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.paperplanes.de/2020/1/31/on-drafting-an-engineering-strategy.html">On Drafting an Engineering Strategy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sarahtaraporewalla.com/agile/design/architecture/Defining-a-Tech-Strategy">Defining a Tech Strategy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.thepete.net/blog/2019/12/09/delivering-on-an-architecture-strategy/">Delivering on an architecture strategy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@jamesacowling/stepping-stones-not-milestones-e6be0073563f">Stepping Stones not Milestones&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yenkel.dev/posts/achieving-alignment-and-efficiency-through-a-technical-strategy">Achieving Alignment and Efficiency Through a Technical Strategy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/ft-product-technology/the-difficult-teenage-years-setting-tech-strategy-after-a-launch-7f42eb94a424">The difficult teenage years: Setting tech strategy after a launch&lt;/a> by Anna Shipman&lt;/li>
&lt;li>&lt;a href="https://unwiredcouch.com/2018/01/03/engineering-vision.html">Learning to have an engineering vision&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Examples of engineering strategies:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.intercom.com/blog/run-less-software/">Run less software&lt;/a> by Rich Archibold&lt;/li>
&lt;/ul>
&lt;p>There are also many great resources on other facets of strategy as well, for example, Marty Cagan&amp;rsquo;s series on &lt;a href="https://svpg.com/product-strategy-overview/">Product Strategy&lt;/a>.&lt;/p>
&lt;h2 id="books">Books&lt;/h2>
&lt;p>Although I&amp;rsquo;ve found that many folks don&amp;rsquo;t read too many books, when I asked Staff engineers for their most valuable resources, they inevitably mentioned a personal mentor or a book. They had blog posts and tech talks they might mention related to a more specific problem, but they were most changed by this larger, more papery format.&lt;/p>
&lt;p>Some books which were recommended:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://lethain.com/notes-philosophy-software-design/">A Philosophy of Software Design&lt;/a> by John Ousterhout&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com/dp/B07B9F83WM/">Accelerate: Building and Scaling High Performing Technology Organizations&lt;/a> by Forsgren, Humble, and Kim&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com/dp/B004J4VV3I/">Becoming a Technical Leader: An Organic Problem-Solving Approach&lt;/a> by Gerald Weinberg&lt;/li>
&lt;li>&lt;a href="https://lethain.com/building-evolutionary-architectures/">Building Evolutionary Architectures&lt;/a> by Ford, Parsons, and Kua&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com/dp/B07K3QBWG1/">Escaping the Build Trap: How Effective Product Management Creates Real Value&lt;/a> by Melissa Perri&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com/dp/B004J4WKEC">Good Strategy Bad Strategy: The Difference and Why it Matters&lt;/a> by Richard Rumelt&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com/dp/B015VACHOK/">High Output Management&lt;/a> by Andy Grove&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com/dp/B06XP3GJ7F/">The Manager&amp;rsquo;s Path: A Guide for Tech Leaders Navigating Growth and Change&lt;/a> by Camille Fournier&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com/dp/0201835959/">The Mythical Man-Month&lt;/a> by Fred Brooks&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com/dp/B078Y98RG8/">The Phoenix Project&lt;/a> by Kim, Behr, and Spafford.&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com/dp/B00AYQNR5U/">The Passionate Programmer&lt;/a> by Chad Fowler&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com/dp/020161622X">The Pragmatic Programmer&lt;/a> by Hunt and Thomas&lt;/li>
&lt;li>&lt;a href="https://resilient-management.com/">Resilient Management&lt;/a> by Lara Hogan&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com/dp/B07BVRLZ87">Software Design X-Rays: Fix Technical Debt with Behavioral Code Analysis&lt;/a> by Adam Tornhill&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com/dp/1603580557">Thinking in Systems: A Primer&lt;/a> by Donella Meadows&lt;/li>
&lt;/ul>
&lt;p>If you&amp;rsquo;re looking for, even more, recommended book lists abound, including my own at &lt;a href="https://lethain.com/best-books">Irrational Exuberance&amp;rsquo;s Best Books&lt;/a>.&lt;/p>
&lt;h2 id="talks">Talks&lt;/h2>
&lt;p>The Staff-plus engineers I&amp;rsquo;ve chatted with have generally mentioned giving talks as more valuable to them than listening to talks, but there certainly are some excellent talks out there. &lt;a href="https://medium.com/@copyconstruct">Cindy Sridharan&lt;/a> (&lt;a href="https://twitter.com/copyconstruct">Twitter&lt;/a>) is the best source of amazing talks, in particular, her write-ups of &lt;a href="https://medium.com/@copyconstruct/best-of-2019-in-tech-talks-bac697c3ee13">Best of 2019 in Tech Talks&lt;/a>, &lt;a href="https://medium.com/@copyconstruct/best-of-2018-in-tech-talks-2970eb3097af">Best of 2018 in Tech Talks&lt;/a>, and &lt;a href="https://medium.com/@copyconstruct/best-of-2017-in-tech-talks-8f78b34ff0b">Best of 2017 in Tech Talks&lt;/a>.&lt;/p>
&lt;h2 id="papers">Papers&lt;/h2>
&lt;p>Relatively few Staff-plus Engineers are avid readers of Computer Science papers. However, most are familiar with a handful of foundational papers, and the small subset who do spend time reading papers tend to get quite a bit out of it.&lt;/p>
&lt;p>If you aspire to join the category of frequent paper readers, there&amp;rsquo;s no better place than Adrian Colyer&amp;rsquo;s &lt;a href="https://blog.acolyer.org/">the morning paper&lt;/a>, which will send you a summary of a computer science paper every weekday. If you&amp;rsquo;re more interested in getting some foundational exposure to some well-known papers, first read one of &lt;a href="https://organizationsandmarkets.com/2010/08/31/how-to-read-an-academic-article/">How to Read an Academic Article&lt;/a> by Peter Klein or &lt;a href="https://blizzard.cs.uwaterloo.ca/keshav/home/Papers/data/07/paper-reading.pdf">How to Read a Paper&lt;/a> by S. Keshav, and then jump into this list of recommended papers:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://s3.amazonaws.com/systemsandpapers/papers/amazon-dynamo-sosp2007.pdf">Dynamo: Amazon&amp;rsquo;s Highly Available Key-value Store&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://s3.amazonaws.com/systemsandpapers/papers/hamilton.pdf">On Designing and Deploying Internet-Scale Services&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://s3.amazonaws.com/systemsandpapers/papers/Frederick_Brooks_87-No_Silver_Bullet_Essence_and_Accidents_of_Software_Engineering.pdf">No Silver Bullet - Essence and Accident in Software Engineering&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://s3.amazonaws.com/systemsandpapers/papers/outofthetarpit.pdf">Out of the Tar Pit&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://s3.amazonaws.com/systemsandpapers/papers/chubby-osdi06.pdf">The Chubby lock service for loosely-coupled distributed systems&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf">Bigtable: A Distributed Storage System for Structured Data&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://s3.amazonaws.com/systemsandpapers/papers/raft.pdf">Raft: In Search of an Understandable Consensus Algorithm&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://s3.amazonaws.com/systemsandpapers/papers/paxos-made-simple.pdf">Paxos Made Simple&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://s3.amazonaws.com/systemsandpapers/papers/swim.pdf">SWIM: Scalable Weakly-consistent Infection-style Process Group Membership Protocol&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://s3.amazonaws.com/systemsandpapers/papers/acrobat-17.pdf">Hints for Computer System Design&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://s3.amazonaws.com/systemsandpapers/papers/bigballofmud.pdf">Big Ball of Mud&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://s3.amazonaws.com/systemsandpapers/papers/gfs.pdf">The Google File System&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed">CAP Twelve Years Later: How the Rules Have Changed&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://s3.amazonaws.com/systemsandpapers/papers/FOX_Brewer_99-Harvest_Yield_and_Scalable_Tolerant_Systems.pdf">Harvest, Yield, and Scalable Tolerant Systems&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://s3.amazonaws.com/systemsandpapers/papers/mapreduce.pdf">MapReduce: Simplified Data Processing on Large Clusters&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://s3.amazonaws.com/systemsandpapers/papers/dapper.pdf">Dapper, a Large-Scale Distributed Systems Tracing Infrastructure&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://s3.amazonaws.com/systemsandpapers/papers/Kafka.pdf">Kafka: a Distributed Messaging System for Log Processing&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://s3.amazonaws.com/systemsandpapers/papers/borg.pdf">Large-scale cluster management at Google with Borg&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://s3.amazonaws.com/systemsandpapers/papers/mesos.pdf">Mesos: A Platform for Fine-Grained Resource Sharing in the Data Center&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Probably the best place to find high-quality papers to read is &lt;a href="https://paperswelove.org/">Papers We Love&lt;/a>, which also run meetups to discuss papers. A few other resources are the &lt;a href="https://www.sigops.org/awards/hof/">ACM SIGOPS Hall of Fame Award list&lt;/a> and &lt;a href="https://lethain.com/some-of-my-favorite-technical-papers/">Irrational Exuberance&amp;rsquo;s paper collection&lt;/a>.&lt;/p>
&lt;h2 id="other-nice-things">Other nice things&lt;/h2>
&lt;p>As I did the research for these resources, I found some other pieces that didn&amp;rsquo;t quite fit anywhere above, but which I think are good and worth looking at nonetheless:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/@copyconstruct/testing-in-production-the-safe-way-18ca102d0ef1">Testing in Production, the safe way&lt;/a> and &lt;a href="https://medium.com/@copyconstruct/testing-in-production-the-hard-parts-3f06cefaf592">Testing in Production: the hard parts&lt;/a> by Cindy Sridharan&lt;/li>
&lt;li>&lt;a href="https://medium.com/@copyconstruct/a-decade-in-review-in-tech-1cde76c9b43c">A decade in review in tech&lt;/a> by Cindy Sridharan&lt;/li>
&lt;li>&lt;a href="https://blog.danielna.com/boogeyman-problems/">Boogeyman Problems&lt;/a> by Dan Na&lt;/li>
&lt;/ul>
&lt;p>If you find more, please send them my way!&lt;/p></description></item><item><title>Getting in the room, and stay there</title><link>https://staffeng.com/guides/getting-in-the-room/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/getting-in-the-room/</guid><description>&lt;p>One of the most common frustrations I&amp;rsquo;ve heard from engineers is that they&amp;rsquo;re not in the room where important decisions are being made. They don&amp;rsquo;t understand the company&amp;rsquo;s decisions and have important context that seems to be missing or ignored. Staff-plus engineers frequently cite access to &amp;ldquo;the room&amp;rdquo; as a major benefit of their level, and titles do increase the likelihood that you&amp;rsquo;ll be involved in decisions that impact you.&lt;/p>
&lt;p>However, it&amp;rsquo;s important to remember there&amp;rsquo;s no single &amp;ldquo;room&amp;rdquo; to enter. Getting into the right room isn&amp;rsquo;t a one-time challenge to be faced. Entering rooms will be an ongoing, iterative career challenge. That means it&amp;rsquo;s worth getting good at!&lt;/p>
&lt;p>Early in your career, it might be a sprint pre-planning meeting with your tech lead and product manager. Later it might be a quarterly planning meeting, an &lt;a href="https://lethain.com/scaling-consistency/">architecture review&lt;/a>, the &lt;a href="https://lethain.com/perf-management-system/">performance calibration&lt;/a>, the engineering leadership team, or the executive team. There will always be another room to enter. To reach senior levels, you have to become effective at not only &lt;em>entering&lt;/em> but also &lt;em>staying&lt;/em> in these rooms of power.&lt;/p>
&lt;h2 id="getting-in-the-room">Getting in the room&lt;/h2>
&lt;p>To get into the room, you need:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>To bring something useful to the room&amp;hellip;&lt;/strong> This could be details on a critical project, context from a critical team, subject matter expertise related to the room&amp;rsquo;s purpose, experience running a similar project or team at a previous company, a relationship with a key relevant customer, or something else entirely.&lt;/li>
&lt;li>&lt;strong>&amp;hellip;that the room doesn&amp;rsquo;t already have.&lt;/strong> It&amp;rsquo;s not enough to have something useful to bring to the room. It also needs to be a perspective that isn&amp;rsquo;t already present within the room. Small groups function better than larger ones, so operating forums generally sacrifice redundancy and representation for efficiency. To be included in those rooms, you&amp;rsquo;ll need to bring something distinct from the current membership.&lt;/li>
&lt;li>&lt;strong>A sponsor in the room.&lt;/strong> These rooms have limited slots and have to function well as a group. To get into the room, you&amp;rsquo;ll need someone to sponsor your membership. Your sponsor is allocating their social capital towards your inclusion, and their peers will judge them based on your actions within the room. These rooms often have a mix of seniority levels, so it&amp;rsquo;s often the case that your sponsor&amp;rsquo;s manager is in the room evaluating &lt;em>them&lt;/em> based on their decision to sponsor &lt;em>you&lt;/em>.&lt;/li>
&lt;li>&lt;strong>Your sponsor needs to know you want to be there.&lt;/strong> Your sponsor is probably in many different rooms
and probably daydreams of leaving most of those meetings behind them. They won&amp;rsquo;t necessarily assume you want to
be in any particular meeting, and in fact might assume you don&amp;rsquo;t want to be there at all.
Make sure that they know if you want to be included.&lt;/li>
&lt;/ul>
&lt;p>How you bring something useful to the room is going to be context-specific to you and the room you&amp;rsquo;re trying to enter: there isn&amp;rsquo;t any single pattern to follow. Whether someone with similar context is already in the room is also unique to your circumstances, and at some points in time, the only options are to wait or look for another room to enter.&lt;/p>
&lt;p>On the other side of things, sometimes the easiest way to increase your value to the room is by decreasing the cost of including you. Some of the approaches that work well are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Stay aligned with your manager.&lt;/strong> Folks evaluate leaders on how aligned their teams are with their announced approach. If they&amp;rsquo;ve proclaimed a shift to continuous deployment, but their team is chanting for release trains, then folks get skeptical about who is leading who. You&amp;rsquo;ll be much more likely to be sponsored into the room if you&amp;rsquo;re highly aligned with your sponsor. If you&amp;rsquo;re &lt;em>particularly&lt;/em> aligned, they&amp;rsquo;re more likely to yield their own seat to you and stop attending.&lt;/li>
&lt;li>&lt;strong>Optimize for the group.&lt;/strong> One of Stripe&amp;rsquo;s old operating principles was &amp;ldquo;Optimize for Stripe,&amp;rdquo; and that mentality of optimizing widely for others builds trust and confidence in your judgment.&lt;/li>
&lt;li>&lt;strong>Speak clearly and concisely.&lt;/strong> Learn to speak concisely: as you develop an economy of speech, you&amp;rsquo;ll be able to contribute more ideas with less time. Learn to speak clearly: if folks don&amp;rsquo;t understand your proposal, then it doesn&amp;rsquo;t matter how good it is. Keep in mind that it&amp;rsquo;s your obligation to be understood, not the obligation of everyone else to understand you.&lt;/li>
&lt;li>&lt;strong>Be low friction.&lt;/strong> It&amp;rsquo;s easy to fall into the trap of viewing each discussion as the last opportunity to stop an impending disaster. With that mindset, each discussion is a near-emergency, and emotions run high. Those sorts of discussions usually spend their time draining frustration rather than making forward progress. If you&amp;rsquo;re known as someone who can navigate difficult conversations effectively, you&amp;rsquo;re much more likely to be involved.&lt;/li>
&lt;li>&lt;strong>Come prepared.&lt;/strong> Some companies infantilize their engineers, accepting that even very senior engineers won&amp;rsquo;t read the agenda, do the pre-reads or prepare for the discussion. There&amp;rsquo;s a considerable gap between what&amp;rsquo;s tolerated and what&amp;rsquo;s rewarded, and you&amp;rsquo;ll stand out if you take the time to organize your thoughts before each meeting. Equally important is following up on what you committed to.&lt;/li>
&lt;li>&lt;strong>Focus and be present.&lt;/strong>
Once you&amp;rsquo;ve entered the room, be sure to show up and engage.
Be attentive and engaged. Whatever else you want to be doing, it will wait.&lt;/li>
&lt;li>&lt;strong>Volunteer for low-status tasks.&lt;/strong> If someone needs to take notes, raise your hand.
If someone needs to follow up on action items, be available.
Prioritize being useful, especially when it isn&amp;rsquo;t the most exciting work.&lt;/li>
&lt;/ul>
&lt;p>To get into the room, you have to work both the numerator and denominator: keep developing a unique and useful perspective while also becoming more effective at delivering that perspective within the constraints of a meeting.&lt;/p>
&lt;h2 id="staying-in-the-room">Staying in the room&lt;/h2>
&lt;p>Getting into the room is your first hurdle, but the second hurdle is staying in the room. Most important is to keep doing the things that got you into the room: bring important context into the room, present a polished version of yourself, be concise, be flexible.&lt;/p>
&lt;p>There are a few patterns that will consistently get you kicked out of the room:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Misunderstanding the room&amp;rsquo;s purpose.&lt;/strong> Each room has &lt;a href="https://www.tablegroup.com/books/dbm/">its own purpose&lt;/a>, and you&amp;rsquo;ll create friction if you attempt to use a room against the existing group&amp;rsquo;s intent. It&amp;rsquo;s very common for the external perception of a given room&amp;rsquo;s function (&amp;ldquo;they make all the decisions in the leadership team meeting&amp;rdquo;) to be rather far from how the room thinks of its role (&amp;ldquo;we don&amp;rsquo;t make decisions, just surface problems to discuss&amp;rdquo;). Take the time to understand how the room operates and integrate into it with respect for that intention.&lt;/li>
&lt;li>&lt;strong>Being dogmatic.&lt;/strong> As rooms get more senior, they have to discuss very sensitive topics (compensation, layoffs, promotions, acquisitions, etc), and they have a fixed amount of time to work together each week. If you&amp;rsquo;re dogmatic, you will create friction that slows down discussion and impedes the group&amp;rsquo;s ability to make progress.&lt;/li>
&lt;li>&lt;strong>Withholding consent.&lt;/strong> Effective groups are formed from individuals who are willing to &lt;a href="https://en.wikipedia.org/wiki/Disagree_and_commit">disagree and commit&lt;/a>. You can often force a group towards your perspective by withholding your consent until thinking moves your way, but the group&amp;rsquo;s pace will slow to a halt, and you&amp;rsquo;ll likely get removed from it.&lt;/li>
&lt;li>&lt;strong>Sucking the oxygen out of the room.&lt;/strong> There are brainstorm discussions where every idea is welcome, and there are moments when you&amp;rsquo;ve shifted into operating mode to unblock project execution, and you have to read the room on which is happening. Usually, this comes from &lt;a href="https://lethain.com/showing-value/">an urge to show value&lt;/a>, but remember that you&amp;rsquo;re in the room because of what got you into the room, not in the hopes that entering the room will magically transform you into someone entirely new.&lt;/li>
&lt;li>&lt;strong>Embarrassing your sponsor.&lt;/strong> Remember that you got into a room because someone in the room advocated for your inclusion.&lt;/li>
&lt;li>&lt;strong>Being flakey or not showing up regularly.&lt;/strong> There are only so many slots, and the person running the meeting will prioritize them on people who show up.&lt;/li>
&lt;/ul>
&lt;p>That said, I think it&amp;rsquo;s easy to get caught up worrying too much about staying in the room. Sometimes you&amp;rsquo;re better off thinking about whether the room&amp;rsquo;s a valuable place to invest your time.&lt;/p>
&lt;h2 id="exiting-the-room">Exiting the room&lt;/h2>
&lt;p>It&amp;rsquo;s important to remember that while there are infinite rooms to be in, there&amp;rsquo;s no room where the work actually happens. You&amp;rsquo;ll be most impactful if you&amp;rsquo;re selective on which rooms you stay in. While I&amp;rsquo;ve met many folks who resent not being allowed entry into some room they&amp;rsquo;re fixated on, I&amp;rsquo;ve never met anyone who regrets leaving a room too soon. If any given room doesn&amp;rsquo;t feel useful, exit the room. While exiting, sponsor someone else into the opportunity you&amp;rsquo;re leaving behind.&lt;/p></description></item><item><title>Learn to never be wrong</title><link>https://staffeng.com/guides/learn-to-never-be-wrong/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/learn-to-never-be-wrong/</guid><description>&lt;blockquote>
&lt;p>I present what I think is the best case for us, and people can disagree with that. And, you know, they often do. I&amp;rsquo;m steering and influencing more than saying, &amp;ldquo;I&amp;rsquo;ve got the authority to just tell you what to do.&amp;rdquo; I&amp;rsquo;ve never seen that style work well.
- &lt;a href="https://staffeng.com/stories/keavy-mcminn">Keavy McMinn&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>Most folks have worked with someone who thinks they&amp;rsquo;re never wrong. In each discussion, they lean in, broaden their shoulders and breach their way into the role of the decider. They&amp;rsquo;ll continue debating until their perspective wins the day or time runs out. They are often right, but right in a way that sucks the oxygen out of the room. As their tenure at a company increases, they may fancy that they&amp;rsquo;ve become very persuasive, but frequently it&amp;rsquo;s a form of persuasion characterized by the resignation of their peers.&lt;/p>
&lt;p>A few of the technical leaders that I&amp;rsquo;ve worked with have found a way to never be wrong without dominating the room. To be right while creating space for others. Someone who has always embodied this approach for me is &lt;a href="https://twitter.com/thisisfranklin">Franklin Hu&lt;/a>, who I&amp;rsquo;ve seen reliably disarm contentious discussions with his commitment to finding the best outcome for everyone, willingness to leave his starting position and the default assumption that there&amp;rsquo;s always an additional piece of context that reconciles seemingly conflicting perspectives into a unified view.&lt;/p>
&lt;p>To become a senior technical leader, you must build a deep perspective on technology and architecture. To operate as such a leader, you must then develop an equally deep pragmatism and agnosticism to technical religion to remain skeptical of yourself. This can feel like a paradox, but it&amp;rsquo;s the line you&amp;rsquo;ll need to walk every day.&lt;/p>
&lt;h2 id="listen-clarify-and-read-the-room">Listen, clarify and read the room&lt;/h2>
&lt;p>A lot of times, you&amp;rsquo;ll see engineers go into a discussion confident that their perspective is right and with the goal of getting other folks in the room to agree with their approach. This mentality turns each meeting into a zero-sum debate. Even in the &amp;ldquo;best case&amp;rdquo; that their approach is agreed upon, they didn&amp;rsquo;t get to learn from anyone else in the room, and it&amp;rsquo;s unlikely that the rest of the room is leaving energized.&lt;/p>
&lt;p>The most effective engineers go into each meeting with the goal of agreeing on the problem at hand, understanding the needs and perspectives within the room, and identifying what needs to happen to align on an approach. They approach each meeting as one round within the broader context of the project and their relationships with the folks in the room. If the room is ready to agree and move forward on a solution, they land the team on that approach. If the room isn&amp;rsquo;t ready, they don&amp;rsquo;t force it to happen.&lt;/p>
&lt;p>To get good at this, you need to master three approaches: listen through questions, define the purpose, and know how to read the room.&lt;/p>
&lt;p>&lt;strong>Listening through questions&lt;/strong> is a form of active listening with the goal of understanding the rest of the room&amp;rsquo;s perspectives. The act of asking good questions with good intent opens up a conversation, creating space and safety for others to ask their own questions. Good questions are asked with the desire to learn, and they are specific. They sharpen the conversation. They free the answerer from the obligation to defend their position. In a potentially contentious meeting, ask three good questions before you share your perspective, and you&amp;rsquo;ll see the room shift around you.&lt;/p>
&lt;p>Good meetings start from a clear purpose and agenda, but many meetings don&amp;rsquo;t meet that definition, particularly ad-hoc discussions. If you ever find yourself in a conversation with an unclear goal, then &lt;strong>define the purpose&lt;/strong>. Take a moment to ask if your understanding of what the group hopes to accomplish is correct. This works best as a statement wrapped in a clarifying question along the lines of, &amp;ldquo;Just to check, our goal here is to decide whether to postpone launching the project by two weeks?&amp;rdquo;&lt;/p>
&lt;p>Note that defining the purpose can be disruptive if it&amp;rsquo;s used too frequently. Rather than helping to clarify the conversation, in that case, it creates conversational churn. For the most part, try to avoid using it if someone else has already made an attempt. Meetings with multiple failed reframings almost always end with scheduling another meeting.&lt;/p>
&lt;p>Finally, in each meeting, you have to &lt;strong>read the room&lt;/strong>. Oftentimes folks get frustrated with a conversation and try to force agreement, which creates so much pressure on the discussion that it&amp;rsquo;s unlikely to conclude well. If the folks in the room are too far apart, then identify a subgroup who are able to spend more time digging into it together or identify an appropriate party to escalate to outside of the room. If there&amp;rsquo;s simply too much stuff in the drawer, stop trying to shove it shut.&lt;/p>
&lt;h2 id="how-to-practice">How to practice&lt;/h2>
&lt;p>If these behaviors don&amp;rsquo;t come naturally to you, that&amp;rsquo;s okay; the opportunity to practice is all around. Every comment on a document is an opportunity. Every meeting is an opportunity. Every pull request is an opportunity.&lt;/p>
&lt;p>Start each week by picking one of these skills you want to explicitly use in the meetings you head into. If you have a particularly difficult meeting come up, spend some time practicing in your head or with a peer how you might use these approaches to facilitate forward progress despite the challenges.&lt;/p>
&lt;h2 id="jerks">Jerks&lt;/h2>
&lt;p>The above approach works well most of the time, but not always, and one of the notable exceptions is when you&amp;rsquo;re dealing with a jerk. In this case, a jerk is someone who withholds their consent from the group, isn&amp;rsquo;t willing to compromise, or doesn&amp;rsquo;t listen. This is someone who hasn&amp;rsquo;t learned that their career depends more on being easy to involve than being technically correct.&lt;/p>
&lt;p>The two most effective ways to deal with jerks are:&lt;/p>
&lt;ol>
&lt;li>including someone they can&amp;rsquo;t be a jerk to in the meeting (like their manager or the CTO)&lt;/li>
&lt;li>investing heavily into aligning with them before the meeting, so they feel heard and are less likely to derail the discussion&lt;/li>
&lt;/ol>
&lt;p>Both of these can feel ridiculous to spend your time on, but they&amp;rsquo;re what tends to work best, especially if it&amp;rsquo;s a jerk you interact with infrequently. If it&amp;rsquo;s someone in an area that you&amp;rsquo;re responsible for or someone you work with frequently, then you have a somewhat different set of obligations. In that case, give them the feedback as kindly as you can while still being honest. Give it a second time. Document both, and if you don&amp;rsquo;t see an improvement, then communicate the concerns to their manager, including the specific documentation, in a face to face or video discussion.&lt;/p>
&lt;p>It&amp;rsquo;s also useful to recognize that the authority created by your title shelters you from many of these folks, so whoever you&amp;rsquo;re experiencing is being less of a jerk to you than they are to others. If the behavior feels borderline for you, it&amp;rsquo;s potentially more egregious for others.&lt;/p>
&lt;h2 id="how-it-helps">How it helps&lt;/h2>
&lt;p>This approach is powerful because more complex projects get derailed by personal conflict than by technical complexity, and this is a repeatable way to replace tension with partnership. It feels like it&amp;rsquo;s slow because it can take longer to get started, but ultimately it&amp;rsquo;s fast because you&amp;rsquo;re more likely to complete the work without disruption.&lt;/p>
&lt;p>In addition, longevity as a senior leader is just as much about maintaining your relationships as it is about standout successes. You&amp;rsquo;ll see a bunch of folks who burn bright for a while but later lack the support to make forward progress. If you want to avoid that fate, learn to never be wrong and never stop practicing.&lt;/p></description></item><item><title>To lead, you have to follow</title><link>https://staffeng.com/guides/to-lead-follow/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/to-lead-follow/</guid><description>&lt;blockquote>
&lt;p>It&amp;rsquo;s about taking that global thinking and applying it locally. That means aligning your team&amp;rsquo;s (technical) initiatives/roadmaps to the Engineering–wide technical strategy; and being intentional about when you veer off of that path to serve the needs of your team&amp;rsquo;s immediate stakeholders. That means collaborating with your team&amp;rsquo;s managers in adopting successful practices in hiring, onboarding, and production operations from other teams; and sharing practices from your team that would be beneficial for others. That means taking context from company-wide business/product strategy and translating that to how it impacts your team&amp;rsquo;s immediate projects
- &lt;a href="https://staffeng.com/stories/ras-kasa-williams">Ras Kasa Williams&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>Years ago, the company I was working with hired a new Director of Engineering, and the CTO was talking about why the new Director was an amazing hire. The new Director&amp;rsquo;s clinching accomplishment? The best ever explanation of the distinction between leadership and management. This turned out not to be a particularly effective way to evaluate hires, but it is an interesting topic.&lt;/p>
&lt;p>Defining leadership and management is such heavily trodden terrain that it&amp;rsquo;s hard to add much to it, but roughly management is a specific profession, and leadership is an approach one can demonstrate within any profession.&lt;/p>
&lt;p>The way I think about leadership has evolved a bit over the last few years, though, coming to focus on two specific attributes. First, leaders have a sufficiently refined view of how things &lt;em>ought to work&lt;/em> such that they can rely on their distinction between how things &lt;em>are&lt;/em> and how they &lt;em>ought&lt;/em> &lt;em>to be&lt;/em> to identify proactive, congruent actions to narrow that gap. Second, they care enough about the gap to actually attempt those narrowing actions.&lt;/p>
&lt;p>If you only see the gap without acting on it, you might be a visionary, but you&amp;rsquo;re inert. If you take action without a clear view of the goal, many will consider you a leader, but your impact will be random, arbitrary, and inefficient. Combining both with some luck is likely to take you a long way in your career, and these are characteristics common in folks I&amp;rsquo;ve worked with who successfully navigate
the transition into Staff-plus engineering or senior management roles.&lt;/p>
&lt;p>But this sort of leadership can only take you so far, and personally, it took me &lt;em>years&lt;/em> of blundering to understand why my approach to leadership created so much early success for me when first joining a company but slowly eroded how my contribution was received over time. The lesson that I slowly learned was that you couldn&amp;rsquo;t be an effective long-term leader until you learn how to follow.&lt;/p>
&lt;p>I think this is the most important lesson I&amp;rsquo;ve learned over the past few years: the most effective leaders spend more time following than they do leading. This idea also comes up in the idea of the &amp;ldquo;&lt;a href="https://www.cornerstoneondemand.com/rework/ted-talk-tuesday-how-start-movement">the first follower creates a leader&lt;/a>,&amp;rdquo; but effective leaders don&amp;rsquo;t split the world into a leader and follower dichotomy, rather they move in and out of leadership and follower roles with the folks around them.&lt;/p>
&lt;p>There are many ways to put this approach into practice.&lt;/p>
&lt;ol>
&lt;li>Be clear with yourself what your true priorities are, and don&amp;rsquo;t dilute yourself across everything that comes up. If there&amp;rsquo;s something you disagree with but only in a minor way, let others take the lead figuring it out. A helpful question here is, &amp;ldquo;Will what we do here matter to me in six months?&amp;rdquo; If it won&amp;rsquo;t, take the opportunity to follow.&lt;/li>
&lt;li>Give your support quickly to other leaders who are working to make improvements. Even if you disagree with their initial approach, someone trustworthy leading a project will almost always get to a good outcome. If someone trustworthy is leading a project, and you&amp;rsquo;re still uncomfortable letting them move forward, consider why you lack confidence in your ability to influence them and if you&amp;rsquo;re bad at giving feedback.&lt;/li>
&lt;li>Make your feedback explicitly non-blocking. This can be classifying a code review comment as an &amp;ldquo;optional nit,&amp;rdquo; but it can also be writing up detailed feedback but delivering it to someone mentioning that you wanted to share your perspective rather than necessarily change their approach.&lt;/li>
&lt;/ol>
&lt;p>If this is something you&amp;rsquo;ve struggled with, I&amp;rsquo;m sympathetic. I&amp;rsquo;ve struggled with it too. When you have a strong enough worldview to lead, you&amp;rsquo;ll start to collect others around you who rely on you maintaining that world&amp;rsquo;s physics, and tolerating any deviation from your vision can feel like you&amp;rsquo;re letting them down. But this is the epitome of something that&amp;rsquo;ll get you to one level of success but block the next: continued growth requires learning to incorporate your worldview into the worldviews of those around you, accelerating overall progress around you even if it means tolerating a detour from your vision.&lt;/p>
&lt;p>What you can accomplish alone is far from what you can accomplish by creating leaders. To be a great leader, take your time learning to follow.&lt;/p></description></item><item><title>Staying aligned with authority</title><link>https://staffeng.com/guides/staying-aligned-with-authority/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/staying-aligned-with-authority/</guid><description>&lt;blockquote>
&lt;p>In my role, we&amp;rsquo;ll often go weeks without being in the same room together, but I still have to operate as if I&amp;rsquo;m his direct proxy. So I go into a room and think, &amp;ldquo;What would Matthew do here? What is the question he would want to ask? What guidance has he given on this problem?&amp;rdquo; Because I can&amp;rsquo;t always run back to him for clarification, it&amp;rsquo;s essential to develop and maintain a deep understanding of his world view. That&amp;rsquo;s essential for me to retain the very deep trust required to be his representative and effectively carry out his strategy and vision. People need to be confident that I&amp;rsquo;ll always give the same answer that Matthew would give if he were there.
-&lt;a href="https://staffeng.com/stories/rick-boone">Rick Boone&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>It&amp;rsquo;s a common misconception that authority makes you powerful. Many folks aspiring towards more senior roles assume they&amp;rsquo;ll finally get to do things their way. They believe that the title inherently creates flexibility and autonomy. They believe that the friction holding them back will burst into a whirl of butterflies that scatter into the wind.&lt;/p>
&lt;p>The reality is a bit more nuanced.&lt;/p>
&lt;p>Titles come with the sort of power called organizational authority, and that variety of authority is loaned to you by a greater organizational authority. What&amp;rsquo;s bestowed can also be retracted, and retaining organizational authority depends on remaining deeply aligned with the bestowing sponsor, generally your direct manager. To remain effective within a Staff-plus role, you have to learn the art of staying aligned with organizational authority.&lt;/p>
&lt;h2 id="beyond-the-safety-net">Beyond the safety net&lt;/h2>
&lt;p>Retire your remaining expectations that the company is designed to set you up for success. Now &lt;em>you&lt;/em> are one of the people responsible for setting the company, your team, and your manager up for success.&lt;/p>
&lt;p>Most mature technology companies succeed in creating a predictable promotion pipeline from folks joining early in their careers up through attaining the Senior engineer title. The process of getting a Staff title is generally more complex than preceding titles but usually navigated with the support of your engineering manager. Throughout this pipeline, you may become comfortable with your manager guiding your development and providing a safety net for your continued success. After reaching a Staff role, your safety net will cease to exist, or at best, the safety net will be short enough that you&amp;rsquo;re quite capable of jumping past it and into the awaiting chasm. This will be increasingly true as you go further into Senior Staff and Distinguished engineer roles.&lt;/p>
&lt;p>Staff-plus roles are leadership roles, and in leadership roles, the support system that got you here will fade away. Often abruptly, you&amp;rsquo;re now expected to align the pieces around you for your own success.&lt;/p>
&lt;h2 id="serving-at-the-pleasure-of-the-president">Serving at the pleasure of the President&lt;/h2>
&lt;p>When &lt;a href="https://staffeng.com/stories/rick-boone">Rick Boone&lt;/a> described his role as Strategic Advisor to the Vice-President of Infrastructure at Uber, he compared his role to &lt;a href="https://awoiaf.westeros.org/index.php/Hand_of_the_King">Hand of the King&lt;/a> in &lt;em>Game of Thrones&lt;/em>, and &lt;a href="https://westwing.fandom.com/wiki/Leo_McGarry">Leo McGarry&lt;/a> from &lt;em>The West Wing&lt;/em> who frequently remarked, &amp;ldquo;I serve at the pleasure of the President.&amp;rdquo; In both those examples, authority flows from the tight association with greater authority, and it&amp;rsquo;s a great mental model for operating in a Staff-plus role. This can be a difficult transition from previous roles where your authority primarily accumulated through your personal actions and impact over time.&lt;/p>
&lt;p>If you and your manager have worked together for years, then you&amp;rsquo;ve already performed a subtle, subterranean sort of alignment over that time. In other cases, a new executive will join who is familiar with supporting these roles and will bring a deliberate map of how they want to work together. However, both of those circumstances are largely out of your control, so it&amp;rsquo;s valuable to develop your own approach to aligning upward with your manager.&lt;/p>
&lt;p>To align with your manager, some areas to focus on are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Never surprise your manager.&lt;/strong> Nothing destroys trust faster than surprising your manager. Steering a large organization often involves juggling several projects and problems in your head at once, and surprises threaten the juggler&amp;rsquo;s rhythm. Large or frequent surprises also call into question whether a leader is truly taking responsibility for their organization. In general, treat each time you surprise your manager as an incident to be learned from and endeavor to prevent repeats.&lt;/li>
&lt;li>&lt;strong>Don&amp;rsquo;t let your sponsor surprise you.&lt;/strong> Most folks have extremely high expectations of their managers, assuming, for example, that they will always remember to relay information relevant to your current work. Managers try to do this, some of them are excellent at it, and others are not particularly good. If your manager isn&amp;rsquo;t great at this, you should certainly give them feedback, but you should also take proactive action to facilitate information flow. This might be &lt;a href="https://lethain.com/weekly-updates/">weekly email updates&lt;/a> or a Slack thread within your team&amp;rsquo;s channel sharing your focuses for the week. During 1:1s, dig for the feedback! Ask if there are other areas you should be focused on and how your current priorities align with your manager&amp;rsquo;s. If you continue to surprise each other, then &lt;a href="https://lethain.com/identify-your-controls/">identify the controls&lt;/a> you&amp;rsquo;ll use to partner together.&lt;/li>
&lt;li>&lt;strong>Feed your manager&amp;rsquo;s context.&lt;/strong> If the first step is avoiding surprising your manager with your own actions, the next step is to help your manager not get surprised by the wider organization. If teams are frustrated by a new policy or your internal tools aren&amp;rsquo;t scaling with needs, proactively feed that to your manager. Be clear that you&amp;rsquo;re &lt;em>not&lt;/em> bringing them a problem to solve, rather conveying information you believe will be useful. Opinions are helpful, but even more helpful is data when you can find it.&lt;/li>
&lt;/ul>
&lt;p>Sometimes you&amp;rsquo;ll hear someone disparage a colleague, saying that they&amp;rsquo;re excellent at &amp;ldquo;managing up.&amp;rdquo; There are certainly destructive ways to manage up where someone controls information to hide problems or misrepresent circumstances, but at its core, managing up is about increasing bandwidth and reducing friction between you and your manager. Cultivating a deliberate partnership with your manager will go far further than practicing disappointment when they don&amp;rsquo;t meet your expectations.&lt;/p>
&lt;h2 id="influencing-without-too-much-friction">Influencing without too much friction&lt;/h2>
&lt;p>Part of growing as a leader is developing your own perspective on how the world should work, and you can&amp;rsquo;t reach the Staff-plus level without that perspective. Having a clear sense of how things ought to work sharpens your judgment and enables you to act proactively. As you reach this next step of leadership, you increasingly have to merge your vision with those held by more senior organizational leaders.&lt;/p>
&lt;p>Your first approach to solving this problem might be replacing your vision with another leader&amp;rsquo;s vision, and that approach works for some, but for many, it means stepping away from the perspective that facilitated their success as a proactive leader with strong judgment. Instead, I recommend sharpening your awareness of the distinctions between the values that you hold and those that the organization operates under and find a way to advocate for them without getting &lt;a href="https://lethain.com/getting-in-the-room/">kicked out of the room&lt;/a>.&lt;/p>
&lt;p>People can only change so quickly, and organizations are made of people. If you&amp;rsquo;re deliberate in your approach, you&amp;rsquo;ll be able to influence your organization&amp;rsquo;s leaders immensely over time, but you&amp;rsquo;ll only get that time if you learn to remain in tight alignment at each step along the way.&lt;/p></description></item><item><title>Staff archetypes</title><link>https://staffeng.com/guides/staff-archetypes/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/staff-archetypes/</guid><description>&lt;p>Most &lt;a href="https://lethain.com/perf-management-system/">career ladders&lt;/a> define a single, uniform set of expectations for Staff engineers
operating within the company.
Everyone benefits from clear role expectations, but career ladders are a tool that applies better against populations than people.
This is particularly true for Staff-plus engineers, whose career ladders often paper over several distinct roles hidden behind a single moniker.&lt;/p>
&lt;p>The more folks I spoke with about the role of Staff-plus engineers at their company,
the better their experiences began to cluster into four distinct patterns.
Most companies emphasized one or two of the patterns, and one pattern only existed in companies with many hundreds or thousands of engineers.
A few companies didn&amp;rsquo;t feature any technical leadership pattern and pushed all their experienced engineers towards engineering management.
In literature, recurring character patterns are called archetypes, such as the &amp;ldquo;hero&amp;rdquo; or the &amp;ldquo;trickster,&amp;rdquo;
and the archetype term is helpful for labeling these frequent variants of Staff-plus engineers.&lt;/p>
&lt;p>The four common archetypes of Staff-plus roles I encountered are:&lt;/p>
&lt;ul>
&lt;li>The &lt;strong>Tech Lead&lt;/strong> guides the approach and execution of a particular team. They partner closely with a single manager, but sometimes they partner with two or three managers within a focused area. Some companies also have a &lt;em>Tech Lead Manager&lt;/em> role, which is similar to the &lt;em>Tech Lead&lt;/em> archetype but exists on the engineering manager ladder and includes people management responsibilities.&lt;/li>
&lt;li>The &lt;strong>Architect&lt;/strong> is responsible for the direction, quality, and approach within a critical area. They combine in-depth knowledge of technical constraints, user needs, and organization level leadership.&lt;/li>
&lt;li>The &lt;strong>Solver&lt;/strong> digs deep into arbitrarily complex problems and finds an appropriate path forward. Some focus on a given area for long periods. Others bounce from hotspot to hotspot as guided by organizational leadership.&lt;/li>
&lt;li>The &lt;strong>Right Hand&lt;/strong> extends an executive&amp;rsquo;s attention, borrowing their scope and authority to operate particularly complex organizations. They provide additional leadership bandwidth to leaders of large-scale organizations.&lt;/li>
&lt;/ul>
&lt;p>This taxonomy is more focused on being &lt;em>useful&lt;/em> than &lt;em>complete&lt;/em>, but so far, I&amp;rsquo;ve been able to fit every Staff-plus engineer I&amp;rsquo;ve spoken to into one of these categories. Admittedly, some folks are easier to classify than others.&lt;/p>
&lt;h2 id="tech-lead">Tech Lead&lt;/h2>
&lt;p>&lt;img src="https://staffeng.com/archetypes//TechLeadCalendar.png" alt="Example calendar for a Tech Lead archetype">&lt;/p>
&lt;p>&lt;em>Stories featuring Tech Lead archetype&lt;/em>: &lt;a href="https://staffeng.com/stories/diana-pojar">Diana Pojar&lt;/a>, &lt;a href="https://staffeng.com/stories/dan-na">Dan Na&lt;/a>, &lt;a href="https://staffeng.com/stories/ritu-vincent">Ritu Vincent&lt;/a>&lt;/p>
&lt;p>&lt;em>Tech Leads&lt;/em> are the most common Staff archetype and lead one team or a cluster of teams in their approach and execution. They&amp;rsquo;re comfortable scoping complex tasks, coordinating their team towards solving them, and unblocking them along the way. &lt;em>Tech Leads&lt;/em> often carry the team&amp;rsquo;s context and maintain many of the essential cross-team and cross-functional relationships necessary for the team&amp;rsquo;s success. They&amp;rsquo;re a close partner to the team&amp;rsquo;s product manager and the first person called when the roadmap needs to be shuffled.&lt;/p>
&lt;p>Earlier in their career, they will have implemented their team&amp;rsquo;s most complex technical projects, but at this point, they default to delegating such projects across the team.
They do this both to grow their teammates and in acknowledgment that the team&amp;rsquo;s impact grows as the &lt;em>Tech Lead&lt;/em>&amp;rsquo;s coding blocks shrink.
While they&amp;rsquo;re coding less, they are still the person defining their team&amp;rsquo;s technical vision, and stepping in to
build alignment within the team on complex issues.&lt;/p>
&lt;p>The &lt;em>Tech Lead&lt;/em> role is, for many folks, their first experience as a Staff engineer. A few forces conspire towards that result.
First, the &lt;em>Tech Lead&lt;/em> role tends to develop early on within companies that have a strong concept of team,
which is common among companies using agile methodologies, and most companies attempt an agile approach at some point.
Another factor is that the day-to-day work of a &lt;em>Tech Lead&lt;/em> is most similar to the work you&amp;rsquo;d already be doing as a Senior engineer, making it a fairly intuitive transition.
Most importantly, an organization needs roughly one &lt;em>Tech Lead&lt;/em> for every eight engineers, making it far more common than other archetypes.&lt;/p>
&lt;p>Somewhat confusingly, some companies use &lt;em>Tech Lead&lt;/em> as a title, and others use it as a role.
In this list of archetypes, the &lt;em>Tech Lead&lt;/em> is one approach to operating as a Staff engineer,
but it&amp;rsquo;s quite common to perform the &lt;em>Tech Lead&lt;/em> role without having the impact expected of a Staff-level engineer.
Indeed, you&amp;rsquo;ll find non-Staff engineers acting with the behaviors of every archetype.
Being a Staff-engineer is not just a role.
It&amp;rsquo;s the intersection of the role, your behaviors, your impact, and the organization&amp;rsquo;s recognition of all those things.&lt;/p>
&lt;h2 id="architect">Architect&lt;/h2>
&lt;p>&lt;img src="https://staffeng.com/archetypes//ArchitectCalendar.png" alt="Example calendar for Architect archetype">&lt;/p>
&lt;p>&lt;em>Stories featuring Architect archetype&lt;/em>: &lt;a href="https://staffeng.com/stories/joy-ebertz">Joy Ebertz&lt;/a>, &lt;a href="https://staffeng.com/stories/katie-sylor-miller">Katie Sylor-Miller&lt;/a>, &lt;a href="https://staffeng.com/stories/keavy-mcminn">Keavy McMinn&lt;/a>&lt;/p>
&lt;p>The &lt;em>Architect&lt;/em> title has fallen out of style in many companies, but the &lt;em>Architect&lt;/em> role remains alive and well for folks operating at Staff-plus levels. &lt;em>Architects&lt;/em> are responsible for the success of a specific technical domain within their company, for example, the company&amp;rsquo;s API design, frontend stack, storage strategy, or cloud infrastructure. For a domain to merit an &lt;em>Architect&lt;/em>, it must be both complex and enduringly central to the company&amp;rsquo;s success.&lt;/p>
&lt;p>There is a toxic preconception that &lt;em>Architects&lt;/em> design systems in isolation and then pass their designs to others to implement.
That does happen in some cases, but reciting that stereotype would slander the architects I interviewed.
Influential architects dedicate their energy to maintaining an intimate understanding of the business&amp;rsquo; needs, their users&amp;rsquo; goals, and the relevant technical constraints.
They use that insight to identify and advocate for effective approaches within their area of focus,
and do it with organizational authority that they&amp;rsquo;ve earned by demonstrating consistently good judgment.&lt;/p>
&lt;p>The &lt;em>Architect&lt;/em> role tends to evolve in relatively large companies,
companies with exceptionally complex or coupled codebases, and
companies that are struggling to repay the technical debt they created in their initial sprint to product-market fit.
Some companies push for &lt;em>Architects to&lt;/em> remain deep in the codebase, and others set a clear expectation that &lt;em>Architects must not&lt;/em> write code: both models work for some companies.&lt;/p>
&lt;h2 id="solver">Solver&lt;/h2>
&lt;p>&lt;img src="https://staffeng.com/archetypes//SolverCalendar.png" alt="Example calendar for Solver archetype">&lt;/p>
&lt;p>&lt;em>Stories featuring Solver archetype&lt;/em>: &lt;a href="https://staffeng.com/stories/bert-fan">Bert Fan&lt;/a>, &lt;a href="https://staffeng.com/stories/nelson-elhage">Nelson Elhage&lt;/a>&lt;/p>
&lt;p>The &lt;em>Solver&lt;/em> is a trusted agent of the organization who goes deep into knotty problems, continuing to work on them until they&amp;rsquo;re resolved. Folks in this role are moved onto problems identified by organizational leadership as critical and either lacking a clear approach or with a high degree of execution risk.&lt;/p>
&lt;p>Where most Staff-level roles require a very heavy dose of organizational wrangling, the &lt;em>Solver&lt;/em> generally operates on problems that are already identified as organizational priorities and thus are called on to do relatively little org-level chiropractics. On the other hand, they generally stop working on problems once they&amp;rsquo;re contained, which can create the feeling of transience and requires a soft touch to avoid infuriating the teams left behind to maintain the &amp;ldquo;solved&amp;rdquo; problem.&lt;/p>
&lt;p>The &lt;em>Solver&lt;/em> is most common in companies that think of &lt;a href="https://lethain.com/weak-and-strong-team-concepts/">individuals, rather than teams, as the atomic unit of planning and ownership&lt;/a>.
In such companies, it&amp;rsquo;s common to see the &lt;em>Solver&lt;/em> become prevalent in the place of the &lt;em>Tech Lead&lt;/em>.
You&amp;rsquo;re less likely to encounter this role at traditionally managed sprint-centric companies until those companies become
relatively large or long-lived enough to acquire their own varietal of technical debt.&lt;/p>
&lt;h2 id="right-hand">Right Hand&lt;/h2>
&lt;p>&lt;img src="https://staffeng.com/archetypes//RightHandCalendar.png" alt="Example calendar for Right Hand archetype">&lt;/p>
&lt;p>&lt;em>Stories featuring Right Hand archetype&lt;/em>: &lt;a href="https://staffeng.com/stories/michelle-bu">Michelle Bu&lt;/a>, &lt;a href="https://staffeng.com/stories/rick-boone">Rick Boone&lt;/a>&lt;/p>
&lt;p>The &lt;em>Right Hand&lt;/em> is the least common of the archetypes, showing up as an organization reaches hundreds of engineers and is akin to operating as a senior organizational leader without direct managerial responsibilities. &lt;a href="https://staffeng.com/stories/rick-boone">Rick Boone&lt;/a> compared his role to the &lt;a href="https://awoiaf.westeros.org/index.php/Hand_of_the_King">Hand of the King&lt;/a> in Game of Thrones and &lt;a href="https://westwing.fandom.com/wiki/Leo_McGarry">Leo McGarry&lt;/a> from The West Wing, operating with the borrowed authority of a senior leader. However, borrowing authority comes with the obligation of &lt;a href="https://lethain.com/staying-aligned-with-authority/">remaining deeply aligned&lt;/a> with that leader&amp;rsquo;s approach, beliefs, and values.&lt;/p>
&lt;p>Folks in this role attend their leader&amp;rsquo;s staff meetings and work to scale that leader&amp;rsquo;s impact by removing important problems from their plate. Problems addressed at this level are never purely technical and instead involve the intersection of the business, technology, people, culture, and process. &lt;em>Right Hands&lt;/em> often dive into a fire, edit the approach, delegate execution to the most appropriate team, and then pop over to the next fire elsewhere in the organization. The joy of these roles is that you only work on essential problems. The tragedy is that you&amp;rsquo;re always on to the next issue by the time those problems are solved.&lt;/p>
&lt;h2 id="which-is-right-for-you">Which is right for you?&lt;/h2>
&lt;p>As you think about which of these archetypes would fit you, start by reflecting on the kinds of work that energize you,
and then consider which roles are available within your company.&lt;/p>
&lt;p>All companies develop a need for engineers who can fill the &lt;em>Tech Lead&lt;/em> role, which makes it the most accessible archetype to attain your first Staff engineering role.
Companies that emphasize individual ownership rather than team ownership often develop the &lt;em>Solver&lt;/em> early.
On the other hand, companies that operate under strict sprints or agile methodologies tend to develop that role late, if ever.
In the recent crops of fast-growing technology companies, the &lt;em>Architect&lt;/em> and &lt;em>Right Hand&lt;/em> roles have generally emerged as the organizations reached one hundred and one thousand engineers,
respectively, and simply don&amp;rsquo;t exist beforehand. Companies with other strains of cultural DNA often develop them earlier, or sometimes never.&lt;/p>
&lt;p>Success in these roles requires remaining engaged; it&amp;rsquo;s essential to understand what kinds of work energize you. The &lt;em>Tech Lead&lt;/em> and &lt;em>Architect&lt;/em> tend to work with the same people on the same problems for years, developing a tight sense of team and shared purpose.
Some months their focus will be a top company priority, and sometimes they&amp;rsquo;ll be humming along so well that executives forget their team exists.&lt;/p>
&lt;p>The &lt;em>Solver&lt;/em> and &lt;em>Right Hand&lt;/em> bounce from fire to fire, often having more transactional interactions with the folks they&amp;rsquo;re working with on any given week. They&amp;rsquo;re tightly aligned with executive priorities and are likely to receive recognition for addressing leadership&amp;rsquo;s most pressing problems. On the other hand, while they&amp;rsquo;ll nominally be on a team with other folks, there will generally be little-to-no overlap within their team&amp;rsquo;s areas of focus, and they&amp;rsquo;ll often have a limited sense of community.&lt;/p>
&lt;p>For each archetype, you&amp;rsquo;ll find folks who love it and find it deeply rewarding, along with folks who find the work despair-inspiring. While it&amp;rsquo;s important to aim towards an archetype that fits you well, it&amp;rsquo;s also worth remembering that over your thirty or &lt;a href="https://lethain.com/forty-year-career/">forty-year career&lt;/a>, you&amp;rsquo;ll have long enough to spend some time sampling every archetype.&lt;/p></description></item><item><title>Introduction</title><link>https://staffeng.com/guides/overview-overview/</link><pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/overview-overview/</guid><description>&lt;p>At most technology companies, you&amp;rsquo;ll reach Senior software engineer, the &lt;a href="https://lethain.com/mailbag-beyond-career-level/">career level&lt;/a>
for software engineers, in five to eight years.
At the career level, your company&amp;rsquo;s career ladder won&amp;rsquo;t require that you work towards the next promotion;
being promoted further is an exception rather than expected.
This is also when many engineers are first given an opportunity to move into engineering management.&lt;/p>
&lt;p>Over the past few years, we&amp;rsquo;ve seen a flurry of books unlocking the engineering management career path, like
Camille Fournier&amp;rsquo;s &lt;em>&lt;a href="https://www.amazon.com/dp/1491973897">The Manager&amp;rsquo;s Path&lt;/a>&lt;/em>,
Julie Zhuo&amp;rsquo;s &lt;em>&lt;a href="https://www.amazon.com/dp/0735219567/">The Making of a Manager&lt;/a>&lt;/em>,
Lara Hogan&amp;rsquo;s &lt;em>&lt;a href="https://resilient-management.com">Resilient Management&lt;/a>&lt;/em>,
and even my own &lt;em>&lt;a href="https://www.amazon.com/dp/1732265186">An Elegant Puzzle&lt;/a>&lt;/em>.
The engineering management career isn&amp;rsquo;t an easy one, but there are maps available to help navigate it.&lt;/p>
&lt;p>What if you want to advance your career without becoming an engineering manager?
Many companies will answer that question by excitedly telling you that they have a two-track software engineering career path.
Engineering management is the first track, and the second is technical leadership.
The technical leadership track is populated by titles like Staff engineer and Principal engineer.
That this second track exists at all is a sign of progress, but there&amp;rsquo;s much work left to make it both accessible and impactful.&lt;/p>
&lt;p>&lt;img src="https://staffeng.com/levels.png" alt="Typical dual-track engineering career ladder">&lt;/p>
&lt;p>This book standardizes on the most common sequence of titles: going from Senior to Staff, followed by Principal, and then Distinguished.
It uses the term Staff-plus as an overarching label for Staff, Principal, and Distinguished titles.
Many companies only have a subset of these titles, slowly adding more as their team grows,
but companies that only have one technical leadership title almost always use Staff.
A few companies use an alternative sequence, but they&amp;rsquo;re in the minority.&lt;/p>
&lt;hr>
&lt;p>There is pervasive ambiguity around the technical leadership career path, making it difficult to answer seemingly simple questions about Staff-plus roles.
If you&amp;rsquo;re a Senior engineer and want to reach Staff engineer, what skills should you develop?
Are technical abilities alone sufficient?
How do most folks move into one of these roles?
What is your manager&amp;rsquo;s role in helping you along the way?
Will you enjoy being a Staff engineer, or will you toil for years to reach a role that doesn&amp;rsquo;t suit you?
This book will help you answer all those questions.&lt;/p>
&lt;p>Given the broad confusion around these roles, I knew I couldn&amp;rsquo;t write this book relying
too heavily on my own experience. More than a dozen Staff-plus engineers across the industry
were kind enough to share their experiences of reaching and operating in a Staff-plus role.
Their wisdom has created something richer in nuance, breadth, and perspective than I could have ever written on my own.&lt;/p>
&lt;p>If you&amp;rsquo;re already in a Staff-plus role, I hope these writings will energize you in your
journey as a leader outside the management track. If you aim for such a role, I hope
this book will provide pragmatic aid in its pursuit.&lt;/p>
&lt;p>You can read this book cover to cover, but please jump around if you want. There&amp;rsquo;s no right or wrong way to read it.&lt;/p>
&lt;p>Its sections are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="https://staffeng.com/guides/overview-overview">Overview&lt;/a>&lt;/strong> - a survey of the Staff engineer role, how it varies by company, and why the title matters&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://staffeng.com/guides/operating-at-staff">Operating at Staff&lt;/a>&lt;/strong> - how to do the work on the other side of the title&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://staffeng.com/guides/getting-the-title-where-you-are">Getting the title where you are&lt;/a>&lt;/strong> - how to attain a Staff-plus role at your current company&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://staffeng.com/guides/deciding-to-switch">Switching companies to get the title&lt;/a>&lt;/strong> - when and how changing companies can support the pursuit of a Staff-plus title&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://staffeng.com/guides/stories">Stories&lt;/a>&lt;/strong> - collected stories from Staff-plus engineers about what they do and how they reached their role&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://staffeng.com/guides/learning-materials">Resources&lt;/a>&lt;/strong> - a collection of templates and further readings if you&amp;rsquo;re looking for more&lt;/li>
&lt;/ul>
&lt;p>Every company puts its spin on Staff-plus roles, so it&amp;rsquo;s likely that some parts won&amp;rsquo;t map to your experience.
If that&amp;rsquo;s the case, please take what resonates and discard the rest!&lt;/p></description></item><item><title>Dmitry Petrashko - Tech Advisor to the Head of Infra at Stripe</title><link>https://staffeng.com/stories/dmitry-petrashko/</link><pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/dmitry-petrashko/</guid><description>&lt;p>&lt;em>This story was recorded in May, 2020. Learn more about Dmitry on &lt;a href="https://twitter.com/darkdimius">Twitter&lt;/a> or &lt;a href="https://www.linkedin.com/in/darkdimius/">Linkedin&lt;/a>, and reading his &lt;a href="https://d-d.me/site/presentations/">presentations&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;strong>Tell us a little about your current role: your title, the company you work at, and generally what sort of work does your team do?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I am a Staff engineer and the Technical Advisor to head of Infrastructure at Stripe.&lt;/p>
&lt;p>My current team is all of Stripe Infrastructure, which is responsible for foundational infrastructure services at Stripe - Compute, Networking, Storage, Database, Data Engineering, Performance &amp;amp; Efficiency, Observability Services, and Developer Tools. Our work empowers Stripe engineers to focus on product.&lt;/p>
&lt;p>The team that I &amp;ldquo;grew&amp;rdquo; from was Developer productivity, which builds processes, tools and core libraries used during product development at Stripe, including testing frameworks, linters, typecheckers, build tools, libraries used for gradual rollout, and many others. I started as an engineer on that team (while it was still a singular team), eventually becoming a Pillar Tech Lead of that group.&lt;/p>
&lt;p>&lt;strong>&lt;em>What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>A Staff Engineer at Stripe isn’t a role, rather it’s a level that corresponds to expectation of impact, communication, people and project leadership skills. Staff engineers fill different roles, mine is a current one is Technical Advisor (TA). In that role I partner closely with the Head of Foundation, Rahul Patil, with the goal of researching critical topics ahead of time, diving into critical issues (design, code, analytical), brainstorming technical action items, assisting with urgent technical follow-ups, instrumenting code for data collection, etc. This role is designed to expand Rahul’s bandwidth and strategic thinking, but does not directly make technical decisions.&lt;/p>
&lt;p>As a stepping stone to that role, I was also a Pillar Tech Lead. As we have more PTLs, the expectations are better defined:&lt;/p>
&lt;ul>
&lt;li>PTLs help their teams make technical decisions that will play well with each other and with technical decisions made by other groups at Stripe. Teams at Stripe make most technical decisions themselves, but an experienced PTL can help fine tune those decisions to achieve better outcomes. PTLs also work as arbiters in cases where teams cannot reach an agreement amongst themselves on technical topics.&lt;/li>
&lt;li>PTLs guide the technical direction of Stripe, providing input on what are the most important problems to solve and setting the high level technical approaches to solving them.&lt;/li>
&lt;li>PTLs help their organization by representing it to other Pillar Tech Leads and also bring technical decisions made elsewhere back to the teams they work with to create alignment.&lt;/li>
&lt;li>PTLs create opportunities for other engineers to take on impactful projects and help them succeed.&lt;/li>
&lt;/ul>
&lt;p>In the PTL role, I used to partner closely with the Head of Developer Productivity and managers of the teams inside the group. We exchanged context and worked towards an agreed goal.&lt;/p>
&lt;p>Both of these roles (PTL and TA) are similar in that they partner with engineering managers and share insight into the needs of our users &amp;amp; tools at our disposal to address them, while the EM has a better understanding of Stripe-wide non-technical constraints (e.g. resourcing constraints).&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>Talks from Dmitry&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=GJOWlDv_Fcs">State of Sorbet&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=Gdx6by6tcvw">Gradual typing for Ruby at Scale with Sorbet&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=8mFl8fywIP4">Adventures in Efficiency and Performance&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://d-d.me/site/presentations/">Earlier presentations&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;strong>&lt;em>How do you spend your time day-to-day?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>On a perfect week I’d spend Monday, Wednesday and Friday in meetings or working groups: either 1:1’s or team meetings, collaborating on plans &amp;amp; strategy, both short term and long term. Tuesday and Thursday of my perfect week would be spent coding alone. In reality, depending on team needs at the time, I may end up having more meetings or more time coding. If I’m working to set up a new project, I’ll commonly start by having a week with less meetings: focusing on project briefs, thinking through design, deliverables/milestones and security/reliability implications; followed by a week of socializing the proposal around the company and addressing feedback.&lt;/p>
&lt;p>While, from time to time it might seem hard to find time to write code, I believe it’s important as it allows me to maintain a strong connection to engineering and be the bridge between business needs/prioritization and engineering constraints that PTLs need to be.&lt;/p>
&lt;p>&lt;strong>&lt;em>Where do you feel most impactful as a Staff-plus engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Staff Engineers, and Pillar Tech Leads in particular, frequently help set direction for a new project. I feel particularly impactful when I can help improve a proposal that&amp;rsquo;s well intentioned and solves a real need, but the team that drafted it lacks either experience or context to write a good plan to capture the opportunity. In such cases, having a well structured plan can help substantially reduce the scope while getting to most of the value, and thus demonstrate impact sooner. Or, alternatively, see that the proposal in hand addresses more use cases than the team had originally anticipated and refocusing the project towards a use case that was not known by the team that would lead to bigger business impact: in both of these cases, I feel impactful by empowering other engineers.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done before reaching that title?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>No, Stripe intends the Staff-badge to not be a gate into new opportunities and I believe we’re good at it. This is also true about the PTL role. We choose engineers for PTL position that are good at representing opinions of others. Even before I became a PTL I felt that prior PTL, &lt;a href="https://paultarjan.com/">Paul Tarjan&lt;/a>, always made sure my perspective was presented.&lt;/p>
&lt;p>&lt;strong>&lt;em>Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for? Can you share a story of influencing your organization?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I was hired specifically to introduce typechecking into Ruby at Stripe. This included, together with &lt;a href="https://nelhage.com/">Nelson&lt;/a> and &lt;a href="https://paultarjan.com/">Paul&lt;/a>, architecting and implementing the typechecker, &lt;a href="https://sorbet.org/">Sorbet&lt;/a>, and growing the culture around using it.&lt;/p>
&lt;p>In the early days of Sorbet, we’ve carefully chosen what features to add based on usecases that Stripe needs the most. I believe we’ve succeeded in covering most of usecases that Stripe had with a typesystem and, at the same time, keeping the simplicity: it’s very easy to get to a typesystem and culture that promotes complexity and elitism for sake of it and I’m happy that our efforts avoided swinging from untypedness to the other end of spectrum.&lt;/p>
&lt;p>Today, in my role as Technical Advisor, I advocate for changes that will have outsized impact, most commonly in terms of Reliability, Scalability, Security and Productivity at Stripe. That can be changing the way data is sharded/stored, or changing the way we address change management. The big difference though is that unlike in Sorbet where I stayed on the project for years, I&amp;rsquo;d be looking to find/grow a person who&amp;rsquo;ll take over the project pretty soon - after organization is bought in, and there&amp;rsquo;s a plan with well articulated milestones and controlled risks. I&amp;rsquo;ll keep having frequent check-ins with people driving these important projects with the goal to help mitigate these risks and discover opportunities to deliver the project faster, and thus my involvement is visible only in the early stages of a project.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you keep in touch with how things really work as you spend less time on hands-on development?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>While I was a PTL, I had at least a couple of days a week where I got to code. I worked closely with other engineers on my teams and we continuously learned from each other.&lt;/p>
&lt;p>As a Technical Advisor, I wasn&amp;rsquo;t able to write code as much as I was as a PTL. I mostly wrote code when it was &lt;a href="https://www.usenix.org/conference/lisa18/presentation/kehoe">code-yellow situation&lt;/a>. But the success in this role is dependent on having good insights and deep engineering understanding. To do this, I speak to our internal customers and stay on top of designs and, notably, failure thresholds and failure modes of systems of teams that I support.&lt;/p>
&lt;p>In my role, it&amp;rsquo;s highly important to understand needs of customers. One helpful resource for that is the Stripe-wide engineer survey that Developer Productivity group organises, where we are looking to find what are the biggest things keeping our engineers from being productive: maybe there’s some tool that became slow since the last survey or some use case that had a user base grow that’s not well supported. While this survey rarely finds things that we weren’t aware of, it’s a great tool for relative prioritization: we can compare how many people complain about things and prioritize them accordingly.&lt;/p>
&lt;p>Additionally, before the Covid-19-induced lockdown, I used to join random tables for dinners at Stripe. I’d ask 3 questions:&lt;/p>
&lt;ul>
&lt;li>What are you working on?&lt;/li>
&lt;li>What makes it hard?&lt;/li>
&lt;li>How can infrastructure teams help?&lt;/li>
&lt;/ul>
&lt;p>This became a great tool in two ways: 1) connecting me to my users, helping discover their needs; 2) helping mitigate unhappiness of teams that aren’t yet supported by having a discussion similar to: “yes, I agree we could help you by doing X, now, lets together look on what we should stop doing to create space for this,” where a person would frequently discover that, while they would like us to address their pain point, they don&amp;rsquo;t want it addressed at cost of us deprioritizing our current projects.&lt;/p>
&lt;p>As I was transitioning away from role of PTL, I&amp;rsquo;ve created a group that&amp;rsquo;s currently called DevProd Assembly that gathers leaders of developer productivity teams. Each member of this group is expected to build a high trust relationship with 2-3 product teams, interview them monthly and aggregate feedback with other members of Assembly.&lt;/p>
&lt;p>&lt;strong>&lt;em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>While sponsoring other engineers isn’t required for a Staff Engineer, I believe it helps to succeed as one, as it helps you deliver more impact by creating opportunities for others and helping them succeed.&lt;/p>
&lt;p>And yes, there have been multiple projects that I have helped scope, kick-off and derisk, while also helping grow a person to take it over from me when I roll off to the next thing.&lt;/p>
&lt;p>There’s also a distinction between mentorship and sponsorship and I do both. Mentorship is about helping people grow and deliver impact. Sponsorship is about helping a person get in a position where they could demonstrate their ability to deliver greater impact. In working with my teams, I try to help people work on projects somewhat out of their comfort zone, and in that I sponsor them, and then, I could mentor them to help the project succeed.&lt;/p>
&lt;p>&lt;strong>&lt;em>You first got the title Staff engineer at your current company. Were you hired as a Staff engineer? If not, what was the process of getting promoted to Staff?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I wasn’t hired as a Staff Engineer. I had to get upleveled twice to get to Staff level at Stripe. Both of these uplevels were similar: Stripe uplevels after an employee has already been operating on the next level for quite a while and this adjusts expectations that they are expected to continue operating on that level going forward.&lt;/p>
&lt;p>&lt;strong>&lt;em>What two or three factors were most important in you reaching Staff?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>In order of decreasing importance:&lt;/p>
&lt;ol>
&lt;li>Focusing on impact on business and company.&lt;/li>
&lt;li>Being collaborative: by joining meetings/working groups you should help achieve a better outcome.&lt;/li>
&lt;li>Technical knowledge.&lt;/li>
&lt;/ol>
&lt;p>For me personally, the area that I needed to get good at before getting Staff Engineer was the second item. I was already delivering impact and was considered a person to go to for technical advice. I needed to improve my communication skills and collaboration skills so that I could constructively help people who are outside of my team, who might see me for first time ever and who, despite having good intentions behind their project, may not have the best plan to get it delivered.&lt;/p>
&lt;p>A technique that helped me in that was asking for feedback in a private chat immediately after the meeting, in particular after meetings that didn&amp;rsquo;t go perfectly. This has allowed me to learn what I did that might have contributed to other parties not feeling comfortable in these meetings and, in a few cases, genuinely asking how it could have gone better and help fix the outcome of a meeting that has already gone poorly.&lt;/p>
&lt;p>&lt;strong>&lt;em>How have where you worked and your education impacted your path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Companies:&lt;/strong> I appreciate that Stripe has so many opportunities for impact and this definitely helped me.&lt;/p>
&lt;p>&lt;strong>Education:&lt;/strong> I happened to have got a very practical PhD (on how to build fast &amp;amp; maintainable compilers) that almost fully translated to knowledge that’s applicable to my work: helping a company to scale engineering. And, while it served me well, I think there’s a lot of luck involved: I happened to join the right lab at the right time (when conditions for Scala3 being born became material, I’d been at the lab long enough to not be too “green” but still early enough to not have totally set the direction of my research). I’m unsure if I’d advise others to do a PhD: from my perspective, in practical terms, many of my friends would have learned as much by building systems at Stripe/Google/Facebook for the same 4+ years it takes to complete a PhD. If you’d like to learn how databases work - you’d probably learn this not only at the laboratory that does research on databases, but also at the companies that have some of the highest demands for databases and have teams working to improve them. That said, a PhD was something that was a good tool for me to change my location.&lt;/p>
&lt;p>&lt;strong>Location:&lt;/strong> I came to the US from Switzerland to join Stripe. I came to Switzerland from Russia to join one of the best PhD programs in Computer Science. I came to Russia to join one of the best ex-USSR universities from Ukraine. In each of these relocations, I feel, I played geographical arbitrage: I was looking to escape the place where I was among the best to the place where I’d be average. In some of them, I think I wasn’t the prime candidate. By joining the people there and learning from them, I grew a lot. It’s hard for me to tell if US vs EU is a better location career-wise, but I can definitely tell from my experience that changing locations helped me grow a lot.&lt;/p>
&lt;p>&lt;strong>&lt;em>There is a popular idea that becoming a Staff engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>It&amp;rsquo;s a very hard question for me to answer in retrospect. This is because: as far as I know, Sorbet was big enough to be my Staff engineer project, BUT with Nelson and Paul being there and us working closely and very fast with each other, it was very hard to attribute success of the project to specific individuals rather than the whole team.&lt;/p>
&lt;p>Around the first performance evaluation into the projects, all three of us got feedback that we should have better ways to prescribe which impact was the result of which individual. While I’d love to say that the fact that we didn’t face a similar issue on the next performance evaluation was due to intentional actions, I don’t think that is true: I think the project just naturally entered a stage where it was much bigger and thus we didn’t need to “quickly iterate in the same 10 files”, naturally leading to us having clearer and bigger areas of ownership.&lt;/p>
&lt;p>I became the “internal architecture/subtyping” person, as well as “talk to users” person, while Paul became the “change the code to make typechecker like it” person. Nelson clearly knew better how other systems at Stripe work and thus helped integrate the tool with them. All of these played to our strong points: I had prior experience with type checkers (this is what my PhD was about), Paul has a huge skill for programmatic codemods and Nelson is both very knowledgeable in systems in general and has been at Stripe long enough and early enough to know pretty much every system at Stripe. At this point in the project (stabilization, rollout) all of these became huge areas and thus it became much easier to have a person be a directly responsible individual (DRI) for an area, with others helping occasionally.&lt;/p>
&lt;p>After Sorbet I had a couple of other impactful projects delivered in short timeframe (6 months) that, I believe, sealed the deal of me getting the Staff Engineer level, but, if I was to choose one, I’d still choose Sorbet due to vast scope of project: both technical and cultural.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em>&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Working with Martin Odersky and Ondrej Lhotak in academia helped me understand how complex systems work together and how to explain that clearly.&lt;/li>
&lt;li>Brian Goetz helped me understand how much work is behind a simple, yet, robust system to withstand widespread adoption and design.&lt;/li>
&lt;li>Paul Tarjan showed me the importance of adjusting my communication style to lead to constructive outcomes for all involved parties.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>&lt;em>What about a piece of advice for someone who has just started as a Staff engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>At least, at Stripe, Staff Engineers work on very different areas. Make sure you agree with your reporting chain on what is the impact you should be achieving and what are the things you’re allowed to compromise on the way to that impact. Communicate clearly what compromises you&amp;rsquo;re doing and why.&lt;/p>
&lt;p>&lt;strong>&lt;em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Every time I considered it in the past it was by asking myself and others around me “would it be a way to bring more impact.” So far, every time the answer was “seems like no.”&lt;/p>
&lt;p>That said, I’ve found that learning some management skills from great managers (in my case, James Iry, Scott MacVicar, Will Larson, Christian Anderson and Shane O’Sullivan) provides huge benefits even in an individual contributor role.&lt;/p></description></item><item><title>Bert Fan - Senior Staff Engineer at Slack</title><link>https://staffeng.com/stories/bert-fan/</link><pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/bert-fan/</guid><description>&lt;p>&lt;em>This story was recorded in May, 2020. Learn more about Bert on his &lt;a href="https://bert.org">blog&lt;/a>, &lt;a href="https://twitter.com/bertrandom">Twitter&lt;/a>, and &lt;a href="https://www.linkedin.com/in/bertrandom/">Linkedin&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;strong>&lt;em>Tell us a little about your current role: where do you work, your title and generally the sort of work do you and your team do.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I’m a Senior Staff Engineer on the Platform team at Slack. I was lucky enough to join Slack shortly after we launched the &lt;a href="http://slack.com/apps">Slack App Directory&lt;/a> so I’ve had the opportunity to help evolve the Slack Platform into what it is today.&lt;/p>
&lt;p>It’s hard to generalize the work that I do but the goal is always the same: enable developers to build on top of Slack to make our customers’ working lives simpler, more pleasant, and more productive. Examples of this include building new platform features, improving API performance, writing documentation, and working with partners, internal integrators, and third-party developers to ensure that they can build impactful software.&lt;/p>
&lt;p>&lt;strong>&lt;em>What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>The work that Staff-plus engineers at Slack do is incredibly varied depending on which part of the company you’re in, the composition and size of your team, and what the business needs from you. Staff-plus engineers are often the tech leads of projects, which means that they help write the tech spec, get feedback from various stakeholders, work closely with design and product to decide what to build, and lead the technical implementation for the project. They also mentor other engineers, improve our interview process and engineering culture, develop engineering processes and tools, and provide technical direction for refactors and tech debt. Staff-plus is all about enabling other people to do better work - to be a force multiplier.&lt;/p>
&lt;p>My role includes all the things that I’ve mentioned but I tend to focus less on specific pieces of technology and more on what the technology is enabling. So I might spend time prototyping concepts that will almost certainly be thrown away or gathering usage metrics around a particular user flow to better understand how to improve the system. I will often build apps on top of the Slack Platform to keep myself honest about what the developer experience is actually like and actively try to build on other people’s platforms to see what works and what doesn’t. A lot less of the code that I write makes it into production than other engineers at the company and I’m completely fine with that.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done before reaching that title?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I’ve done a lot of experimentation with various product ideas in the last year, some of which have evolved into actual features of our Platform. Part of the reason I was given the opportunity to do that is that I’ve established trust through other projects that I’ve successfully shipped, but having a Staff-plus title seems to bestow a little more flexibility in what I choose to work on.&lt;/p>
&lt;p>For better or worse, I’m also in a lot of strategy and planning meetings I was never in before. If you’ve ever wanted to know how the sausage was made from a leadership angle, maybe consider if you actually want to know how the sausage is made.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you keep in touch with how things really work as you spend less time on hands-on development?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>The best way I’ve found is to have regular 1:1s with engineers across the company and spend a lot of time listening. You can learn a lot about the current state of engineering if you take the time to develop relationships where engineers feel like they can be honest with you. As a Staff-plus engineer, you have no real influence over how much money someone makes or their next promotion, so engineers can be more candid with you if you make yourself accessible to them.&lt;/p>
&lt;p>&lt;strong>&lt;em>What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I come from a fairly privileged background - I graduated from college with a computer science degree and no debt or student loans and part of what that bought me was the flexibility to leave a job without worrying how I was going to make rent or if I was going to find a new one. And I leveraged that flexibility into becoming pickier and more strategic about the places that I wanted to work.&lt;/p>
&lt;p>I acknowledge that most people don’t have that option but for me I thought it was important to work on things that I felt were meaningful - things that I personally used that I thought were having a positive impact on the world. And I believe those choices have paid dividends because companies like that attract like-minded folks who will go on to other companies that hopefully are aligned in the same way. This is not a meritocracy and your professional network is important. I’ve gotten jobs because I’ve applied on the company’s website like everybody else but I’ve also gotten jobs because I’ve awkwardly e-mailed a manager there that I haven’t talked to in years but that I respect and know that they respect me as an engineer. We work in an industry where there are a lot of options of how to spend your time and if you’re lucky enough to be in a position where you have the flexibility and privilege to choose, you’re doing yourself a disservice by not regularly evaluating what you work on.&lt;/p>
&lt;p>Maybe at one point you’ll become the kind of engineer that when you announce on Twitter that you’re starting a new job, people who you’ve worked with before will create a calendar reminder for four years in the future when you’re fully vested so they they have the highest likelihood of poaching you, but until then, you’re going to have to write awkward e-mails to people that you would like to work with again.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>The best advice I’ve heard is that often reaching Staff is a combination of luck, timing, and work. Here’s a path of events that I’ve observed and personally experienced:&lt;/p>
&lt;ol>
&lt;li>Develop a relationship with your manager where they implicitly trust you and you implicitly trust them. Be honest and direct with them about what you want. Developing this trust will require you successfully delivering on the things they ask you to work on.&lt;/li>
&lt;li>Because your manager trusts you, when they hear about projects that will have a significant impact for the company, they will advocate for you to lead those projects. Alternatively, you’ll have to find or create a project yourself and advocate for it to happen. This is much harder but still plausible.&lt;/li>
&lt;li>Deliver the project successfully.&lt;/li>
&lt;li>The project has a significant impact on the company.&lt;/li>
&lt;li>Because you successfully delivered a project that had a significant impact on the company, it’s easy to advocate for your promotion to Staff, which your manager is happy to do.&lt;/li>
&lt;/ol>
&lt;p>Hopefully you can see where luck and timing can affect this simple plan - what if you don’t get along with your manager? What if your manager leaves the company or gets promoted? What if you’re in an area of a company that gets no interesting projects? What if the project is doomed to fail? What if the project succeeds but has no impact?&lt;/p>
&lt;p>These are all possible and there’s no generic piece of advice that I can give to overcome any of them except that sometimes you’re never going to get promoted and you should probably be honest with yourself and identify when you’re in that situation. In that case, sometimes the only way to get promoted would be to leave the company and do something else. You may boomerang back into the company at a higher level than you left at later in your career, but much like a failed relationship that you revisit, do you still want to be there or is there too much baggage to ever make it work?&lt;/p>
&lt;p>&lt;strong>&lt;em>What about a piece of advice for someone who has just started as a Staff engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>It’s kind of a running joke in engineering but a lot of people get into this profession because they don’t like talking to people but to be effective at your job as a Staff Engineer, you’re likely going to spend a lot of your time talking to people. I think you can progress early in your career by focusing on just writing better and better code but at some point you should probably shift to focusing on working better with other people. Trusting other people and giving them the freedom to make technical decisions (even ones that you disagree with!), understanding other people’s motivations, learning to give difficult feedback, knowing when to pick your battles - these are all useful skills to have.&lt;/p>
&lt;p>If you haven’t already, try to become the engineer that people want to work with. There are a handful of engineers at every company who, if you ever left your job, you would try to circumvent a non-solicitation agreement to work with again. Become one of those engineers for other people and it’ll unlock a lot of doors for you in your career.&lt;/p>
&lt;p>&lt;strong>&lt;em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Early in my career, I once told my manager I was concerned that I would have to go into management at some point and they said something like, “Don’t worry about that! At this company we have two different tracks, the management track and the IC (individual contributor) track, and there are equivalent roles in the IC track for the highest management positions, so you’ll never have to switch to management in order to move up in the company.” While technically true, the omission that seems obvious to me now is that at a lot of companies, the management track is a lot less vague than the engineering track.&lt;/p>
&lt;p>The higher up you climb in the engineering ladder, the less examples you’ll have of what to emulate and the examples seem more and more unattainable. When you start to dig into it, you may realize that someone had gotten the title when their company was acquired or they were the author of a programming language or framework or they unlocked tens of millions of dollars in revenue for the company.&lt;/p>
&lt;p>A lot of my colleagues have gone into management for various reasons and I suspect one of those reasons may be the more obvious, reliable progression that I’ve described. But I believe strongly that that shouldn’t be your primary motivating factor. If you have open calendars, take a look at your manager’s schedule and the number of 1:1s they conduct a week. Is that a schedule that you would enjoy? The desire to write code isn’t black and white since there are tech lead manager positions where you write code and Staff-plus engineer roles where you never write a line of production code and spend the majority of your day in Google Docs or Dropbox Paper. But in my career, I’ve never had to lay someone off or deny them a promotion or write performance reviews - I know which side of the coin I’d rather be on.&lt;/p></description></item><item><title>Silvia Botros - Senior Principal Engineer at Twilio Inc.</title><link>https://staffeng.com/stories/silvia-botros/</link><pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/silvia-botros/</guid><description>&lt;p>&lt;span class="date fr">April, 2020&lt;/span>
&lt;a href="https://blog.dbsmasher.com/">blog&lt;/a>,
&lt;a href="https://twitter.com/dbsmasher">twitter&lt;/a>,
&lt;a href="https://www.linkedin.com/in/silviabotros/">linkedin&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;em>Tell us a little about your current role: where do you work, your title and generally the sort of work do you and your team do.&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I work at Twilio and my title is Senior Principal Engineer. I’m part of the Architecture Team, one of the architects reporting to the Chief Architect. We’re also not the only architects at Twilio, typically every Business Unit is led by a General Manager and GMs have architects who report to them and are focused on their particular product.&lt;/p>
&lt;p>I joined Twilio through the acquisition of SendGrid, and Twilio’s Chief Architect came forward from SendGrid as well, and formed this architecture team after the acquisition. Since our team is new we don’t have our goals or KPIs super formalized yet, some of our work is very hard to measure, but this is an area we’re thinking about, along with our longer-term vision.&lt;/p>
&lt;p>Personally, I am focused on databases at large, and tend to jump around to help out with projects that touch our databases. My coworkers are in similar roles in different areas. Steve Kinney is the architect for frontend. Josh Barratt focuses on our platform, looking for commonalities across products that could be centralized in a useful way. We are what we call ‘horizontal’ architects, working along the specific product architects.&lt;/p>
&lt;p>&lt;strong>&lt;em>What do typical Staff-plus engineers do at Twilio?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Twilio doesn’t actually have a Staff Engineer title, for us it goes from Senior Engineer to Principal Engineer. “What do Principal Engineers do?” is a fascinating question. Before the acquisition there was a big effort to align titles between SendGrid and Twilio, and while we did do that, some of the underlying parts still haven’t coalesced entirely, and maybe they’ll never totally align depending on the Business Unit and product.&lt;/p>
&lt;p>There’s always going to be details of the role that vary wildly depending on what you’re specifically doing. For example, Twilio has already bifurcated the role, where you can either be a Principal who spends most of your time writing software or an Architect who focuses more on strategy and less on coding.&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>More from and about Silvia&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.dbsmasher.com/2019/01/28/on-being-a-principal-engineer.html">On Being A Principal Engineer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.arresteddevops.com/principal-engineer/">Principal Engineering with Silvia Botros on Arrested DevOps&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.learningfromincidents.io/blog/teaching-the-smell">Teaching "the smell"&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.dbsmasher.com/2020/04/08/high-performance-mysql.html">High Performance MySQL&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;strong>&lt;em>How do you spend your time day-to-day?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>For me specifically, it&amp;rsquo;s a lot of being on Slack and email to answer questions, along with tons and tons of Google documents. The documents I collaborate on will vary from strategy plans to blueprints. I also spend a lot of time reading other people’s documents. If someone is testing a new tool and writes up their findings, I’ll review that. If someone is writing a proposal that changes how we deliver software or how to tackle a new and emerging business need, I will review that and provide feedback.&lt;/p>
&lt;p>I don’t do coding for the business anymore. I think the last time I had to pull up my terminal it was to refactor my dot files. This is an intentional decision by my boss, the Chief Architect. He’ll check in with us every quarter to make sure we didn’t contribute any code that goes into production. Part of that is his vision for the architect role, and another part of that is purely related to classifying our work for the Finance organization.&lt;/p>
&lt;p>Our philosophy is that our job isn’t to do the code, but to help others do it with growth and the long-term in mind.&lt;/p>
&lt;p>&lt;strong>&lt;em>One of the challenges I&amp;rsquo;ve seen as people stop writing software is they lose empathy for how things actually work on the ground. How do you maintain that awareness if you aren&amp;rsquo;t frequently writing software?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I spend a lot of time maintaining empathy. If I have an empty slot between meetings I’ll look through the rooms in Slack to see what issues are cropping up. I’ll also reach out to folks and have one-on-ones to understand their pain points. It’s a challenge and I’m not entirely sure how I’ll be able to keep up with it long-term.&lt;/p>
&lt;p>We did an engineering survey before the acquisition and also recently the Platform Group did one for a team offsite. We got feedback on how to provision infrastructure, deploying changes to production, CI/CD, and so on. The thing that always surprises me is that we’ll often have an existing solution but a lot of people within engineering won’t know it exists. This means the baseline isn’t always getting feedback to improve the tool, but instead it’s getting folks to know it exists at all.&lt;/p>
&lt;p>Similarly, I also find that I need to spend time explaining the glue work required to integrate vendors and tools effectively into our infrastructure. Sometimes it can seem like you just install a new enterprise tool and it all works, and folks will propose dropping in a new tool because an existing one has some issues, but there’s a lot of hidden work to do that. The current tool might not be great, but it’s probably one of the better ones and we’ve probably already spent a lot of time making it work as well as it does.&lt;/p>
&lt;p>&lt;strong>&lt;em>Where do you feel most impactful as a Staff-plus engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Often the most impactful things I do is convince someone not to write a new thing. I often find myself asking people, “Why are you doing that?”, genuinely asking to understand how they got here and try to steer them towards an existing solution.&lt;/p>
&lt;p>I joined SendGrid back when it was roughly thirty engineers, maybe sixty in the whole company. We grew to about five hundred before we got acquired by Twilio, and I’ve watched over that period how the overhead of communication costs have increased, and noticed that they’re often underinvested in relative to our technical systems. Some of my most impactful work is noticing similar approaches across groups and facilitating communication so they don’t find themselves running almost identical systems in a year.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done before reaching that title?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>This was less noticeable when I reached Principal Engineer, but it’s definitely the case as a Senior Principal Engineer. We consider Senior Principals to be at the Director level, and that’s not just a verbal acknowledgement but also getting included in certain private email groups, being invited to performance calibration meetings, and so on. Calibration meetings are particularly important, because you can bring feedback that might not otherwise surface in a room of managers.&lt;/p>
&lt;p>My opinion is more respected with the title. I don’t subscribe to the idea that titles don’t matter. I think only a certain demographic gets to say that, and that’s not my demographic.&lt;/p>
&lt;p>&lt;strong>&lt;em>Do you spend time advocating for technology, practice, process or architectural change?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I spend a lot of my time advocating for technology and architecture decisions. If it were up to me, yeah, I’d love to specify the one or two patterns for all applications to access the database, but it doesn’t really work out that way. There is always a team that has a business case that doesn’t work with what you thought was a reasonable solution for everyone. There will always be a prioritization conversation where you make imperfect tradeoffs.&lt;/p>
&lt;p>Once you reach the Principal and Senior Principal level, you start getting into the room for the prioritization and dependency meetings, and you see the long list of other projects on the roadmap for the teams you’re asking to make changes. The obvious decisions aren’t so obvious after that.&lt;/p>
&lt;p>There’s a misconception that as an architect you’re a manager without reports and can simply tell people what to do, but no, it means that you’re exposed to the full details of the sausage making and that makes things much more complex. In some ways, I’ve had it relatively easy because I’ve had a specific focus on databases most of my entire time at SendGrid and now at Twilio. Compared to databases, the business side’s complexity is much larger, and their decisions carry more complex consequences.&lt;/p>
&lt;p>Early on, I also had the unfair advantage of being the only full-time employee working on databases, because the only other people working on databases for a long time at SendGrid were contractors. This made it easy for me to make a bunch of decisions around database architecture. Now my challenge is having influence at a much larger and more complex org with a lot more stakeholders and no direct impact on the code.&lt;/p>
&lt;p>&lt;strong>&lt;em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I don’t think that sponsoring others is specifically called out in my role because I don’t have direct reports, but I do some strategic sponsorship work. For example, I pushed to expand our database team and pushed to make sure we hired a diverse team.&lt;/p>
&lt;p>Since then, my contributions have been things like bringing my voice to calibration meetings, particularly around raising visibility around how bias can impact underrepresented people. This is the sort of work you can’t do until you’re in the room, which is why becoming Principal has been important.&lt;/p>
&lt;p>&lt;strong>&lt;em>You first got the title Principal engineer at Sendgrid. What was the process of getting promoted to Principal?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I got the Principal title at SendGrid and then 18 months later I got the Senior Principal title. The move to Senior Principal technically happened after the Twilio acquisition, but the performance cycle was still using the SendGrid system since we hadn’t fully integrated HR processes yet at that point. So take this as a disclaimer that i did not get through a promotion process at Twilio :)&lt;/p>
&lt;p>For the first promotion, I had to get heavily involved, document all my work, and then show how it matched with the career development framework we had. Although, really my work started even earlier! Early on at SendGrid we didn’t even have a career ladder defined, and I grabbed Camille Fournier’s career ladder for &lt;a href="https://dresscode.renttherunway.com/blog/ladder">Rent the Runway&lt;/a>, and used that to get the Senior Engineer title.&lt;/p>
&lt;p>Going back to the Principal Engineer promotion, I put the materials together myself and gave that to my manager. I was expecting to do the same thing for the Senior Principal promotion, but actually I didn’t do anything that time. I had a new manager and he surprised me: he’d already been talking with the Chief Architect about the promotion because I would report to the Chief Architect if the promotion went through, and it all happened without me preparing anything.&lt;/p>
&lt;p>What I learned from that is that it’s really a function of who the people are and the circumstances they’re in. My manager when I went from Senior to Principal was incredibly oversubscribed. He had something like twenty direct reports and he was doing all these projects in addition to managing the team.&lt;/p>
&lt;p>But later, having a manager who was invested in my progress, advocated for me and worked with the right people to make the case for promoting me to Senior Principal meant all the difference in how and when it happened.&lt;/p>
&lt;p>&lt;strong>&lt;em>What two or three factors were most important in you reaching Staff?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Writing and speaking externally helped, as did joining early so I know where all the bodies are in the infrastructure and the code. I wrote my first blog post more than five years ago, not with a clear goal but more because we were doing all this cool stuff and I thought people would find it interesting. It definitely wasn’t to get a promotion, but it snowballed from there.&lt;/p>
&lt;p>My first blog post got noticed by Baron Schwartz, who’s pretty well known in the database community, and he reached out for me to create a case study with his new company. Then I became more involved in the emerging database community, and from that I got to do a couple of conference speaking slots. All of this built into more visibility for me and my work.&lt;/p>
&lt;p>&lt;strong>&lt;em>Do you feel that it’s important to continue speaking and writing in public? Or have you already established your credibility and don’t feel the need to do more?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I don’t think of it this way, it’s more that if I’m passionate about something then I really enjoy speaking and writing about it. I’ve spoken at about three conferences and stepped back a bit since it’s logistically difficult with younger children. I might get back into speaking more in a few years.&lt;/p>
&lt;p>I have found that I prefer blog posts more than speaking. I’ve done some writing on company blogs, but most of my writing has been on my personal blog. Often I’ll have a strong opinion and it might be one that the company doesn’t share, so I’ve found that’s easier.&lt;/p>
&lt;p>My blog post that’s gotten the most traction was &lt;a href="https://blog.dbsmasher.com/2019/01/28/on-being-a-principal-engineer.html">On Being A Principal Engineer&lt;/a>, which I’m still having people reach out about frequently.&lt;/p>
&lt;p>&lt;strong>&lt;em>There is a popular idea that becoming a Staff engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I don&amp;rsquo;t know if other engineers who are trying to get to Principal have had explicit “Staff Projects” where they had to complete this specific project to get promoted, but I did not have one. Most of my promotions have come from work that I’ve been doing for many months and we can see the results.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>The most valuable advice I got is that it’s not always about being right. If you roll back five or six years ago, I was bad at this. I would dig in when I felt I was right. It didn’t matter to me if there was a business deliverable or something was burning, I would still try to stop someone from taking approaches I disagreed with. I wouldn’t take the time to understand the alternatives or the product priorities that were creating tension with doing the right thing.&lt;/p>
&lt;p>Eventually our former VP of Engineering gave me feedback on this. He was kind of Yoda-like, a man of few words, but when he said something you would listen. When he started at SendGrid, I was incredibly burned out and jaded, getting increasingly frustrated as the product grew. I was five years into the job and felt like people kept throwing problems over the wall for me to deal with.&lt;/p>
&lt;p>He helped me turn that around, helped me understand what the product teams were having to deal with, why their concerns mattered, and how to use my knowledge to help them get to the right tradeoff instead of being antagonistic. He was incredibly helpful, and this advice changed my career.&lt;/p>
&lt;p>&lt;strong>&lt;em>What about a piece of advice for someone who is trying to reach Staff engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>The advice I’d give is so different for every company, it would even vary a lot between SendGrid and Twilio. You have to understand “what does Staff mean?” for your company, and to realize that you might not like it when you find it. That doesn’t necessarily mean you have to change your company, like when I had to bring in Rent the Runway’s career ladder to establish the idea of having a career ladder.&lt;/p>
&lt;p>It took the company a while to make that change, but ultimately leadership also saw why the change was necessary and it happened. But you’ve got to go into it with eyes wide open, it can be a long haul if your view of the job is not aligned with the company. Be aware it may never align and moving on might become the only path.&lt;/p>
&lt;p>On the other hand, if I was giving advice to someone who had just started as a Staff Engineer, I’d tell them to not to focus so much on the code and to be prepared not to write nearly as much code as they’re used to. Instead focus on getting to know the people and the business as well as you can. Your job now is not to be the producer of the value, your job is to be the force multiplier that helps everyone around you deliver better, more sustainable, products. And it is not a job you can measure in points or sprints. It is a job with quarters and even years of ROI.&lt;/p>
&lt;p>&lt;strong>&lt;em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I was offered the opportunity to move into engineering management around the time when I reached Senior Engineer. You hear a lot of stories where women are told to go into management because they have social skills. I was super opposed to making the switch, and I’m grateful I wasn’t pushed into it. I also think at the time I would have been a terrible micromanager. I was hyper aware of what damage I could do to other people’s careers if I made that move without being fully ready to take its emotional toll.&lt;/p>
&lt;p>Granted, now in my current role I do a ton of manager things, but it’s a completely different mindset than operating as a people manager.&lt;/p>
&lt;p>&lt;strong>&lt;em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Definitely Camille Fournier’s book, &lt;a href="https://www.amazon.com/dp/B06XP3GJ7F/">The Manager’s Path&lt;/a>. Shortly after I read her book, I also read Dr. Nicole Forsgren’s &lt;a href="https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations-ebook/dp/B07B9F83WM/">Accelerate&lt;/a>, which I like because it connects what we do in software with business impact. I still nerd out on the &lt;a href="https://cloud.google.com/devops">DORA report&lt;/a> every year.&lt;/p>
&lt;p>Most of the books out there are about how to write code as a senior engineer and don’t reflect the kind of work I do. For these roles that are about doing more than turning out code, the details for doing that role still don’t exist. I keep saying that I wish there was a counterpart to &lt;em>The Manager’s Path&lt;/em> for engineers in roles like mine.&lt;/p>
&lt;p>&lt;strong>&lt;em>How did you build out your network of other Principals? Was it something that happened organically or was it more deliberate?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>My network of Principals really all started with that one blog post, &lt;a href="https://blog.dbsmasher.com/2019/01/28/on-being-a-principal-engineer.html">On Being A Principal Engineer&lt;/a>. After I wrote that, I got invited to all these private Slacks and got to meet a bunch of people. Part of that was timing, as it was around the time that everyone was out there creating a hundred new Slacks for everything. I don’t travel very much, so this was really what worked for me.&lt;/p></description></item><item><title>Michelle Bu - Payments Products Tech Lead at Stripe</title><link>https://staffeng.com/stories/michelle-bu/</link><pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/michelle-bu/</guid><description>&lt;p>&lt;em>This story was recorded in April, 2020. Learn more about Michelle on her &lt;a href="http://blog.michellebu.com/">blog&lt;/a>, &lt;a href="https://twitter.com/hazelcough">Twitter&lt;/a>, and &lt;a href="https://www.linkedin.com/in/michellebu/">Linkedin&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;strong>&lt;em>Tell us a little about your current role at Stripe: what’s your title and generally what sort of work do you and your team do?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I’m the Payments Products Tech Lead at Stripe, working directly with our Chief Product Officer. I support critical initiatives and work on mitigating urgent problems across the organization. I typically spend 80% of my time on one or two large cross-organizational design projects. I spend the remaining 20% reviewing and supporting technical and product design (in particular, API design) across the organization.&lt;/p>
&lt;p>&lt;em>Sample of a “top 3” document I keep evergreen:&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://staffeng.com/static/michelle-bu/Michelle-Bu0.png" alt="">&lt;/p>
&lt;p>I manage two engineers who embed into high priority areas. This both helps me scale my impact and also gives these engineers the chance to dip into many areas of Stripe. Right now, one is working on the core payments APIs and the other is focused on improving integration experience. I’m still evaluated on the IC ladder—the plan is to never have more than a few reports at a time.&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>Michelle's podcast appearances&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://businesslogic.fm/e6-michelle-bu-of-stripe-on-rapidly-scaling-yourself">Business Logic: Michelle Bu of Stripe on rapidly scaling yourself&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.fullstackradio.com/60">Full Stack Radio: Michelle Bu - Engineering Payments at Stripe&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;strong>&lt;em>What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Most engineers in Staff-plus roles at Stripe work on specific teams. There are some Staff-plus Engineers who also have a Tech Lead title, and take on broader projects across a particular product area or technical domain.&lt;/p>
&lt;p>There are two kinds of Staff-plus Engineers at Stripe: those whose scope is deep and those whose scope is broad.&lt;/p>
&lt;p>Broad-scoped engineers create impact by working on vague, cross-organizational projects. They tend to accumulate a lot of context across many different domains and play a support role in many projects across the org. This shape of Staff-plus Engineer is most common on our product engineering teams.&lt;/p>
&lt;p>Deep-scoped engineers tend to be subject-matter experts in a specific domain. They lead ambitious multi-year projects. This shape of Staff-plus Engineer can generally be found on our product infrastructure and systems teams.&lt;/p>
&lt;p>&lt;strong>&lt;em>Where do you feel most impactful as a Staff-plus engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>This has changed over time for me as I’ve moved into my current Payment Products Tech Lead role. (For some context, Payments Products is made up of over 20 teams. We’re responsible for most of our user-facing APIs and UI libraries.)&lt;/p>
&lt;p>I’ve taken to using the word “energized” over “impactful.” “Impactful” feels company-centric, and while that’s important, “energized” is more inwards-looking. Finding &lt;em>energizing&lt;/em> work is what has kept me at Stripe for so long, pursuing impactful work.&lt;/p>
&lt;p>When I worked directly on a team, I felt most energized when I was able to directly interact with users, whether it was helping users on the #stripe IRC channel or designing and shipping an API that users can integrate seamlessly.&lt;/p>
&lt;p>In my current role, I feel energized when someone I’ve sponsored sends an announcement that they’ve shipped their work, or when I see that I’ve helped shape or shift an engineering team’s model of an important topic. It’s these teams, not me, who are doing the hard work day-to-day of building and supporting their technology. I measure my impact based on their progress and more importantly, the directionality of that progress and the alignment of their work to the company’s goals.&lt;/p>
&lt;p>One concrete example from recent memory is when another staff-plus engineer and I categorized the shapes of APIs we commonly see: labeling some as flows, some as engines, some as configs, etc. The intent of this work was to build up a shared mental model and vocabulary for categorizing existing APIs and for discussing and designing new ones. Folks started to organically use these categories after seeing them once! It’s in these moments that I feel like I’m creating leverage and scaling my own impact by disseminating useful mental models and ideas.&lt;/p>
&lt;p>I spend time on several of our review forums like API Review, but often these sorts of forums work more like code review. They happen so late in the design process that they tend to do a better job of preventing bad outcomes than of partnering with teams to steer great outcomes. I feel more impactful when I’m able to give engineers on product teams the tools to design great APIs.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you think of anything you’ve done as a Staff-plus engineer that you weren’t able to do or wouldn’t have done before reaching that title?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I’ve been at Stripe for a long time (since 2013!). While I’ve always had some amount of clout because of my tenure, my role of Payment Products Tech Lead (and the fact that I report directly to the CPO) has definitely changed how people interact with me. I’m definitely feeling lonelier at work now (and am actively working on adapting to this new normal).&lt;/p>
&lt;p>One thing that’s taken some getting used to is that now folks expect me to have an opinion about whatever we’re discussing! That didn’t happen as often when I was a staff-level engineer working directly on a team. I remember being in a meeting shortly after my role change where I was a bit quieter than usual because I was a little tired. I later heard that the presenters were worried that I hadn’t liked their proposal because I didn’t say anything. This was the first time that I realized people &lt;em>looked to me&lt;/em> to have an opinion and to support their ideas! I’ve been careful since then to always stay engaged during meetings and to give feedback, even if it is just to explicitly say that I haven’t fully formed any opinions yet.&lt;/p>
&lt;p>It’s a bit disorienting that some folks take my opinions more seriously and are nicer to me than when I wasn’t in such a visible role. Previously, there were cases where people weren’t collaborative or would dismiss my opinions. I think it was a good thing to have experienced that. I was confident enough (and trusted enough by the organization) to give them strong feedback on their collaboration so that I could ensure things like this weren’t happening to others like me. I now worry that I’m losing visibility into where these interactions are happening.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you maintain empathy for other engineers’ development experiences as you spend less time programming?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I’ve only had one year in my new role, so I don’t feel too disconnected yet. Maybe this is something that will change over time. I was previously tech lead for a smaller area. In that role, I wrote a small amount of software and contributed to some of my teams’ “run rotations,” where we triaged incoming requests and fixed urgent bugs.&lt;/p>
&lt;p>To maintain context in my new role, I spend a good amount of time in one-on-ones with engineers and PMs working directly on execution. This week alone, I had 12 30-minute 1-1s. I also follow every incident that’s reported at Stripe. (We have a Slack group you can join to be automatically invited to Slack rooms for each incident!) The hum of incidents is particularly useful to tune into. By reading through the details of each incident, I’m able to estimate the distance between the reality of our systems and the idealized architecture / product that I spend my days thinking about. I want to know the shapes of issues that engineers are running into, the pits of failure they’re falling into, and how the developer environment was or wasn’t supporting them in getting out of those pits. I see myself as an advocate of engineers to leadership, so it’s important for me to deeply understand our present reality.&lt;/p>
&lt;p>&lt;strong>&lt;em>Do you spend time advocating for technology, process or architectural change?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>At this point I spend less time advocating for &lt;em>specific&lt;/em> technologies or programs and more time empowering others to advocate for the technologies and programs that they think are important. I also try to be a source of knowledge and support that people can reach out to for feedback, especially on cross-cutting product decisions and on presentation of ideas to the rest of the organization.&lt;/p>
&lt;p>I do work on projects where I’m explicitly thinking about idealized architecture and interfaces. However, at the end of the day, migration to any idealized state is going to be done by individual teams, so they &lt;em>need&lt;/em> to feel a sense of ownership and empowerment. I spend a lot of time having direct conversations with the engineers and PMs who are actually making day-to-day decisions. The ideal outcome is that we’re able to get directionally aligned, and they’re then able to advocate for our north star within their teams and make good local decisions.&lt;/p>
&lt;p>It’s a lot harder to do this for the project I’m working on right now because it involves defining the idealized architecture and interfaces for many, many teams—essentially every team working in payments! I haven’t yet figured out a scalable way to bring everyone along. Even writing documents (the most scalable way of distributing information!) is hard because different teams are (by definition) coming at the interface from a different angle and so very different framings of the problem and solution will resonate with each team. Our current approach is treating reviews of our documents like user testing: watching as individuals on teams read the documents, seeing where their cursor goes, what they’re reacting to, etc. That’s worked pretty well so far!&lt;/p>
&lt;p>Designing the &lt;a href="https://stripe.com/docs/payments/payment-intents">Payment Intents API&lt;/a>, a rethinking of our beloved Charges API for the changing payments space, was a similarly cross-cutting project that I worked on previously. It took two years for the vision to fully land with everyone in the company. Even with that organizational buy-in, we still haven’t realized the full potential of its original idealized design. This is not a bug, though! We focused on delivering incremental value to users while proving out the design. I expect any sufficiently-ambitious design project to continue even when I am no longer on the team. An important part of making this work was writing &lt;em>everything&lt;/em> down.&lt;/p>
&lt;p>We created a canonical document that defines our idealized abstractions. Even today, folks working on that team use these abstractions as a north star:&lt;/p>
&lt;p>&lt;img src="https://staffeng.com/static/michelle-bu/Michelle-Bu3.png" alt="">&lt;/p>
&lt;p>If two people asked the same question, we immediately added it to a FAQ that we kept. We took everyone’s feedback and questions very seriously and put the burden of proof on ourselves. Finally, we worked to be fully transparent in our work, even creating a decision log that anyone at the company could use to follow our progress. Each entry in the decision log concisely describes a product or technical decision, documents who was involved in the decision, and links to detailed supporting technical design documents that generally contain the full problem statement and evaluation of alternatives.&lt;/p>
&lt;p>&lt;img src="https://staffeng.com/static/michelle-bu/Michelle-Bu4.png" alt="">&lt;/p>
&lt;p>In general, I’ve found that for ambitious design projects, being extremely transparent but also explicit about whether or not you’re ready for feedback has landed well with folks who care about the topic. Here’s some wording you can find at the top of the (public) notes docs for some projects I’ve led:&lt;/p>
&lt;p>&lt;img src="https://staffeng.com/static/michelle-bu/Michelle-Bu5.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://staffeng.com/static/michelle-bu/Michelle-Bu6.png" alt="">&lt;/p>
&lt;p>&lt;strong>&lt;em>Is sponsoring other engineers an important aspect of your role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Yes, and it’s one of my favorite parts of the role! I care a lot about the people I work with—they’re the main reason I feel energized to go to work.&lt;/p>
&lt;p>A big part of sponsorship for me is creating the space for ICs to do the impactful work that they care about. I’m lucky that in my current role I don’t have to spend time actively proving that I’m competent, so I can spend a good chunk of time in support roles for projects and elevating others. I rarely feel like I have to “claim credit” for work or have my name explicitly mentioned on a byline for a project I helped with (though it’s always a nice feeling when it happens). For more open-ended projects, it’s sometimes useful for me to lend my name to the project. For example, I recently kicked off a product quality mentorship program where I play more of a facilitator role, selecting mentees, pairing them with mentors, and occasionally reviewing their work. I’m not doing &lt;em>nearly&lt;/em> as much as the mentors in the program are, but we were able to get this org-wide program off the ground because I sponsored it.&lt;/p>
&lt;p>Day to day, I find that I can be helpful as a “rubber duck” for folks who want advice on how to navigate a complex project or resolve a technical disagreement. I find this work—helping others make progress without getting directly involved—particularly rewarding.&lt;/p>
&lt;p>Finally, I always keep in mind a list of folks who are amazing at what they do and advocate for them as &lt;em>visible&lt;/em> opportunities that align with their interests become available. There’s a balance here, though. I’ve learned that it’s sometimes difficult for folks to say no to me. Recently, I asked an engineer on a team I work with to send an email about some good work she had done. She told me after she sent the email that she originally didn&amp;rsquo;t want to do it, but she also didn&amp;rsquo;t want to say no to me. She then showed me the relevant entry in her &lt;a href="https://twitter.com/amyngyn/status/1224160724072558594">“no log”:&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://staffeng.com/static/michelle-bu/Michelle-Bu7.png" alt="">&lt;/p>
&lt;p>&lt;strong>&lt;em>Stripe is the first company you’ve worked full time at, and you’re still at Stripe. What was your path to the Staff level?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I joined Stripe right out of college. I actually had a slower growth curve when I joined than the other engineers in my cohort. My trajectory over my first four years was slow compared to other ambitious new college graduates. I think this was partially because I hadn’t been coding for that long (I took my first programming class in 2011 and joined Stripe in 2013), and partially because my first large project at Stripe was a 1.5-year rewrite project that was ultimately canceled.&lt;/p>
&lt;p>When Stripe first introduced levels, I had been at the company for two and a half years and was leveled as an L2, a level that we expect a recent college graduate to reach in 6-18 months. I was honestly pretty disappointed, since my peers were already reaching “senior engineer” levels. At that point I’d already done a lot of impactful work, spun up most of the new product engineers who joined, and consistently jumped in to help during incidents. I worked so hard and on so many impactful things, even outside of my main projects! What else would they want me to do? Should I &lt;em>not&lt;/em> help others out?&lt;/p>
&lt;p>In retrospect, L2 was 100% fair based on the ladder. I worked hard and stayed late because I was naturally a bit slower than others in writing good code due to my lack of experience. I didn’t yet have a good foundation for software development, mostly because I just didn’t have enough practice yet! The impactful work I did was valuable, but also not something that I uniquely could have done. I was, at the time, solidly a high-performing L2.&lt;/p>
&lt;p>In those early days, I spent a lot more time learning about the product and about the payments domain than I did writing code. I spent a lot of time helping our users (developers) with their integrations on IRC. I did smaller tasks (bug fixes, small features, bandages to paper cuts) that weren’t technically challenging but were important to those users. This sort of work doesn’t always map to growing as an engineer (though I did fine-tune my debugging skills—I’m a pretty great debugger now). I also built up relationships with other teams and other engineers by being overly helpful on Slack and on tickets and by helping teams navigate to the best solutions for our users. I helped spin up most of the new product engineers that joined in my first two years. Over time, I started having a reputation for caring deeply about our users and for being a fountain of knowledge about the product. (“Users first” is still my favorite Stripe operating principle.)&lt;/p>
&lt;p>Later on I realized that during that time, while I wasn’t efficiently mapping towards growing on the technical side of being a software engineer, I was actually learning critical skills that allowed me to move very quickly from senior to Staff, and from Staff to my current role (together, this only took 3 years!). In fact, I&amp;rsquo;m pretty sure it&amp;rsquo;s the relationships I built during those first few years that made a canceled 1.5-year technical project not feel like too much of a setback to my career.&lt;/p>
&lt;p>I slowly and deliberately built out my technical foundation when I worked on the first versions of &lt;a href="https://stripe.com/radar">Stripe Radar&lt;/a> and &lt;a href="https://stripe.com/payments/elements">Stripe Elements&lt;/a>. I strongly believe that as long as I&amp;rsquo;m being thoughtful about my technical gaps, about filling in those gaps for the projects I&amp;rsquo;m working on, and about challenging myself with projects that take me outside of my technical comfort zone, I can build up and practice my technical skills organically. The softer skills, the connections across the company, the user focus, understanding the product deeply—these are the skills that took much longer to learn and ultimately helped me accelerate my path to Staff after I built my technical foundation.&lt;/p>
&lt;p>&lt;strong>&lt;em>Did you have a Staff Project?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I’ve worked very broadly on just about every component of Stripe’s product. Over time, the projects that I’ve worked on have generally spun off into their own dedicated teams, and two in particular that I worked on while I was a senior engineer might qualify as Staff projects: &lt;a href="https://stripe.com/radar">Stripe Radar&lt;/a> and &lt;a href="https://stripe.com/payments/elements">Stripe Elements&lt;/a>.&lt;/p>
&lt;p>With Radar, we built a brand new product from scratch, making thoughtful tradeoffs about what to build and what we could safely descope in order to get something out to users as soon as possible. When we launched in October 2016, it was one of the smoothest product launches we’d ever had. It’s since become a very successful product.&lt;/p>
&lt;p>With Stripe Elements, I built out the infrastructure, designed the initial Card Elements API from scratch, and shipped to production in under 3 months. This was only possible because we did extensive dogfooding. While building Elements, I created three tiny e-commerce stores with different design frameworks and designs (of varying quality) to test the limits of its customization APIs. Since then, dozens of engineers have successfully developed in the codebase, it’s the home of the new Stripe Checkout, and most importantly, we’ve had very few regrets about its original API design. Breaking API changes are always to be expected as an API product expands and we learn more about how developers use them in practice. We did a good job validating our initial API design to avoid these breaking changes while still shipping rapidly.&lt;/p>
&lt;p>In making sure new engineers could onboard onto a pretty complex product that involved a ton of IFRAME-shenanigans, I wrote a lot of documentation. I found that telling a story worked well for teaching folks why things needed to be the way they were:&lt;/p>
&lt;p>&lt;img src="https://staffeng.com/static/michelle-bu/Michelle-Bu8.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://staffeng.com/static/michelle-bu/Michelle-Bu9.png" alt="">&lt;/p>
&lt;p>Looking back now, the product architecture has generally held up since launch for both projects. At the time, in addition to implementing these products, I had to wait for a while after they launched for the product choices to prove themselves out with our users and for the technical choices to prove themselves out with engineers internally as they ramped up.&lt;/p>
&lt;p>I think that’s an important criteria for Staff-plus Engineers in product: not to just build something that ships, but for it to roll out smoothly and continue to succeed and grow over time with as few regrettable choices as possible. There will always be corners cut and features descoped during product development, especially for new products. A Staff product engineer makes those product and technical choices deliberately, taking on various different user personas to make the best choice possible and documenting rough edges thoroughly for future engineers.&lt;/p>
&lt;p>&lt;strong>&lt;em>Did you have to put together a promotion packet?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>When I was promoted to Staff, I was fortunate to have a manager who was extremely engaged in supporting my promotion. To be honest, at the time I didn’t really understand how to write my self-reviews the right way. I wrote self-reflective development plans for what I wanted to learn over the next year instead of documenting the impact and scope of my work. My manager actually did most of the work by writing out my impact in his review.&lt;/p>
&lt;p>There were a couple of other things that helped me. First, I worked with the same manager for much of that time. If you change managers then your manager loses context and that pushes the work of creating continuity onto you. Second, my manager was managing a relatively small team and was able to spend a lot of time keeping track of and understanding the details of what I was working on. If I’d been reporting to a manager supporting say, 10+ engineers, I likely would have had to put a lot more work into my own promotion packet.&lt;/p>
&lt;p>&lt;strong>&lt;em>What two or three factors were most important for you to reach the Staff level?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Thinking back, a potentially-surprising important factor for me was (and is) my imposter syndrome. It made me extraordinarily open to feedback; to learning and growing and to taking responsibility for anything remotely related to my work. It made me proactively seek out feedback on everything from the validity of my comments on PRs to how I ran a particular meeting. If something was broken (whether it was technical or organizational), I felt unsettled and was deeply, intrinsically motivated to go learn about it and to fix it. No part of Stripe&amp;rsquo;s product was &amp;ldquo;not my problem.&amp;rdquo; This developed into two superpowers that are perhaps even more important to have as a Staff-plus Engineer than technical superpowers are:&lt;/p>
&lt;ol>
&lt;li>Truly listening to and empathizing with others.&lt;/li>
&lt;li>A deep care for solving all types of problems.&lt;/li>
&lt;/ol>
&lt;p>Of course, imposter syndrome is a double-edged sword. It often makes me scared and self-conscious—early on I constantly felt like I would get fired for not being fast or effective enough. I grew more secure about my own strengths over time, but to be frank, this took a &lt;em>lot&lt;/em> of time and positive reinforcement from my managers and from leaders at the company.&lt;/p>
&lt;p>&lt;strong>&lt;em>Is it harder to reach Staff-plus roles when working in product engineering rather than in infrastructure engineering?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I do think that is the case. I also think it’s a bit easier at Stripe, where the core product is infrastructure. This means there are many opportunities within product engineering to work on projects that need to consider scale, robustness, migration path, and well-designed interfaces.&lt;/p>
&lt;p>It can definitely be tricky to reach Staff if you’re on a team that mostly builds UI, because UI products are by nature more temporary and allow for more iteration and experimentation. To reach the Staff level of impact as an engineer on a UI team, you need to be able to create leverage. You could do this by building well-designed component libraries, experimentation frameworks, etc.&lt;/p>
&lt;p>Another aspect of building leverage as a product engineer is creating processes and systems to manage “product debt.” Folks often talk about “technical debt,” but equally important is the “product debt” caused by supporting old versions of your product, and much of the difficulty of product engineering at scale is related to managing product debt and product drift (that is, products that need to interoperate with each other moving in different directions) over time. I believe that a company’s accumulation of product debt does create Staff-complexity roles within product engineering at a certain scale.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I haven’t gotten much &lt;em>generically&lt;/em> useful advice. There was good situation-specific advice that I got along the way, but those pieces of advice are always tied to the situations at hand.&lt;/p>
&lt;p>The most useful general learning for me was becoming comfortable with uncertainty. Sustained success in senior roles depends on your ability to adapt and grow as the needs of the organization change.&lt;/p>
&lt;p>&lt;strong>&lt;em>Advice for someone who wants to become a Staff-plus engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Some caveats:&lt;/p>
&lt;ul>
&lt;li>I think I’ve been particularly lucky with the managers I’ve had.&lt;/li>
&lt;li>My interests have always been aligned with what was most important for the company. (At this point it&amp;rsquo;s a bit unclear to me if my personal interests (i.e., developer products, mentorship) were aligned, or if over time I&amp;rsquo;d aligned myself to what was important for the company. I &lt;em>feel&lt;/em> like it&amp;rsquo;s the former, but in either case, I feel like I&amp;rsquo;ve always been really interested in my work.)&lt;/li>
&lt;/ul>
&lt;p>I’m probably one of the most visible product engineers at the company, so engineers will sometimes see what I’m doing and try to pattern match on that to become a Staff-plus Engineer. That feels great, and I&amp;rsquo;m lucky to be able to be a role model for others like me.&lt;/p>
&lt;p>That said, my first piece of advice to engineers is that they should avoid pattern matching in ways that lead them towards work they don’t enjoy. I’m deeply energized by the work I do, partnering with teams to solve abstract modeling and design problems. It takes a certain amount of fortitude to try again and again after many rounds of feedback, and to be honest, it’s not for everyone. If you’re more focused on hitting Staff than on setting yourself up to do work that energizes you, it’s easy to end up stuck in a role you don’t want. Being a Staff-plus Engineer, especially a broad-scoped Staff-plus Engineer, is a very different job than being a Senior Engineer.&lt;/p>
&lt;p>Instead, pursue work that you find energizing, even if on paper it doesn&amp;rsquo;t seem like it&amp;rsquo;d get you to a Staff-plus. A big component of being successful as a Staff-plus Engineer is being able to identify and scope net-new impactful work and to convince others of its value and impact. If the work you&amp;rsquo;re doing energizes you, it&amp;rsquo;s actually much easier to achieve this because you&amp;rsquo;ll enjoy thinking deeply about your work a lot more!&lt;/p>
&lt;p>&lt;strong>&lt;em>What about advice for someone who has just started as a Staff-plus engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Your job as a Staff-plus Engineer is specific to your team and organization, and it’s important to avoid taking advice that doesn’t apply to your situation. For example, when I moved into my current role, many of the other Staff-plus Engineers were focused on writing personal charters describing what they want to accomplish over the next 1-2 years. That approach likely works well for deep-scoped engineers, but it hasn’t been as helpful for me as a broad-scoped engineer who needs to respond quickly to organizational changes and shifts to product strategy.&lt;/p>
&lt;p>&lt;strong>&lt;em>Did you ever consider engineering management?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I do manage two engineers right now. That said, I don’t do a lot of the things that a traditional manager would do. I’m not involved in recruiting like a hiring manager would be, and I don’t experience the same sort of performance management situations that other managers would because the engineers who are selected for my team are already high performers.&lt;/p>
&lt;p>I care a LOT about Stripe: when I see something out of place I feel antsy and want to fix it. In some organizations I think that could have led me towards engineering management rather than my current role, and I&amp;rsquo;m grateful that management wasn&amp;rsquo;t the only path that was available to me. My strengths and interests lie in product engineering and API design and execution, and I&amp;rsquo;m able to use these strengths every day in my role.&lt;/p>
&lt;p>&lt;strong>&lt;em>What are some resources (books, blogs, people, etc) you’ve learned from?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I love reading fiction and I learn a lot about the world from great literature. I don’t like reading non-fiction business or technical books nearly as much. When it comes to learning about topics more directly relevant to my job, I treasure my peer relationships. My peers give me valuable in-the-moment feedback and help me tease out the answers that were in my head all along.&lt;/p>
&lt;p>Stripe also has a program called “Leadership In Practice” which is taken by all managers and some senior engineers. That program included a class on &lt;a href="https://www.amazon.com/dp/B004OC071W/">adaptive leadership&lt;/a> which was particularly helpful. I’ve since applied the frameworks I learned to many situations.&lt;/p>
&lt;p>I’ve never been a person who looks to a single mentor for advice. Instead, I follow what I used to call a “Frankenstein,” build-your-own-mentor approach, similar to what Lara Hogan wrote about in her post on &lt;a href="https://larahogan.me/blog/manager-voltron/">building a manager voltron&lt;/a>. Programs that match me up with a single mentor have never quite felt natural to me. I tend to be intentional about the particular topic or area I want to grow in, and will gravitate towards individuals who excel in that area, even if they’re not my “official” mentor.&lt;/p>
&lt;p>I spend most of my time on hard, specific questions that don’t have an easy, generic answer. Figuring out the right approach requires a lot of situational context that someone outside the situation won’t have much insight into.&lt;/p>
&lt;p>Some non-fiction that I’ve read recently and enjoyed:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.amazon.com/dp/B06X18NHC1/">Draft No. 4, John McPhee&lt;/a>: I spend most of my time writing at work, and experience writer’s block quite a bit. But it’s super important to power through that, because a good piece of written communication is the most effective means of broadcasting ideas and scaling yourself.&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com/Creativity-Inc-Overcoming-Unseen-Inspiration-ebook/dp/B00FUZQYBO/">Creativity Inc., Ed Catmull&lt;/a>: The tone of this book definitely made me raise my eyebrows, but there’s a LOT to learn here about how to foster a creative working environment at scale. This is something I think about a lot as we grow our product organization and our product engineering function.&lt;/li>
&lt;li>&lt;a href="https://www.amazon.com/Impro-Improvisation-Theatre-Keith-Johnstone/dp/0878301178">Impro, Keith Johnstone&lt;/a>: I see my superpower (especially as the company grows) as being able to learn and adapt quickly, so I love reading books about different forms of learning and teaching. This book is about learning how to act / improvise, and pushes on conventional metaphors and narratives about education.&lt;/li>
&lt;/ul></description></item><item><title>Rick Boone - Strategic Advisor to Uber's VP of Infrastructure</title><link>https://staffeng.com/stories/rick-boone/</link><pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/rick-boone/</guid><description>&lt;p>&lt;em>This story was recorded in April, 2020. Learn more about Rick on his &lt;a href="https://www.linkedin.com/in/kineticrick/">Linkedin&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;strong>Tell us a little about your current role: your title, the company you work at, and generally what sort of work does your team do?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I’m the Strategic Advisor to Uber’s Vice President of Infrastructure, which means I’m part of the Infrastructure leadership team along with the engineering directors and org-wide Program Managers. Infrastructure Engineering at Uber is about 700 people across six sub-organizations like Metal which handles our data centers and servers, Storage, Developer Platform and so on. I work with the VP on things like technical strategy, cultural strategy and special projects.&lt;/p>
&lt;p>Strategic Advisor is a wide ranging role, for example I might work on:&lt;/p>
&lt;ul>
&lt;li>assessing our technology needs over the next two years&lt;/li>
&lt;li>helping prioritize innovation in the roadmap for the next six months&lt;/li>
&lt;li>digging into important areas without a clear owner and helping streamline the ongoing related projects&lt;/li>
&lt;li>learning how the engineers are feeling before or after a big organizational change&lt;/li>
&lt;li>talking to two teams who need to agree on something but are very far apart and seem like they’re having communication issues, figuring out how to help them find an effective path forward&lt;/li>
&lt;/ul>
&lt;p>It’s just a really, really broad role that’s a mix of engineering, culture, psychology, organizational design and strategy. There are two ways that I describe it, both from pop culture. The first is like being the &lt;a href="https://awoiaf.westeros.org/index.php/Hand_of_the_King">Hand of the King&lt;/a> in &lt;em>Game of Thrones&lt;/em>, and that’s the best analogue I have for it. The second is &lt;a href="https://westwing.fandom.com/wiki/Leo_McGarry">Leo McGarry&lt;/a> from &lt;em>The West Wing&lt;/em>, who always said, “I serve at the pleasure of the President.” In my role, I say that I serve at the pleasure of the Vice President of Infrastructure.&lt;/p>
&lt;p>Although right now it’s just me, previously there were two of us in the Strategic Advisor to VP Infrastructure role, and we would split the work based on our natural affinity to the projects. She often focused more on projects related to managers and leadership while I focused more on IC’s and engineering projects - though we still managed to do things in both areas&lt;/p>
&lt;p>The Strategic Advisor role is a bit unorthodox; it was created by &lt;a href="https://eng.uber.com/core-infra-2018/">Matthew Mengerink&lt;/a> a little while after he started in the VP of Infrastructure role. To my knowledge, our org, and the office of our CTO, are the only orgs which have a role of this type. Matthew created the role because of the value of having full context from within the engineering teams themselves , and he wanted to create that feedback loop to inform his decision making.&lt;/p>
&lt;p>It’s a particularly valuable role in Uber’s Infrastructure organization because it’s a really, really broad organization, and I help serve as a synthesized view across all of it.&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>More from and about Rick&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=9ool1BQybaE">"Capacity Prediction" instead of "Capacity Planning"&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.usenix.org/publications/login/fall2018/boone">Capacity Engineering: An Interview with Rick Boone&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=qJnS-EfIIIE">A History Of SRE at Uber&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://eng.uber.com/rick-boone-infrastructure-profile/">Profiles in Coding: Rick Boone&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;strong>&lt;em>How does this role compare to a TPM role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>This is an interesting question, because I was just thinking about the distinction between Chief of Staff and my own role the other day. Within the Infrastructure Leadership Team, we have the strategic advisor and program managers, and in the past, we’ve also had someone who filled a Chief of Staff role.&lt;/p>
&lt;p>The way I see it, the program managers are an organization-scoped operational role. They&amp;rsquo;re working at a high-level, ensuring that the major programs and areas within Infra are progressing along and evaluated at a regular cadence, operationalizing efforts + initiatives, etc. The Chief of Staff role was one which ensured that the entire leadership machine was working well together - that all the people, groups, messaging, etc, involved in running and leading Infra were operating effectively.&lt;/p>
&lt;p>My strategic advisor role is more about taking broad domain knowledge, both technical and cultural, getting into the details of the problems on a personal and organizational level, and then mixing in engineering acumen. From that I’ll synthesize a set of recommendations or insight which I deliver to either the organizational leader or the entire leadership team. Day-to-day, the vast majority of my work is done directly with the org director and with the PM&amp;rsquo;s - delivering recommendations to the director of the org, and then, with his input and approval, working with the PM&amp;rsquo;s to turn them into a reality.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you think about the importance of remaining aligned with your sponsor?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>It’s funny, because that alignment is key - almost a necessity - for the role. Matthew and I are very aligned on our principles, values, world views, emphasis on emotional intelligence, approach to execution, and philosophies. On so many things we’re lined up, such that it’s almost a symbiotic relationship.&lt;/p>
&lt;p>Alignment with the sponsor is really critical to be effective, but it’s more than just the dispassionate connection between Strategic Advisor and Vice President. It’s also about the connection between Rick and Matthew as people, and making sure that’s a good fit.&lt;/p>
&lt;p>In my role we’ll often go weeks without being in the same room together, but I still have to operate as if I’m his direct proxy. So I go into a room and think, “What would Matthew do here? What is the question he would want to ask? What guidance has he given on this problem?” Because I can’t always run back to him for clarification, it’s essential to develop and maintain a deep understanding of his world view. That’s essential for me to retain the very deep trust required to be his representative and effectively carry out his strategy and vision. People need to be confident that I’ll always give the same answer that Matthew would give if he were there.&lt;/p>
&lt;p>It also means that I have to truly understand his goals, intent, values and principles, to make sure that I’m ready to stake my reputation and credibility on pushing them forward. Often, part of my role involves advocating for or translating his vision and/or implementation to engineers, sometimes when supplemental context isn’t always known. When I do this, I have to make sure that I not only understand the logic and value of what he’s doing, but that I also believe in it myself - otherwise, advocacy becomes hard, not to mention disingenuous.&lt;/p>
&lt;p>This is something I really struggled with a lot when I started in the role. Matthew would constantly tell me, “You’re my representative; you should feel free to push on and perform things using my name and role.” That was difficult for me because I’ve never been in a role like that before. Previously I’ve always operated using my own name and reputation, and now I was operating under the aegis of the Vice President and everything which that carried . Over time I’ve learned how to be deliberate with using that hammer, since you don’t want to overuse it.&lt;/p>
&lt;p>I’ve also learned that I have to let folks know which hat I’m wearing sometimes. I love to mentor people, but sometimes folks aren’t sure if they’re getting the strategic advisor working for the benefit of the organization and company or the mentor, working for the benefit of that person and their career; I try to let them know which role I’m currently in within a particular conversation. If I meet with someone I’m mentoring, they might want to get advice about changing teams, or even leaving the organization or the company, and they want to know which perspective I’m giving advice from.&lt;/p>
&lt;p>&lt;strong>&lt;em>What does a “normal” Staff-plus engineer do at your company? Does your role look that way or does it differ?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I think the biggest difference is that other senior-plus engineers work primarily on technical work. They are leaders, so they do get into the realm of emotional intelligence, communication, collaboration, conflict resolution, evangelism and so on, but still 80% of their daily efforts are driven by technical concerns.&lt;/p>
&lt;p>Whereas with me, there might be weeks where I’m focused on a project around group psychology or organizational design. Technical concerns are not always the pure focus that drive my day to day - though they are always there, if even just in the background.&lt;/p>
&lt;p>&lt;strong>&lt;em>How do you stay aware of reality on the ground now that you’re developing less?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>When I was an engineer I could do this passively, because you’re in the code, trying to push commits, dealing with the friction of provisioning and operating services, etc. That approach doesn’t work anymore, since I’m not touching code very much; so now, gaining that data and awareness requires an active process.&lt;/p>
&lt;p>One thing I’ve done is continue to sit next to my old team so I can hear them work. Maybe they’ll complain about a service’s stability, or a gap in our tooling, and it’s helpful to keep hearing that.&lt;/p>
&lt;p>I also constantly ask folks questions about their developer experience. I keep a list of people in my head of folks who are good at surfacing problems and giving feedback on approaches, and I reach out to them frequently. Sometimes these reach outs are more structured, literally a survey for input, and other times it’ll just be a quick message checking in.&lt;/p>
&lt;p>I also tell folks to send me non-critical path work that doesn’t have a strict timeline, and I try to use that as an opportunity to stay fresh in writing actual code. I have to be careful not to get in the critical path of our actual product though, because I know I won’t have much bandwidth to maintain the code going forward.&lt;/p>
&lt;p>&lt;strong>&lt;em>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>One of the things that’s special about this specific role is that it’s essentially a built-in mentorship with the Vice President. When I got started, he asked me, “What do you want to do in five years? What are you aiming for?” At the time, I really didn’t have clear answers to those questions. For a long time my perspective has been that being able to write code, in our current time, puts you in one of the best positions in the history of humanity, in terms of job security and trajectory, and that seemed like enough for me.&lt;/p>
&lt;p>As I spent time thinking about my goals, what I really came away with was that I love being a visible reference for other engineers, especially other minority engineers, and helping people here at Uber or earlier in their career. I especially enjoy helping people who are just getting into the industry, and might still be a little intimidated by it. That’s a huge part of what drives me, and this role has helped me realize and admit that to myself. Before I didn’t accept that as a valid purpose, but I realized that if it’s what you love, if it’s what you’re passionate about, then you have to go for it.&lt;/p>
&lt;p>Another reason mentorship is important to me because throughout my life and career, I’ve had six people that I consider key mentors. Each of them, at various times, have provided massive impact and influence upon my life - I would not be anything close to who I am without their past and continued guidance. And I’m both extremely grateful for them and also constantly aware of how much they’ve guided me. So, I always recognize the power of a mentor and want to make sure I can provide that for others. And sometimes, mentors don’t even know how their words or actions change you, the ripple effect they can have, even years later. So, I always try to make myself available for others as a mentor, because you never know when you can have that type of life-changing impact on someone, or how. It might just be the right word, the right perspective, the right push from you, at just the right time for them.&lt;/p>
&lt;p>I’ll always tell people, “Seriously, if you need me, just come ask for help.” This is one of the most exciting parts of what I do, and there are a few different ways I try to make myself available.&lt;/p>
&lt;p>One is that I give an Engucation (what happens when you blend engineering and education into a single word) class every month to most new hires in engineering. That class is called “Lessons + Questions” and it’s literally just a place where they can ask me anything they want about Uber - technical, cultural, whatever - and I’m as candid as possible. At the end of that, I let people know my email and that they’re welcome to reach out. A good number reach out to me after that and I give them advice on their careers, working at Uber, or whatever. Other times I’ll have people who just run into me while I’m around the office and ask for advice.&lt;/p>
&lt;p>I want to be visible as a Black engineer, showing others that we &lt;em>are&lt;/em> here and this &lt;em>is&lt;/em> doable. Once I realized this was an important motivation for me, I knew that I had to get better at public speaking, because that’s such an important way to scale myself as a role model. Public speaking used to terrify me. I used to &lt;em>hate&lt;/em> public speaking. But because it’s such a key way to reach large numbers of people, I told myself I had to learn to like it, and since then I’ve learned to be an effective public speaker and have actually fallen in love with it. It’s now one of the most exciting things I do - it’s like a roller coaster; everytime I do it, I get nervous, but it’s a thrilling, fun type of nervousness and I get a huge rush while I’m doing it.&lt;/p>
&lt;p>&lt;strong>&lt;em>Do you think about building your external brand?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>I have a couple of friends that spend time building their external brand, one of whom is getting back into it right now. He realized that his work at Uber was so intensive that he’d pushed external work to the wayside.&lt;/p>
&lt;p>I’m a bit more passive about it. When I’m involved with something that gets written up publicly or I give a public talk, then I’ll post a link on LinkedIn, but I don’t write my own content at all. I think about doing it, and I’m interested in doing it, but I don’t. I tend to think through speaking, so writing this way requires a lot of preparation to organize my thoughts, and I’ve not spent much time doing it externally so far.&lt;/p>
&lt;p>&lt;strong>&lt;em>You first got the title strategic advisor at your current company. Were you hired as a strategic advisor? If not, what was the process of getting promoted to that role?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>My path was completely unorthodox. It wasn’t planned, and there really isn’t a reproducible pathway to it, more of a fortunate series of events. Previously &lt;a href="https://www.linkedin.com/in/rob-punkunus-3791273/">Rob Punkunus&lt;/a> was in the same role, and when he decided to leave he was asked by Matthew to suggest potential successors. He suggested me and Kate, and both of us ended up serving in the Strategic Advisor role.&lt;/p>
&lt;p>Matthew and I had already had several positive interactions before that, where we’d started to identify that we had similar views and values. For example, at one point we had a rash of nasty comments submitted anonymously to our Questions &amp;amp; Answers meeting, and it really bothered me to see our culture heading that direction. I stood up and spoke at one of the Q&amp;amp;As asking folks to find a more constructive way to surface their concerns, and I think that resonated with Matthew.&lt;/p>
&lt;p>When he first suggested that I take the role, I had a ton of imposter syndrome about it. I tried to get him to rescind the offer, thinking it wouldn’t be a good fit, but ultimately I did accept and have been in the role since.&lt;/p>
&lt;p>&lt;strong>&lt;em>What two or three factors were most important in you becoming a strategic advisor? How have the companies you joined, your location, or your education impacted your path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>In addition to Rob’s recommendation, the most important factor was doing visible work that aligned with Matthew’s values. One project I worked on was joining the working group to understand and improve SRE’s culture back in 2017. The working group was already planned before &lt;a href="https://www.susanjfowler.com/blog/2017/2/19/reflecting-on-one-very-strange-year-at-uber">Susan Fowler’s blog post&lt;/a> went out, and our first meeting was coincidentally three days after she posted it. I really think the culture working group did some great work, work which myself and the other group members are extremely proud of and over eighteen months we really moved the culture of a hundred person organization in a meaningful way.&lt;/p>
&lt;p>Additionally, I’ve always just been personally fascinated with things in the realm of both culture and human psychology + behavior. In my career, at the companies I’ve worked at, culture + group psychology has often been the hidden x-factor that turns organizations from good to great. I’d already been satisfying my own personal curiosity in the area with books and papers on things like behavioral economics, behavioral science, etc, so that natural interest has helped nudge me towards where I’m at now.&lt;/p>
&lt;p>&lt;strong>&lt;em>Can you remember any piece of advice on reaching Staff that was particularly helpful for you?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>Throughout my career people have always told me that I’m much more impactful and have more potential than I realized. I never listened to that, and for me, as well as many other engineers, especially engineers that are minorities, we spend a lot of time doubting ourselves. It’s so easy to only see the bad parts. We might not recognize when we’re in a meeting and speak passionately about something, and that people are really listening to us. It really helped to have people keep telling me that I didn’t realize the impact I was having, that my viewpoints were not only valid, but actually influential in the organization.&lt;/p>
&lt;p>Another thing that’s helped is having mentors. Specifically I like mentors who are constructively antagonistic. What I mean by that is that they throw me into things that utterly terrify me but they’re certain I’m ready for. They’ve helped push me way beyond what I thought was possible for me. These have generally been managers who I’ve worked with, but where we’ve been able to mutually learn from each other.&lt;/p>
&lt;p>&lt;strong>&lt;em>What about a piece of advice for someone who has just started as a Staff engineer?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>This goes back to how I got where I am based on having a broad set of interests in organizational psychology, culture, mentorship and so on, in addition to the technology. I’ve never been a pure engineer that’s just deep in the code 24/7. I’ve never been that person, and I had to make my peace with that.&lt;/p>
&lt;p>For me it’s been important to follow my passions. Recently that’s been around mentorship, but it’s also been around other things like machine learning, which has always been a hobby of mine. I love how machines can generate insights that mimic how people think - it’s the perfect marriage of my interests in technology + psychology.&lt;/p>
&lt;p>So I have these passions that I stoke, and then when opportunities to align those passions with something the company needs arise, I take them. For example, my previous team at Uber was generating insights into fleet utilization for capacity planning purposes, and that was a great chance to &lt;a href="https://www.youtube.com/watch?v=9ool1BQybaE">pull together my interest in machine learning and site reliability&lt;/a>.&lt;/p>
&lt;p>Small companies give you the chance to do many different things, but at a certain size companies also give you the unique opportunity to specialize in your passions, and that for me has allowed me to maintain both impact and passion despite never being the person to sit beyond the keyboard and knock out code all day.&lt;/p>
&lt;p>&lt;strong>&lt;em>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>It’s something that I think about sometimes, even now it’s something I’m thinking about. It’s on my list of possibilities, and throughout my career folks have asked, “Have you considered moving into management?”&lt;/p>
&lt;p>What I want to focus on right now is becoming effective as a high-level, big-picture leader. Eventually I’d like to develop the people management skill set too, maybe somewhere in the medium future. The thing that appeals to me is that human behavior excites me to no end, and people management is a great opportunity to spend time on that.&lt;/p>
&lt;p>&lt;strong>&lt;em>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/em>&lt;/strong>&lt;/p>
&lt;p>You know, for the first two-thirds of my career I used to love reading as much technical content as I could. I would be on YCombinator or my RSS feed all day reading about distributed systems, reliability, etc. These days I’m much more into reading about behavioral economics, behavioral science, human psychology, organizational strategy and so on. Some people I really enjoy in those realms are &lt;a href="https://en.wikipedia.org/wiki/Daniel_Kahneman">Daniel Kahneman&lt;/a>, &lt;a href="https://en.wikipedia.org/wiki/Tim_Harford">Tim Harford&lt;/a>, &lt;a href="https://en.wikipedia.org/wiki/Dan_Ariely">Dan Ariely&lt;/a>. There are also some amazing podcasts out there - &lt;a href="https://freakonomics.com/archive/">Freakonomics&lt;/a>, &lt;a href="https://www.schwab.com/resource-center/insights/podcast">Choice-ology&lt;/a>, &lt;a href="https://www.npr.org/podcasts/510308/hidden-brain">Hidden Brain&lt;/a>.&lt;/p>
&lt;p>Also, last year I started compiling a &lt;a href="https://docs.google.com/document/d/1WIqIYuSGfyoU_ZO-xZMDXfaaUmnG2tmnkHiGZQ7pvqg/edit?usp=sharing">reading list of books about the human brain and behavior&lt;/a> which I share with anyone who’s also interested in the topic(s).&lt;/p>
&lt;p>I do still keep up with &lt;a href="https://www.reddit.com/r/linux/">r/linux&lt;/a> and &lt;a href="https://www.reddit.com/r/programming/">r/programming&lt;/a> on Reddit, which have replaced RSS feeds for me in discovering new things to read.&lt;/p></description></item><item><title>Diana Pojar - Staff Data Engineer at Slack</title><link>https://staffeng.com/stories/diana-pojar/</link><pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/diana-pojar/</guid><description>&lt;p>&lt;em>This story was recorded in April, 2020. Learn more about Diana on her &lt;a href="https://diana.dev/">blog&lt;/a>, &lt;a href="https://twitter.com/podiana">Twitter&lt;/a>, and &lt;a href="https://www.linkedin.com/in/dianapojar/">Linkedin&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;strong>Tell us a little about your current role: your title, the company you work at, and generally what sort of work does your team do?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I’m a Staff Data Engineer and the Technical Lead for the Data Platform team at Slack. I joined Slack in February 2016 and I was one of the first engineers in the Data Engineering team. I was heavily involved in building many of the tools and infrastructure to make data available for long-term analytics. When I joined, the team had just made the decision to use Thrift as the logging format. If anyone wanted to get insights, they had to schedule cronjobs on top of the read replicas of the production MySQL database.&lt;/p>
&lt;p>The purpose of the Data Engineering team at Slack is to enable anyone in the company (data science, engineers, product managers, etc) to access data, so they can compute insights, drive business decisions or build new features. The Data Platform team focuses on building services and frameworks that work at scale to empower everyone that needs to process or use data in the Data Warehouse. Some things that our teams own are: the Data Discovery service that exposes task, table, column lineage and general metadata, the event logging structure and the pipeline that consumes the events and exposes them in raw tables in the Data Warehouse.&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>More from Diana&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://slack.engineering/data-wrangling-at-slack-f2e0ff633b69#.w4kzhdpx8">Data Wrangling at Slack&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://speakerdeck.com/ronnieftw/scaling-data-at-slack-a-series-of-unfortunate-events">Scaling Data at Slack: A Series of Unfortunate Events&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;em>&lt;strong>What does a Staff-plus engineer do at Slack? How do you spend your time day-to-day?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>The role of a Staff-plus engineer depends a lot on what the team needs and also what the particular engineer strengths are. From my experience the responsibilities of a Staff-plus engineer can change over time, but usually their main focus is working on projects/efforts that have strategic value for the company, while driving technical design and up-leveling their team.&lt;/p>
&lt;p>There are two big categories that I’ve seen Staff-plus engineers fall into: focus more on depth (specialist) or focus more on breadth (generalist).&lt;/p>
&lt;p>For the first category, folks that focus more on depth are usually experts in a particular domain and most of their time is spent on writing code or working on technical design documents to find solutions in their area of expertise. Companies deal with unique challenges and subject matter experts are needed to drive technical solutions for these extremely hard problems. For example, at Slack, as the company grew and our system needed to scale and perform, there is a principal engineer that his main focus and passion is to detect and fix performance problems.&lt;/p>
&lt;p>Folks that focus on breadth usually work more closely with the leadership team, influencing the org or company wide technical vision, improving processes and culture. Due to their breadth, they are more flexible and can work on different areas of the engineering organization based on the company priorities and needs.&lt;/p>
&lt;p>Personally, for now, I enjoy and focus more on breadth and how I spend my time depends a lot on what my team and organization needs. I would say that so far this year, about 50% of my time is spent on &lt;a href="https://slack.engineering/technical-leadership-getting-started-e5161b1bf85c">technical leadership&lt;/a> and talking with people about larger technical investments that we should focus on, and 50% of my time is focused on mentoring, reviewing code, writing code, jumping on incidents and fixing critical issues, etc. The ratio does change quarter by quarter.&lt;/p>
&lt;p>&lt;em>&lt;strong>Where do you feel most impactful as a Staff-plus engineer? What’s something you’ve done as a Staff-plus engineer that you wouldn’t have done earlier in earlier roles?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Personally, I feel that it’s quite noticeable the increase in trust and respect from people that did not work with me before my promotion / title change. Having the title strongly correlates with one&amp;rsquo;s ability to influence the organization/company roadmap and priorities - basically you get to be in the “room where it happens”.&lt;/p>
&lt;p>I get to be part of building things that have impact for the direct success of the company. Advocating for such projects and being part of them was not something that would’ve been achievable in earlier roles.&lt;/p>
&lt;p>I’m also able to uplevel others that are more junior and make their voices heard. Having a Staff+ title brings some privilege that others don’t have and I try to leverage that to help uplevel my team / peers.&lt;/p>
&lt;p>&lt;em>&lt;strong>Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>A significant amount of my time is actually spent on advocating for technical solutions, processes, architectural or cultural changes - it’s not only all about writing code. I&amp;rsquo;m constantly involved in the technical design review process for many of the teams that need to build systems that rely on the Data Engineering tools and services. Besides being involved in advocating for technical projects, an area of my focus is to improve culture or process changes.&lt;/p>
&lt;p>One area that is dear to my heart and that I believe I had a significant role in my organization is around Incident Management and Analysis. I’ve been involved with the company’s resilience team to improve our Incident Analysis processes, but for my Data Engineering organization I was very involved in driving our general oncall expectations and structure, while also adopting the company’s Incident Response Structure.&lt;/p>
&lt;p>&lt;em>&lt;strong>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Sponsoring is actually an important area for me, as I focus on building amazing relationships with many people that I work with and I strongly believe that we need to lift each other up. Through my journey to get to Staff Engineer and fighting with my own impostor syndrome, I had the opportunity to work with amazing people that sponsored me and had a huge impact on my growth. A couple of people that I worked with and have been my mentors and role models over time are &lt;a href="https://www.linkedin.com/in/josh-wills-13882b/">Josh Wills&lt;/a>, &lt;a href="https://www.linkedin.com/in/stanb/">Stan Babourine&lt;/a>, &lt;a href="https://www.linkedin.com/in/bogdangaza/">Bogdan Gaza&lt;/a> and &lt;a href="https://www.linkedin.com/in/traviscrawford/">Travis Crawford&lt;/a>.&lt;/p>
&lt;p>Mentoring and growing people around me has always been important to me and being in a Staff+ role, you have a type of privilege and power that others don’t have and I try my best to use this to help and uplevel people around me.&lt;/p>
&lt;p>&lt;em>&lt;strong>You first got the title Staff engineer at Slack. Were you hired as a Staff engineer? If not, what was the process of getting promoted to Staff?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I joined Slack as a mid level engineer and after one year I got my Senior promotion. As a Senior Engineer I had the opportunity to work on multiple projects with org/company wide impact, many of them that were directly tied into how our company business metrics are being computed, which were critical for getting the company ready to go public.&lt;/p>
&lt;p>After being 2 years in the Senior role, my manager told me that I am operating at the next level and that he believed there was a strong case to make and he planned to put me up for promotion. At Slack, the Staff+ Engineering promotions need to have a promo package put together that illustrates with clear details and measurable information that a person operates at a certain level. The main areas of focus are: Technical Quality, Impact, Collaboration and Execution. We worked together to write and fill in all the necessary details for the promotion package. As an IC, I highly recommend, if it’s possible, to work with your manager and write this document together: it should be a team effort. After the packet is ready, the promotion package is evaluated by a special promo committee where some leadership and staff+ engineers from the whole company are present.&lt;/p>
&lt;p>&lt;em>&lt;strong>What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>As I look back and contemplate on how I felt and thought about this when I was a junior engineer, the main factor to get to Staff Engineer is to actually believe that &lt;strong>YOU CAN DO IT&lt;/strong> and don’t let the
impostor syndrome win.&lt;/p>
&lt;p>In general, I’ve always tried to be very intentional with my career choices and usually I spend some time every year to think about what I’m doing and the areas of growth that I want to focus on. I’ve found this extremely valuable, because it makes me take a step back and assess what I am currently doing, to ask if I’m still growing in my current environment and think about new opportunities.&lt;/p>
&lt;p>So at the end of 2015, when I decided I wanted to leave Twitter, I found out that Slack was starting to build their Data Engineering team. Being able to build and design from scratch the systems, services and frameworks was extremely exciting for me. Joining a newly-formed team at Slack was a unique opportunity that definitely contributed to reaching Staff Engineer. It gave me the opportunity to work on projects that had org or company wide impact. For example, the first big project I worked on moved about 25% of the load on the production MySQL database off to the Data Warehouse, saving the company millions of dollars.&lt;/p>
&lt;p>Another critical factor that influenced my path to become a Staff Engineer were the people around me, as I was lucky to have amazing role models and mentors in my team. When I joined Slack, I was the 4th person in a very senior team (everyone else was Senior Staff), which contributed to my desire to prove myself and show that I belong. Building a track record of mentoring, visibility and technical quality in every project also contributed to my path towards Staff, I did not see my job as just a job, but I’ve put a lot of passion into every project or problem we tried to solve.&lt;/p>
&lt;p>&lt;em>&lt;strong>There is a popular idea that becoming a Staff engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>No, I did not have an assigned “Staff Project” and that is not something that it’s part of the promotion process at Slack. There is a career ladder that describes the general expectations and scope of impact for every level and with Staff+ levels this level of scope starts to expand from org wide impact towards company wide impact.&lt;/p>
&lt;p>I usually always try to challenge myself and I was always looking to drive change and impact in my organization. I think the most impactful project that I worked on and contributed to my path towards Staff Engineer was being involved in thinking through and implementing the technical design on how our company business metrics (ex: ARR) are computed to make sure the process is reliable, scalable and most importantly, reproducible. This was a critical initiative as Slack was completing a public company readiness process.&lt;/p>
&lt;p>&lt;em>&lt;strong>Can you remember any piece of advice on reaching Staff that was particularly helpful for you? Looking back, is there an easier path to Staff that you could have taken?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Something that I felt was extremely helpful was to understand that a Staff+ Engineer’s work and responsibility is more than writing code. Basically what got you to senior level will not get you to Staff+. It’s important to understand the expectations of this role in your company, but also in the industry as a whole, as there are some differences between companies.&lt;/p>
&lt;p>Work with your manager or more senior peers to find projects that will challenge you and increase the scope of your work. Something that was extremely helpful to me is that I started investing in developing my leadership and communication skills more. I also started framing and thinking about certain things in a different way, when I was starting feeling stressed or unsure of my own abilities, that’s often a sign that I’m growing and stumbled into an area that offers a lot of growth opportunities.&lt;/p>
&lt;p>&lt;em>&lt;strong>What about a piece of advice for someone who has just started as a Staff engineer?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Reaching Staff Engineer brings a lot of responsibility and you should always be a strong advocate for your peers. As an IC, I think execution and being hands on are always the “easy” thing to do and the hard things are actually driving change and impact in your organization.&lt;/p>
&lt;p>I think that in different moments of your tenure as a Staff engineer, you might see yourself focusing on different things and that is ok and expected. There’s not a single clean cut definition of what a Staff Engineer should do.&lt;/p>
&lt;p>&lt;em>&lt;strong>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>This is actually a question that I ask myself every couple of years. Every time that I self-reflect and think about the answer to this question, the answer, for now, is no - I don’t want to be a manager. I love coding too much and I strongly believe that to be a successful manager you should not write code, and should instead be fully focused on growing your team. I like being involved in technical decisions and thinking about technical solutions way too much to give up this hands-on experience, even though as you get in more senior roles, the time you spend coding will decrease.&lt;/p>
&lt;p>Not being an Engineering Manager doesn’t mean that you cannot influence and help people grow. As a Staff+ engineer you do need many of the core management skills, even though you are not a manager and I have found reading management books extremely helpful. I actually think that these two roles, even though they are on separate, parallel tracks, they are closer to each other than people think.&lt;/p>
&lt;p>It’s possible that at some point in time, the answer to this question might change and that is ok.&lt;/p>
&lt;p>&lt;em>&lt;strong>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I use Twitter extensively, but I’m mostly a consumer and follow many people in tech. I usually follow people that I saw talking at conferences or I worked with and I find their content relevant to me. Here’s a couple, in no specific order: &lt;a href="https://twitter.com/skamille">Camille Fournier&lt;/a>, &lt;a href="https://twitter.com/lara_hogan">Lara Hogan&lt;/a>, &lt;a href="https://twitter.com/josh_wills">Josh Wills&lt;/a>, &lt;a href="https://twitter.com/vboykis">Vicki Boykis&lt;/a>, &lt;a href="https://twitter.com/gasca">David Gasca&lt;/a>, &lt;a href="https://twitter.com/jewelia">Julia Grace&lt;/a>, &lt;a href="https://twitter.com/holdenkarau">Holden Karau&lt;/a>, &lt;a href="https://twitter.com/allspaw">John Allspaw&lt;/a>, &lt;a href="https://twitter.com/mipsytipsy">Charity Majors&lt;/a>, &lt;a href="https://twitter.com/postwait">Theo Schlossnagle&lt;/a>, &lt;a href="https://twitter.com/jessitron">Jessica Joy Kerr&lt;/a>, &lt;a href="https://twitter.com/sarahcat21">Sarah Catanzaro&lt;/a>, &lt;a href="https://twitter.com/orangebook_">Orange Book&lt;/a>.&lt;/p>
&lt;p>I also enjoy reading (I read about 50 books each year) and since last year, I always try to leave a mini review on &lt;a href="https://www.goodreads.com/user/show/11950463-diana-pojar">my Goodreads account&lt;/a> for every book I read, but here are a couple of books that I found useful:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/20487821-thanks-for-the-feedback">Thanks for the Feedback&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/32809138-radical-candor">Radical Candor&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/34616805-the-manager-s-path">The Manager&amp;rsquo;s Path: A Guide for Tech Leaders Navigating Growth and Change&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/18966789-leadership-and-self-deception">Leadership and Self-Deception: Getting Out of the Box&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/29342515-the-coaching-habit">The Coaching Habit: Say Less, Ask More &amp;amp; Change the Way You Lead Forever&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/30109687-first-break-all-the-rules">First, Break All the Rules: What the World&amp;rsquo;s Greatest Managers Do Differently&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/36752952-the-courage-to-be-disliked">The Courage To Be Disliked: How to free yourself, change your life and achieve real happiness&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/16158498-give-and-take">Give and Take: A Revolutionary Approach to Success&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.goodreads.com/book/show/9530608-mistakes-were-made-but-not-by-me">Mistakes Were Made (But Not by Me): Why We Justify Foolish Beliefs, Bad Decisions, and Hurtful Acts&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>That&amp;rsquo;s not an exhaustive list!&lt;/p></description></item><item><title>Duretti Hirpa - Formerly Staff Engineer at Mailchimp</title><link>https://staffeng.com/stories/duretti-hirpa/</link><pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/duretti-hirpa/</guid><description>&lt;p>&lt;span class="date fr">April, 2020&lt;/span>
&lt;a href="https://www.durettihirpa.com/">blog&lt;/a>,
&lt;a href="https://twitter.com/duretti">twitter&lt;/a>,
&lt;a href="https://www.linkedin.com/in/duretti/">linkedin&lt;/a>&lt;/p>
&lt;p>&lt;em>&lt;strong>Tell us a little about your current role: your title, the company you work at, and generally the sort of work your team does?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I’ve recently departed Mailchimp, where I was a Staff Engineer and tech lead for Mailchimp’s transactional email product. I left to start and found my own company. Working for yourself is really quite distinct from being a staff engineer at a company, and is relatively well discussed. So, I’ll talk about what it was like to be a staff engineer at Mailchimp.&lt;/p>
&lt;p>I was working on a team that had a strong mandate to stabilize and extend an underloved product. When I joined Mailchimp the team was more infrastructure focused, and later a product team was formed, and I was chosen to lead that. Since it was a new team, I did a lot of table-setting (roadmapping, setting up channels, team norm discussions, and collaborating on a tech spec template). It is one of my stronger beliefs that a good leader is a kin to a good host: it’s about making room for others, making them feel welcome. If we want to grow as leaders, we need to learn to get out of the way of the people we lead, and give them a chance to participate.&lt;/p>
&lt;p>&lt;em>&lt;strong>What does a Staff-plus engineer do at your company? How do you spend your time day-to-day?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>The days vary &amp;ndash; it depends on what my team needs. It’s a lot of communication, and clearing the brush. It might be talking to an adjacent team, it might be chasing down requirements, I’ve even written product briefs. Whatever my team needs? That’s usually my first priority. I’ll often pair with an engineer on my team, talk through possible solutions. I’ll also work on cross-org initiatives. It’s a lot of relationship building, lots of getting to know people, and being known - so that when the time comes, conflict is easier. I also like to inject a little levity, so there’s a lot of jokes and meme creation, not going to lie. Work is also a community, if you let it be one.&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>Some of Duretti&amp;#39;s talks&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=a9H7SGuRrC8">How to affect change without losing your job&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=sjsy_e1glKo">How do you get an engineering team to eat their vegetables&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=XyXxXuYdx0U">Good APIs make for Good UIs&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;em>&lt;strong>What’s something that’s changed for you since becoming a Staff-plus engineer?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Honestly? Being listened to and being treated like I have expertise. The title carries weight, and I’m taken more seriously from the jump.&lt;/p>
&lt;p>&lt;em>&lt;strong>Do you spend time advocating for technology, practice, process or architectural change? Can you share a story of influencing your organization?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I’m a big fan of anticipating needs; it tends to be practice and process based. Those are the squeaky wheels of engineering organizations, and tend to be things that people complain about but don’t fix. After I had been assigned a product team, I started looking for technical specs and examples of product briefs. It turned out that Mailchimp didn’t have a unified technical spec template. I gathered 5 other staff-plus engineers, and we did a spike. We created a template, refined it, asked for feedback, and rolled it out. I personally am pretty impatient, so I didn’t want it to be a working group. Working groups have a time and a place, but without a strong directive can drag out for many months or even years. Since we had an explicit deliverable (a tech spec template), we had 3 meetings, and worked asynchronously (Mailchimp is distributed across North America), and rolled it out. I count that a win.&lt;/p>
&lt;p>&lt;em>&lt;strong>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Sponsorship is the name of the game. I believe that it’s the job of senior engineers to make &lt;em>more&lt;/em> senior engineers. Otherwise, we’re just gatekeeping.&lt;/p>
&lt;p>More transparently, I’m a Black woman in technology, and I finally got a seat at a table. I made it, and I’m actually senior, and it’s not a success to me unless that room looks more like me. Otherwise, I’m just evidence of structural exclusion - the exception that proves the rule.&lt;/p>
&lt;p>&lt;em>&lt;strong>How did you first get your Staff engineer title?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I first got the Staff Engineer position at Mailchimp, and I was hired in.&lt;/p>
&lt;p>&lt;em>&lt;strong>What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education dramatically impacted your path?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I’ll be honest, reaching staff was the combination of my reputation, sponsorship, location, and working at a popular, successful company. I was an early-ish hire at Slack, and while there, I was encouraged to give conference talks. Giving talks raised my profile, as did some spicy tweeting on Beyoncé’s internet, about the other half of the work we do as software engineers. So, I have some public profile, and when I was job searching last year, I reached out to Marc Hedlund about joining Mailchimp. He framed my interview internally at Mailchimp as a Staff Engineer interview, and I aced it. Without that intervention? I would still be underestimated. Tiny interventions can have big ripples.&lt;/p>
&lt;p>&lt;em>&lt;strong>There is a popular idea that becoming a Staff engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I was hired in at Staff, so no.&lt;/p>
&lt;p>&lt;em>&lt;strong>Can you remember any piece of advice on reaching Staff that was particularly helpful for you? What about a piece of advice for someone who has just started as a Staff engineer? Looking back, is there an easier path to Staff that you could have taken?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>How do I say this delicately? The easier path would have been if I wasn’t me. I definitely think a combination of my personality and identity made it such that it took longer for me to get here. According to the Harvard Business Review’s report on women in tech, &lt;a href="https://store.hbr.org/product/the-athena-factor-reversing-the-brain-drain-in-science-engineering-and-technology/10094">The Athena Factor,&lt;/a> 41% of women leave the technology sector after 10 years of professional experience, and I really understand that statistic. This statistic haunts me. I feel that statistic in my bones. I’d be lying if I said my fantasies of leaving technology weren’t slowly approaching a plan.&lt;/p>
&lt;p>But, I stayed, and I got the staff title in my 11th year of professional experience.&lt;/p>
&lt;p>In terms of advice, it’s this: Staff engineering is a &lt;strong>completely&lt;/strong> different job. It’s no longer about your technical expertise. The job isn’t computer anymore, as I’m fond of saying. You’re now an agent of the organization, and you have to take a longer view. Sure, technical chops are important, but realistically you’re not going to be spending that much time coding, if you’re doing it right. You’re basically a manager sans reports, and your directive is to lead without formal authority. It works because as an engineer, you inherently have more time than managers do, and you can fix things that managers can’t.&lt;/p>
&lt;p>&lt;em>&lt;strong>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I did consider engineering management: I’m an extroverted, charismatic, people person. I’d be a damn fine engineering manager. However, I didn’t want to be a first-time engineering manager and experiment on someone else’s career. Time is a non-renewable resource, and we act like it isn’t. I couldn’t stomach taking a year to get good at a job and possibly rob someone of career progression. I couldn’t pretend it wasn’t a theft, and I wasn’t willing to do that to someone. Additionally, I know that it’s a completely different job, and it’s one that would require sponsorship and mentorship &amp;ndash; something that’s already difficult to get as an individual contributor, let alone a manager.&lt;/p>
&lt;p>&lt;em>&lt;strong>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>For mouthy folks who want to be change agents, I can’t recommend the book &lt;em>&lt;a href="https://www.amazon.com/dp/B00P9WL3WS/">Rebels at Work&lt;/a>&lt;/em> by Carmen Medina and Lois Kelly enough. For people struggling to understand office politics, and how you can learn &amp;amp; exploit human biases, I highly recommend Jeffrey Pfeiffer book, &lt;em>&lt;a href="https://www.amazon.com/Power-Some-People-Have-Others-ebook/dp/B003V1WSZK/">Power: Why Some People Have It And Others Don’t&lt;/a>.&lt;/em>&lt;/p>
&lt;p>I’m still hoping to find a role model that looks like me, but the odds aren’t likely, so I’m trying to “be who I needed when I was younger.” That being said, every person of color, woman, and gender minority I’ve gotten to know in this sector has taught me something essential about heart, spite, showing up, and joyfully being yourself in a world and profession that isn’t carved for you - and that’s what keeps me going.&lt;/p></description></item><item><title>Nelson Elhage - Formerly Staff Engineer at Stripe</title><link>https://staffeng.com/stories/nelson-elhage/</link><pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/nelson-elhage/</guid><description>&lt;p>&lt;em>This story was recorded in April, 2020. Learn more about Nelson on his &lt;a href="https://twitter.com/nelhage">Twitter&lt;/a> and &lt;a href="https://blog.nelhage.com/">blog&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;strong>Tell us a little about your current role: your title, the company you work at, and generally what sort of work does your team do?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I was most recently at Stripe. They do online payment processing, and it’s a pretty fast growing startup of about two thousand people. Engineering was around six hundred. When I left, I technically didn&amp;rsquo;t have a title. If I had stayed another two months, I would have been a Staff Engineer, because they finally rolled out titles after some years of internal debate.&lt;/p>
&lt;p>The team I worked on most recently was called Payment Architecture, which was a team of three or four fairly senior engineers. Payments are the core of Stripe’s product, and we looked after the payments codebase. We were particularly focused on the financial infrastructure layers of the codebase, and building the data model and abstractions we needed to support all of Stripe’s current and aspirational product lines.&lt;/p>
&lt;p>We looked at how code structure fits into organizational structure, including how to structure code within a rapidly growing organization that was adding teams, products, countries, and payments methods. It was particularly important that our architecture support spreading ownership across a number of offices and timezones.&lt;/p>
&lt;p>We drove a lot of initiatives around code quality and code architecture, and did some implementation and rewrite projects. For each of those initiatives, we developed metrics and goals, got teams to take on those goals, and then gave teams tools to help them migrate to the new standards.&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>Some of Nelson's writing&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://increment.com/testing/testing-as-communication/">Testing as communication&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.nelhage.com/post/systems-that-defy-understanding/">Systems that defy detailed understanding&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.nelhage.com/post/computers-can-be-understood/">Computers can be understood&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.nelhage.com/post/why-sorbet-is-fast/">Why the Sorbet typechecker is fast&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;em>&lt;strong>Was the “Payments Architecture” team a permanent team or more of a project team?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>A little bit of both. It wasn’t a super tactical team with a narrow project or scope to its mandate. But it was also unlikely to last forever as a team. We were taking an experimental approach to evolving our architecture, with the goal of revising and updating our approach as we went. We hoped that the team would eventually work itself out of its job.&lt;/p>
&lt;p>&lt;em>&lt;strong>What does a Staff-plus engineer do at your company?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>It’s hard to say with too much confidence because Stripe was only just introducing titles. It wasn&amp;rsquo;t public who was a Staff Engineer, but you did have a sense of who the senior engineers were based on the people working on the most significant, impactful things.&lt;/p>
&lt;p>There are some clear Staff Engineer archetypes. One is working on deep technical projects, maybe scoping out or building new pieces of infrastructure. Before the Payment Architecture team, I worked on building &lt;a href="https://sorbet.org/">Sorbet&lt;/a>, which is our static Ruby type checker. I spent about a year with two other senior engineers building that from scratch, which was a good example of the deep, highly leveraged technical work archetype.&lt;/p>
&lt;p>There were also Staff Engineers who spent time wrangling cross-cutting projects, serving as a combination of architect and project manager to pull together different parts of the organization to work on a large problem. Typically these problems weren’t well-aligned with our current architecture or organization such that they required collaboration across many different teams.&lt;/p>
&lt;p>There were also Staff Engineers who worked with one team, or a small group of teams, and they served as the keepers of the team vision. They’d identify what the team was building towards, and where they wanted to be in one to five years. They’d work across the organization to build and share that vision, then work to implement it.&lt;/p>
&lt;p>&lt;em>&lt;strong>How do you spend your time day-to-day?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>This looked very different between the Payment Architecture role and the Sorbet role. Sorbet was more of a “heads down and code” project. On Payments Architecture, there was still some amount of coding because we had a specific approach that we wanted to both try out and to demo the ideas that we were pushing for.&lt;/p>
&lt;p>I did a decent amount of project management as well. Things like tending to the task tracker, running the daily stand up, figuring out who needed help or who was blocked. I also spent time being communication glue across the company and engineering organization, especially talking to teams that were interested in the tools and patterns we were building and advising them.&lt;/p>
&lt;p>In that effort, I spent time in various meetings figuring out the technical strategy, and also a fair amount of my week writing design documents on the problems we saw along with promoting the shape of architecture that we thought would solve them. Finally, I worked to explain and sell those ideas to leadership and other teams, as a way of setting the agenda and advocating for their investment and prioritization.&lt;/p>
&lt;p>&lt;em>&lt;strong>Where do you feel most impactful as a Staff-plus engineer?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Certainly the one that&amp;rsquo;s easiest to trace the impact of was &lt;a href="https://sorbet.org/">Sorbet&lt;/a>, where in two years a three person team took Stripe from a dynamically typed code base to a substantially statically typed code base. That impacted all of the company’s six hundred engineers’ daily experience in their editors and development environment.&lt;/p>
&lt;p>That said, it&amp;rsquo;s hard to know whether that was truly the most impactful project. There&amp;rsquo;s a more nebulous argument that the architecture strategy work will be more impactful in the long run.&lt;/p>
&lt;p>&lt;em>&lt;strong>What’s something you’ve done as a Staff-plus engineer that you weren’t able or allowed to do in earlier roles?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>The question of “allowed” is interesting, and might not be quite the right question because there were very few official policies on who got what kind of role. Most things relied on more informal gauges of seniority.&lt;/p>
&lt;p>But that said, both Sorbet and the Payments Architecture team were relatively ambitious projects. Sorbet for example required pulling three senior engineers off of more concrete projects. Starting them required high levels of organizational respect and trust to get permission and support to pull the team off their existing work and having them instead work on these projects for a year.&lt;/p>
&lt;p>&lt;em>&lt;strong>Do you spend time advocating for technology, practice, process or architectural change?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>This is somewhat seasonal around the planning process. Prioritization ultimately means staffing, and staffing decisions happen during planning.&lt;/p>
&lt;p>The planning season was a particularly acute period, but I was more or less continually thinking about prioritization at the engineering-wide level. It might be noticing a problem that a lot of engineers were encountering, or seeing something that was slowing teams down. It was a constant, recurring thread that I thought about and it would periodically become an acute priority where I’d spend time advocating for a team to be created or to work on a problem.&lt;/p>
&lt;p>&lt;em>&lt;strong>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>That wasn’t an angle that I spent a lot of time thinking explicitly about in those terms, and I can&amp;rsquo;t think of clear examples where I would describe that as what I was doing. An adjacent thing that I did a couple of times was helping to bootstrap teams that I wasn&amp;rsquo;t part of. For example, some team would spin up to take over a system that used to be part my capacity, and I would work with them in a close advisory role to give them context and advice.&lt;/p>
&lt;p>&lt;em>&lt;strong>You first got the Architect title at Oracle after the Ksplice acquisition. What was your process for getting the Architect title?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I don&amp;rsquo;t remember if &lt;a href="https://en.wikipedia.org/wiki/Ksplice">Ksplice&lt;/a> had titles in place pre-acquisition. After the acquisition I spent one year at Oracle and had the title Architect, which I think at the time was their highest individual contributor level. There was definitely some acquisition title inflation going on there. I don&amp;rsquo;t know if I would have reached that title if I had not come in via acquisition.&lt;/p>
&lt;p>&lt;em>&lt;strong>After Ksplice was acquired by Oracle and you became an Architect, did the work you were doing on a day-to-day basis change from before the acquisition?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I was broadly doing the same style of work. The thing that changed was that I spent a lot more time interfacing with the Oracle Linux organization within Oracle. I was focused on figuring out how our product would integrate with theirs, and also bringing them up to speed on our technology so that they were able to use it. I had previously spent time training new hires, but that was a much slower rate than what happened at Oracle which was, “We&amp;rsquo;re dropping you into this 400-person org, and now training them is a big part of your job.”&lt;/p>
&lt;p>&lt;em>&lt;strong>What two or three factors were most important in you reaching Staff?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>The specific path I took was very dependent on coming in quite early at Stripe. I was roughly employee #30. The thing that I did with that though, which I think is not identical to what everyone else did, is I tried to build very broad context and awareness across Stripe. That was comparatively easy to do, when there were 15 engineers; there weren&amp;rsquo;t that many things then.&lt;/p>
&lt;p>But I spent a lot of effort as the company grew trying to stay aware of &lt;em>everything&lt;/em> that was going on in engineering: the interactions between teams, the scaling pain points. I tried to have an unusually global perspective. That helped me know which problems were important to work on and especially what the one level removed important problems were. If I knew the organization had a goal of launching a specific product, I would have the perspective to see the reason why it would be hard is because of these previous architectural decisions, or that this downstream system wasn’t currently up to the task.&lt;/p>
&lt;p>As the organization got really big, seeing those one level removed dependencies got increasingly hard, and trying to keep a broad view and systems level view helped with that. It also helped me connect teams together, making me a router of information and ideas, as well as an originator of proposals.&lt;/p>
&lt;p>Many teams get stuck looking at their section of the world, and have a less developed conception of how their internal customers are integrating with them. This happens because they&amp;rsquo;ve never worked on the internal customer teams they support. I helped bring teams the context of how other teams truly used their systems, and connected them to other people across the organization whose perspectives they should gather.&lt;/p>
&lt;p>It’s hard to keep all this context as the organization grows, but it’s even harder for someone who didn&amp;rsquo;t start building that global context when the company was smaller. By starting early, you have a huge competitive advantage relative to someone starting later who tries to reverse engineer the architecture and organizational dependencies.&lt;/p>
&lt;p>&lt;em>&lt;strong>When I spoke with &lt;a href="https://staffeng.com/stories/keavy-mcminn">Keavy McMinn&lt;/a>, one interesting point she made was that sometimes it’s helpful to be able to see things without the full historical context. Did you ever find that your context made it harder to move forward?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Absolutely. I would notice myself coming into conversations with a team and I was prepared to give them a seven year history of every time someone had attempted the thing that they&amp;rsquo;re doing and why it didn&amp;rsquo;t work. It would take deliberate effort to review that history and ask myself, “Why is this information helpful or relevant to them?”&lt;/p>
&lt;p>Sometimes the information isn’t useful. On the other hand, if someone tried to do this thing and died on the rocks, there may be some really hard technical problem that&amp;rsquo;s still around. There might be some value in pointing out the rocks, but also there&amp;rsquo;s a lot of value in having the audacity to try again because it’s years later and we&amp;rsquo;ve become a different organization.&lt;/p>
&lt;p>&lt;em>&lt;strong>There is a popular idea that becoming a Staff engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I&amp;rsquo;m instinctively a little bit wary of this sort of idea of a staff project, in part because one of the archetypes of Staff Engineers that I&amp;rsquo;ve seen are people who don&amp;rsquo;t necessarily run grand projects themselves or do big things. But just are sort of incredibly effective gurus and routers who make the whole engineering organization run better.&lt;/p>
&lt;p>Maybe my closest thing to a Staff Project is that I got my final promotion for work on something called the “Data Model Stripe Release Plan.” I led this six month long plan to get a bunch of teams to coordinate on a handful of projects addressing the weaknesses in our data models, and advancing the data model in ways that would, aspirationally, be transformative.&lt;/p>
&lt;p>I don&amp;rsquo;t think it&amp;rsquo;s a great instance of a Staff Project in some ways. For one, we did good work, but it was much less transformative than anyone hoped due to a combination of reasons. Some of which were in my control and some of which were that the problems were just too hard and the organization didn&amp;rsquo;t have the resources to actually fix them in six months.&lt;/p>
&lt;p>While that project wasn’t necessarily better work than I did in other halves, it was a very visible, high profile role. It created visibility and increased my standing in the company in important ways.&lt;/p>
&lt;p>&lt;em>&lt;strong>Can you share a piece of advice on being a Staff engineer that was helpful for you?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>One lesson that I learned was the importance of focus and prioritization. That’s especially true when you have the broad organizational context that I talked about earlier. It&amp;rsquo;s very easy at any moment to identify thirty different things that you would like to be working on.&lt;/p>
&lt;p>Occasionally you can push each of those thirty things forward a little bit. And that&amp;rsquo;s productive for a while, but you need to be careful. If these are things that &lt;em>aren&amp;rsquo;t&lt;/em> getting worked on and that you think &lt;em>should&lt;/em> get worked on, you&amp;rsquo;re going to have much better luck picking one of them at a time and really focusing your effort rather than pushing a little across many different projects at once.&lt;/p>
&lt;p>One big distinction is whether there are already teams working on those thirty things. If there are already teams working on them, but not in the direction that you think is effective, you can get a lot of leverage out of going to those thirty teams and helping unblock them.&lt;/p>
&lt;p>In the end you have to say, “There are all of these things that I wish I could work on, and I&amp;rsquo;m not going to do all of them. This year I’ll pick one or two to work on, and I&amp;rsquo;m going to deliberately ignore the other for a while, even though I think they’re major problems.”&lt;/p>
&lt;p>&lt;em>&lt;strong>What about a piece of advice for someone who has just started as a Staff engineer?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>One thing is that I&amp;rsquo;m a huge believer in the primacy of Conway&amp;rsquo;s Law to guide organizations’ technical architecture.&lt;/p>
&lt;p>Another is to build and invest in your relationships with engineering leadership: the managers, the directors, and the vice-presidents. I think some of this might be specific to organizational structure, but certainly at Stripe those people often had a lot of implicit power because they were the obvious people to go to with questions. They also have a lot of influence over staffing and prioritization.&lt;/p>
&lt;p>It’s important to have good relationships with them both so that you can influence them with your ideas, but also so that you can understand what problems they&amp;rsquo;re seeing. You need to know what their incentives are, and what problems they perceive that you don&amp;rsquo;t perceive. Having better alignment with leadership makes a lot of things much easier.&lt;/p>
&lt;p>Something else that has been quite valuable for me is estimation. I find it really valuable to be able to look at a system and have the habit of estimating how many gigabytes-per-second is this thing, or how much storage would this data take? You don’t have to get it perfect, getting the nearest power of ten is usually enough to be useful.&lt;/p>
&lt;p>&lt;em>&lt;strong>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I considered it but not very seriously. I have a pretty good understanding of myself that, at least for now, I wouldn&amp;rsquo;t really enjoy that work. I think I’d find all the interactions not a sustainable way to spend my time. I occasionally wish I was more interested in it, because I do perceive it as a way to get a lot of power, but I fortunately have enough self awareness to believe, I think correctly, that I wouldn&amp;rsquo;t enjoy it and therefore wouldn&amp;rsquo;t be good at it.&lt;/p>
&lt;p>&lt;em>&lt;strong>What are some resources (books, blogs, people, etc) you’ve learned from?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I get that question decently often because I have an unusually broad breadth of general knowledge, and I don&amp;rsquo;t have a good answer for where it came from. I&amp;rsquo;m pretty voraciously curious about computing, software and architecture. I read lots of different things, and I spend more time reading links on software engineering Twitter than perhaps is healthy.&lt;/p>
&lt;p>It’s also been really valuable for me to cultivate a good personal network of other senior engineers. I chat with them informally about whatever it is that we&amp;rsquo;re working on and thinking about. When you have personal connections, you can get very unvarnished views of the problems people are seeing and the solutions they&amp;rsquo;re considering.&lt;/p>
&lt;p>I’ve mostly bootstrapped this through the friends-of-friends networks of people I&amp;rsquo;ve known professionally or going all the way back to when I was in school. It&amp;rsquo;s not something I sought out post facto.&lt;/p>
&lt;p>I read the occasional technical paper, but it&amp;rsquo;s not something I do actively. It’s mostly when it&amp;rsquo;s referenced by someone or comes up in some other context. It&amp;rsquo;s definitely not something I make any effort to keep track of systematically or to review the recent publications. I do think that having a decent handle on the quote unquote foundational literature is really handy.&lt;/p></description></item><item><title>Ritu Vincent - Staff Engineer at Dropbox</title><link>https://staffeng.com/stories/ritu-vincent/</link><pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/ritu-vincent/</guid><description>&lt;p>&lt;em>This story was recorded in March, 2020. Learn more about Ritu on her &lt;a href="https://www.linkedin.com/in/rituvincent/">Linkedin&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;strong>Tell us a little about your current role: your title, the company you work at, and generally what sort of work does your team do?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I’m a Staff Engineer at Dropbox. I actually was a Staff Engineer at Dropbox, left to join a different startup, and then recently came back to Dropbox just a few months ago. I came back because a really interesting opportunity opened up within Dropbox to launch an internal incubator. We’re working to foster innovation within the company. Dropbox has become a strong brand in the file sync space, but there’s beginning to be a lot of competition there now, so we need to do more and branch out into new products. The incubator works directly with the CEO, and is a very small team.&lt;/p>
&lt;p>I’d been at Dropbox long enough that I built really close bonds with a lot of people here, so when folks pitched me this role it sounded really fun. I’d also been a manager for a couple of years and was getting a little itchy to code again. Putting those together led me back to Dropbox.&lt;/p>
&lt;p>There are two parts to the incubator.&lt;/p>
&lt;p>The first is a more classic incubator where engineers across the company can pitch ideas and get funding to join the program, and try to show product-market fit or other forms of progress to continue getting funded every few months. The goal is for successful projects to graduate into their own lines of business, although we’re still early.&lt;/p>
&lt;p>The second part is engineers who are permanently part of the incubator, and are always generating ideas from within the incubator and operating with a lot of autonomy. I’m one of the two engineers on that permanent “scouting” team, and we’re planning on growing over the next year. It’s very different from anything I’ve done before, which is why I wanted to sign up for it. It’s a huge paradigm shift for me. Honestly, the first few months have been a combination of really fun and really frustrating because it’s harder to measure obvious impact when your primary goal is to very quickly try out a ton of new ideas, many of which will not go anywhere. I’ve had to learn to think of impact in longer timescales - not in terms of what I’m shipping today, but what I could influence the company to ship in the future.&lt;/p>
&lt;p>&lt;em>&lt;strong>What does a Staff-plus engineer do at your company?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I&amp;rsquo;d say there are two different profiles of Staff Engineer at Dropbox. One is a tech lead who does a lot of coordination, designs work for their team, and spends time driving projects. The other is more of a specialist.&lt;/p>
&lt;p>The tech lead was definitely my profile when I initially became Staff where I took a team of about eight engineers and drove an eighteen month project. That project had a lot of dependencies, a lot of gnarly parts. I had to control the communication around the project, as well as figure out how to allocate pieces of the project to the team in a way that both helped them grow and got the project done.&lt;/p>
&lt;p>The specialist is deeply specialized in a particular area, for example &lt;a href="https://en.wikipedia.org/wiki/Guido_van_Rossum">Guido van Rossum&lt;/a>, the creator of Python. Specialists would take on really complex projects and execute it themselves, often projects that no one else could take on effectively. There were fewer specialists than tech leads.&lt;/p>
&lt;p>&lt;em>&lt;strong>Were the specialists predominantly external hires?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>There were some specialists that came in from industry, like Guido and a lot of very experienced folks on the ML team, but a lot of specialists ended up being homegrown. That might be related to rolling out titles relatively late at Dropbox, which gave folks longer to develop deep context in our technology.&lt;/p>
&lt;p>&lt;em>&lt;strong>How do you spend your time day-to-day?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>In my current role within the incubator I’m spending all day prototyping, but in my previous tech lead role I did a lot of different things.&lt;/p>
&lt;p>I was coding, but I wasn’t coding very much, maybe 20% of my time. I was the tech lead for the desktop client area, and spent a lot of time coordinating and providing guidance on projects. I also spent a lot of time partnering with recruiting, which was something that I did because I was interested in it, not because it was required.&lt;/p>
&lt;p>For example, I worked on designing specialty interview loops, moderating debriefs and candidate screening. I also did a lot of work on diversity initiatives. That’s one of the reasons that I’ve tried engineering management multiple times during my career, because I enjoy participating in organizational growth.&lt;/p>
&lt;p>&lt;em>&lt;strong>Where do you feel most impactful as a Staff-plus engineer?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>One of the things that I&amp;rsquo;m really proud of having worked on was a big revamp of our engineering levels. Back in 2017, I was one of the few individual contributors selected to work on an engineer levels refresh, most everyone else was a director or manager. I’m proud because the new ladder impacted every person at Dropbox working in Engineering, Product and Design.&lt;/p>
&lt;p>It was also just really interesting to think deeply about how company growth changed roles and responsibilities. We were starting to bring in people from a lot of different backgrounds, and we wanted to be able to reward everyone in a healthy way. That was very different from my normal day-to-day responsibilities and pushed me outside of my comfort zone pretty significantly.&lt;/p>
&lt;p>I’m also proud of my Staff Project, which was very technically complex. That project also gave me a chance to help a lot of people on the team grow. Years later, I’ve had engineers who left the company email me and say how much more confident they are or how much they learned because of that project.&lt;/p>
&lt;p>It was also on that project where my manager helped me understand that my first impulse as a tech lead didn’t scale. Initially I was thinking, “I’ll break it into twenty pieces, assign out eighteen pieces, and keep the two hardest for myself,” and my manager pushed me to delegate the hard pieces to the team to stretch and develop them.&lt;/p>
&lt;p>&lt;em>&lt;strong>Do you spend time advocating for technology, practice, process or architectural change?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>As a tech lead I spent a lot of time advocating for change. I would jump into a lot of different architecture and technical discussions, even in areas that weren’t directly within my area of expertise, because people seemed to trust my intuition. I know tons of engineers who have amazing technical intuition and don’t have the Staff Engineer title, but the title does formalize having that intuition.&lt;/p>
&lt;p>I do prefer for the team that’s going to own a project to make the final decisions about it. In cases where I have a very clear “right decision” in my head, I’ll try to lead the team towards that decision rather than going in and saying “this is the right decision.”&lt;/p>
&lt;p>&lt;em>&lt;strong>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I definitely think of myself as a sponsor. Execution is one of the most rewarding parts of my job&amp;ndash;I love building stuff&amp;ndash;but I’ve always loved helping people grow. I feel really proud when I see somebody who I informally mentored or helped on a project go on to do something great.&lt;/p>
&lt;p>As a Staff Engineer, and especially as a woman who is a Staff Engineer, I feel like a lot of people look up to me. There seem to be a lot more role models on the manager career path, so I try to make being a role model part of my responsibilities, instead of just keeping my head down coding. I mean, I could just keep my head down coding and that would be great, but I want to help other people, especially people with imposter syndrome.&lt;/p>
&lt;p>I often get people coming to me and saying, “I don’t know how to make the next step.” or “I don’t know how to become a staff engineer, so I’m going to go be a manager instead.” I want to try to help them figure out their path. As a Staff Engineer, I think being visible and available for people to ask these sorts of questions is an important part of the role.&lt;/p>
&lt;p>&lt;em>&lt;strong>What’s something you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done earlier in your career?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>There wasn’t anything I wasn’t able to do without the title, but the title did give me confidence. In addition to the title, the other thing that gave me confidence was realizing that everyone else is also struggling with imposter syndrome. The latter I learned in a pivotal conversation with someone who I thought was the most confident engineer I’d ever worked with, and when I talked with him about it he said, “I question every single thing I do. I go home and agonize over what I said earlier that day, and whether it was silly.”&lt;/p>
&lt;p>It was really that conversation in combination with the title that pushed me to believe in myself as a Staff Engineer. Together they gave me the confidence to ask for the harder projects, or to ask my manager to give me more projects to work on.&lt;/p>
&lt;p>&lt;em>&lt;strong>What was your process of getting promoted to Staff engineer at Dropbox?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>They rolled out external titles a while after I joined Dropbox. In the first review season with titles, they gave the Staff title to a very small number of engineers. They were really still calibrating the titles at that point. It was in the second review season that I got my Staff title.&lt;/p>
&lt;p>By the second season, I’d been a Tech Lead for a while and my manager and I both felt that I had clearly been executing at the Staff level. We did go over the new career level definitions to identify any gaps before the review cycle, but overall it went pretty smoothly.&lt;/p>
&lt;p>&lt;em>&lt;strong>What two or three factors were most important in you reaching Staff?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>One of the big factors for me was definitely visibility. Part of that came from doing so many things outside of normal engineering responsibilities.&lt;/p>
&lt;p>For example, I helped recruiting with running the intern program one summer. During the program I worked with a ton of intern mentors across different teams, and since Dropbox tended to have very large intern classes, that ended up meaning that I gained visibility across pretty much the entire company. The hiring work helped too. If you’re moderating dozens of hiring debriefs every month, and driving hiring and calibration conversations, then you’ll get to interact with everyone in engineering. I also helped with onboarding, giving a core engineering presentation to incoming new hires.&lt;/p>
&lt;p>Having a sponsor was also definitely important. My manager and I had a fantastic relationship, and I also had a great relationship with my skip-level manager. I think that played a big part as well.&lt;/p>
&lt;p>&lt;em>&lt;strong>Was that work, which some companies would call “glue work,” directly valued?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>This work was highly valued by leadership at Dropbox. Leadership and many of the very senior engineers were heavily involved in these efforts, especially recruiting, and it was not considered glue work. That being said, it would not have gotten me to Staff on its own. It was a question of finding a good balance between having cultural impact and having something technically strong to showcase.&lt;/p>
&lt;p>&lt;em>&lt;strong>There is a popular idea that becoming a Staff engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>There isn’t an explicit expectation, nor is it listed anywhere as a formal requirement, but it is understood that you’ll complete a Staff Project to get promoted. I can’t think of any Staff promotion that didn’t include a really strong project, typically a multi-person project where the engineer was the Tech Lead.&lt;/p>
&lt;p>I definitely had a Staff Project. Back in the day, Dropbox was initially a consumer product that people downloaded and installed on their machines. When we launched Dropbox for Business there was a request for both your personal and work Dropbox accounts to work simultaneously, including being able to switch across them without needing to log out and log back in.&lt;/p>
&lt;p>The initial implementation was written under immense time pressure, and it ran multiple Dropbox processes. One for your personal account and another for business. My Staff project was to make it so a single Dropbox process could run with multiple users logged in. The hard part was that the project stretched from the kernel all the way to the user interface. I had to understand every single layer of the Dropbox system.&lt;/p>
&lt;p>Initially we thought it would take six months, and it ended up taking eighteen months. It took up most of the Desktop Client team’s resources for quite a while.&lt;/p>
&lt;p>&lt;em>&lt;strong>Would you share a piece of advice on reaching Staff that was particularly helpful for you?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Early in my career, my instincts were to ask for projects that I felt I would be able to execute well on instead of projects with more ambiguity that would push me to grow. The advice I got was to push myself out of what I was comfortable with, and to ask for the hard projects on the team. To reach Staff Engineer, you have to know and do more than what you currently know. It’s important to always push beyond what you’re doing and not be scared of asking for things you think are too hard for you.&lt;/p>
&lt;p>This is tied into imposter syndrome, where you might not want to try anything until you’re absolutely sure you’ll excel at it. But you have to get comfortable with the fact that you might crash and burn. That’s okay, you’ve got to try it.&lt;/p>
&lt;p>&lt;em>&lt;strong>What about a piece of advice for someone who has just started as a Staff engineer?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>People frequently come to me and ask, “What should I do next to reach Staff?” One of the things that I tell them is to be super open and honest with your manager about what you want from your career. A mistake I made early on in my one-on-ones was telling my manager what I thought they wanted to hear, instead of what I actually felt.&lt;/p>
&lt;p>They’d ask me if I was interested in a piece of work, and I’d wonder why they were asking, did they &lt;em>want&lt;/em> me to take the work? So I’d say I was interested even if I wasn’t. Or they’d ask me how a project was going, and it might be going horribly, but I’d tell them it was going fine to avoid disappointing them, instead of saying I needed help.&lt;/p>
&lt;p>Somewhere along the way I realized that your manager is really on your team. They’re looking for a way to make you grow, be productive, be happy and become the best engineer you can be. The way to have an effective relationship with your manager, including having them sponsor you, is to be super honest and open with them.&lt;/p>
&lt;p>This became particularly obvious to me when I became a manager myself, because I &lt;em>wanted&lt;/em> everyone on my team to become a Staff Engineer and to get promoted. I wanted to find reasons to promote them, and worked with them on that.&lt;/p>
&lt;p>&lt;em>&lt;strong>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I do &lt;a href="https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/">pendulum&lt;/a> a decent amount, because I’m interested in so many things on both sides of the career ladder. I’m interested in growing people, I really like working with recruiting, I’m one of those engineers that actually enjoy interviewing, I like understanding how teams grow. But I also really like writing code, and after I spend some time managing I want to get back into the code and hack around a little bit.&lt;/p>
&lt;p>Once I started mentoring and managing I definitely found myself thinking about career growth very differently. The pendulum has helped me see a lot of different perspectives. As a manager you have very explicit responsibilities for things like headcount and performance reviews. Staff engineer responsibilities are really fuzzy and differ across companies. That ambiguity around Staff roles leads many folks to make the lateral switch to management who would have been happier staying as an engineer. That’s why it’s so valuable to get more information on the Staff role out there for people to read.&lt;/p>
&lt;p>&lt;em>&lt;strong>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I read a lot, but my reading is very recreational. What’s been most impactful for me is having a lot of people who I think of as mentors, usually friends, former managers and folks that I’ve worked with. I have a decent number of recurring monthly lunches, coffee chats and dinners with people who’ve worked with me in the past, know me, and I trust. It’s those conversations about career challenges and growth that have gotten me to where I am in my career.&lt;/p></description></item><item><title>Joy Ebertz - Senior Staff Software Engineer at Split</title><link>https://staffeng.com/stories/joy-ebertz/</link><pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/joy-ebertz/</guid><description>&lt;p>&lt;em>Story recorded in March, 2020. Learn more about Joy on her &lt;a href="https://medium.com/@jkebertz">blog&lt;/a>, &lt;a href="https://twitter.com/jkebertz">Twitter&lt;/a>, and &lt;a href="https://www.linkedin.com/in/joyebertz/">Linkedin&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;strong>Tell us a little about your current role: your title, the company you work at, and generally what sort of work does your team do?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I’m a Senior Staff Software Engineer at Split.io, working on the backend of what we call the COE team. Split is a feature flagging and experimentation framework. We focus on enabling our customers to separate deployment and release in CI/CD and also enabling A/B testing. My team is responsible for most of the main business logic of our web application, including everything from data storage to the APIs. There is a separate team that focuses on the experimentation side, including all of the detailed statistics that goes into that, so we’re able to focus more on the main platform.&lt;/p>
&lt;p>&lt;em>&lt;strong>What does a Staff-plus engineer do at Split? How do you spend your time?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I’m still somewhat new, so I’m still working to define my role, which is part of the beauty of more senior roles. Today, I’m still ramping up, so I’m probably spending around half to three quarters of my time on tasks for my specific scrum team, just like any other engineer here. With the rest of my time, I’m participating in conversations and working with other engineers to define a lot of our longer term architecture and strategy, including our future API and platform strategy, how we want to develop our authorization framework, breaking up and decoupling our builds and more. I’ve recently also taken over leadership of our backend chapter and now co-lead it with another engineer and we’re working to put together a backend technical vision, prioritize tech projects and lead standards discussions. If that wasn’t enough, I also continue to write regularly on my blog and speak at conferences.&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>Writing from Joy Ebertz on Staff Engineer Roles&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://code.likeagirl.io/no-lone-wolves-what-it-really-takes-to-get-to-the-top-of-engineering-d84b5a7af882">No Lone Wolves: What It Really Takes to Get to the Top of Engineering&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/box-tech-blog/what-a-senior-staff-software-engineer-actually-does-f3fc140d5f33">What a Senior Staff Software Engineer Actually Does, Part 1: The Role and My Tasks&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/box-tech-blog/what-a-senior-staff-software-engineer-actually-does-d55308fcdd41">What a Senior Staff Software Engineer Actually Does, Part 2: The Mindset and Focus of the Role&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://code.likeagirl.io/finding-your-perfect-job-82f551294cb9">Finding Your Perfect Job&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;em>&lt;strong>Where do you feel most impactful as a Staff-plus engineer? What’s something you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done in earlier roles?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I feel most impactful when I can facilitate setting a technical vision for an area and get people moving toward that vision. I think we would all agree that we want our code to be better architected than it is or improved in some way. However, I’ve found that often people have some vague sense of wanting better without having a clear idea of what that thing they want is. I like to help the group decide on a shared understanding of where exactly they’re trying to get (it’s actually okay if we never get there) and come up with a general game plan of how to get there. This way we’re all marching in the same direction. Having a clear idea of what we want allows us to work with Product to get it prioritized. Even if we never get the whole thing prioritized, knowing how to get there, allows us to slowly make changes that will lead us in that direction. For example, if I’m touching a file anyway and can make a few tweaks that brings me closer to that vision, I will. Without knowing that vision, those tweaks would never happen. The vision alone isn’t enough, we need everyone to understand that vision and internalize it. Part of the power of those small changes I just mentioned is if everyone is making them as a part of their normal coding. Suddenly we have everyone working toward a common goal.&lt;/p>
&lt;p>I think the biggest thing that differs between now and when I was more junior is my sense of ownership and responsibility. I’ve always been willing to push back or to drive for improvement. However, when I was more junior, I would often just assume that something was someone else’s problem. Now, it’s all my problem. I may choose to not prioritize something because I think that it’s less important than something else, or I may choose to delegate or pass a problem off to someone else, but I still see it as my problem. I no longer ever assume that someone else will handle something. I’m still a big believer in picking my battles, I won’t work on everything - that’s too much. I also, however, won’t assume that anyone else will either, so if it’s worth getting done, it’s up to me to either do it or to pass it on to someone else.&lt;/p>
&lt;p>&lt;em>&lt;strong>Do you spend time advocating for technology, practice, process or architectural change? What’s something you’ve advocated for? Can you share a story of influencing your organization?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Yes. All of those. In my current role, I would say this is a huge part of my job. While, as an engineer, I am also contributing on a scrum team, I would say a lot of my job is to keep an eye out for pitfalls I’ve seen before or larger patterns of problems. I see my job as making all of engineering more efficient - be that through technology, through architecture or through process. However, I should never be making changes for the sake of changes. I’ve advocated for a number of things over the years, from rewriting our email notification system to rethinking testing to reworking several authorization frameworks.&lt;/p>
&lt;p>For some things, like the email overhaul, I didn’t do anything big or grand, I just reminded Product every time they wanted to add a notification that our system was ready to fall over and that we really couldn’t add any more until we fixed it. As I pushed back, engineers around me also realized that they could push back. At first Product mostly opted to not add more notifications, but eventually they decided to fix the system. In this case, it was mostly a matter of explaining to them the risks of the system and sticking to what I thought was the right course of action in terms of keeping our systems running.&lt;/p>
&lt;p>For other things, such as the authorization frameworks, I was tasked with finding a solution. In these cases, even when people want a new/better solution, you still need to convince them that you’ve picked the right thing. With incredibly complex systems, people will often think they’ve found things you’ve forgotten about (and maybe they did), so it’s really important to seek feedback early and often and to carefully record and communicate both what you chose and why but also what else you considered and why you didn’t chose something else. People need to feel heard and they need to know that you fully considered their concerns. They also want to understand what your thought process was, but even more important, they want to understand that you did thorough research and didn’t just pick the first thing to come along. In fact, when I’m vetting someone else’s design, this is one of the things I really look for - what else was considered?&lt;/p>
&lt;p>&lt;em>&lt;strong>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Yes. As soon as you get to any sort of more senior role, this is always a part of your role assuming you chose to take advantage of it. Since I’m still new at Split, I haven’t had much of a chance to here, but I’m positive that will change. Sometimes sponsoring is the big stuff - recommending people to lead projects or manage a team, but a lot of sponsoring is smaller things - encouraging someone who is a little unsure of themselves, showing off their accomplishments to more senior people they wouldn’t normally have access to, finding ways to delegate your work to people who could get a growth opportunity from doing it. I think it’s possible to be a senior staff engineer without sponsoring, but I’m not sure it’s possible to be a great senior staff engineer without sponsoring. Sponsoring is one of the most powerful ways we can grow those around us and I would say that growing others is one of the most important aspects of our role.&lt;/p>
&lt;p>&lt;em>&lt;strong>You first got the title Staff engineer at Box. What was the process of getting promoted to Staff?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>At Box, we submit a promotion case that outlines how, based on the engineering rubric, we’ve already been operating at the next level. Our managers also submit their recommendation and the two go to a promotion committee made up of managers and ICs (at least one level above the level we’re applying to). They review the case, call in the manager to answer any questions and then make a recommendation. Our VP was able to change any of the decisions (although to my knowledge this never happened). If the answer was no, feedback was given as to why and you could repeal the decision with additional information or try again the following time. Appeals did sometimes go through, so if you disagreed with the feedback, it was worth trying. I liked this process because it allowed the person with the most context on our accomplishments be the one to write them up and it allowed you to go up for a promotion even if your manager didn’t agree. On the other hand, I didn’t like the process because it subtly discriminates against those with a little less self confidence and those who struggle with self-promotion. It also resulted in managers taking a little less initiative in starting off the promotion process (letting engineers come to them saying they wanted the promotion rather than suggesting it).&lt;/p>
&lt;p>&lt;em>&lt;strong>What two or three factors were most important in you reaching Staff? How have the companies you joined, your location, or your education impacted your path?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I would say that my location probably hasn’t mattered too much. Education helped me a lot in terms of getting interviews when I was more junior, but a lot less so (at least directly) since then. I would say that the three biggest factors for me were company, visibility and opportunities.&lt;/p>
&lt;p>I think it’s possible to advance at a lot of companies. However, I found that being at a fast-growing startup really helped me out. When I joined Box, engineering was around 30 people and when I left, 8 years later, it was at a few hundred, but much of that growth was in the first half. This allowed me to come into a smaller engineering environment where it was possible to really get to know the environment, people and code. Then, because we were growing, there were lots of leadership opportunities and technical challenges for those motivated and willing to take them. Because we grew, the opportunities grew with me. At the same time, there were also enough people around me for me to learn from (I was previously at a really tiny startup - 2-4 people, where that really wasn’t available).&lt;/p>
&lt;p>By visibility, I just mean finding some way to be known. I’ve always worked onsite, which I find makes this a little easier, but I think this is possible even if you are remote (although possibly a bit more challenging). If you do really great work, but no one knows about it, when it comes time for promotion, you’ll be passed over. Furthermore, as you become more senior, part of your job becomes mentoring and teaching others and helping your company to create a tech brand - all of these are by definition, visible. Visibility can take a number of forms, but for me I would say that a few things contributed. I was very active in our Slack discussion forums, answering questions for people wherever I could. I also did a lot of blogging and some speaking both internally and externally. Finally, I was active in our women in tech group, which allowed me to form connections with various people throughout engineering.&lt;/p>
&lt;p>Finally, opportunities. These can look vastly different as well. For me there was one in particular that was really helpful - I joined our API standards committee. I was actually a bit hesitant to do so at first because I didn’t think I was an expert at APIs, but after reading a few (short) books on REST, along with my work on various APIs previously, I had a pretty solid grasp. The powerful thing about this group is that it cross-cut many teams in engineering, which gave me a chance to work with a lot of different engineers (and gave me that visibility I just mentioned). It also allowed me to have something clear to point to in terms of influencing others and being someone who fights for quality. Our projects there had broad impact across engineering and allowed me to think about something (our API, in this case) holistically.&lt;/p>
&lt;p>&lt;em>&lt;strong>There is a popular idea that becoming a Staff engineer requires completing a “Staff Project.” Did you have a Staff Project, and if so what was it?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I actually didn’t really have a Staff Project. At the time that I was promoted, I had transitioned back from management around 6 months prior, so I referenced some of my time managing for leadership. At the time, I was leading (from the technical side) the very small Box team on a cross-company collaboration project, which involved understanding another company’s development team’s requirements and figuring out how to build as little as possible while meeting their needs. I was a member of an engineering-wide API working group responsible for establishing and maintaining our API standards and I had several side projects going on. I would say that all of these contributed to various parts of my promotion and together helped me establish that I could demonstrate all aspects of what they expected.&lt;/p>
&lt;p>&lt;em>&lt;strong>Can you remember any piece of advice on reaching Staff that was particularly helpful for you? Is there an easier path to Staff that you could have taken?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>One piece of advice I got at some point was to amplify my strengths. All of us have strengths and weaknesses and we spend a lot of time talking about ‘areas of improvement.’ It can be easy to feel like the best way to advance is to eliminate all of those. However, it can require a lot of work and energy to barely move the needle if it’s truly an area we’re weak in. Obviously, you still want to make sure you don’t have any truly bad areas, but assuming you’ve gotten that, instead focus on amplifying your strengths. How can you turn something you’re good at into your superpower? The other thing to think about is how can you use something you’re good at to compensate for something you’re weak at? For example, I’m a giant introvert and don’t particularly like mingling with people I don’t know. I’m terrible at networking with strangers. However, I’m good at writing and enjoy doing it. I’ve used writing on my public blog to meet people I wouldn’t otherwise and get exposure more broadly. In fact, I’m sure I’ve gotten far more from that than I would have by going to many, many meetups.&lt;/p>
&lt;p>The other more tactical thing that comes to mind is directly related to the process we have at Box of writing a promotion case. A few things were suggested to me - first to write the promotion case well before I was sure I was ready for the promotion. This allows you to see where there might be gaps and can give you very tangible things to work on. (Or maybe you’ll be surprised and realize that you’re ready for promotion before you thought you were). The second is to be very aware of where those gaps are. When a promotion committee is reading through promotion cases, all of the cases are going to be very positive. No one says anything negative when they go up for promotion. So instead of looking for negative things, that committee is going to be looking for what isn’t said. Where are the blank spots? What seems to be avoided or talked over. Take a look at your case from that light - what things might be missing? What things are you brushing over? Be sure to work on those. Finally, tell your story.&lt;/p>
&lt;p>Our promotion cases had templates with pointed questions, but, especially at the higher levels, everyone isn’t the same, nor do we want them to be. Instead of just answering the questions, think first about what your strengths are. What are your superpowers? What is your story? Then figure out how to fit that story into the prompts. You’ll have a much better overall case if you include your best strengths in it.&lt;/p>
&lt;p>It’s possible that if I hadn’t taken a meander through management, I would have gotten to Staff sooner. That said, I don’t regret doing it and I learned a lot about how people think, how organizations are run and how larger projects are prioritized. All of these have continued to help me do my job on the IC track and likely helped me further get promoted to Senior Staff. While I do think it’s distinctly possible that it slowed down when I got to Staff, I’m actually less sure for the next level - I think there’s a real chance I would have hung out at Staff longer without it. All of this is to say that even though I didn’t take the most direct route, I still learned a lot that has helped me out long term.&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>More of Joy's writing&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/box-tech-blog/mitigating-risk-when-engineering-success-is-silent-6865f7aecd3f">Mitigating Risk: When Engineering Success Is Silent&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://austinstartups.com/the-evolution-of-testing-with-your-codebase-b1f521cc283c">The Evolution of Testing With Your Codebase&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://code.likeagirl.io/effective-software-testing-test-types-and-usages-52b19c62c213">Effective Software Testing: Test Types and Usages&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@jkebertz/6-secrets-to-effectively-working-with-a-distributed-team-3deecfaedc6c">6 Secrets to Effectively Working with a Distributed Team&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;em>&lt;strong>What about a piece of advice for someone who has just started as a Staff engineer?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>The more senior you get, the less your job is about code. Sure, unlike a people manager, you still have a very technical slant and even through principal, you’ll likely be doing at least some coding. However, the higher you get, the more your job becomes about mentoring and growing the people around you (and more broadly), building your team through building your company’s public tech brand, noticing larger technical trends that can be improved upon or corrected, helping to set the tech vision for your team or the company and advocating for resourcing for tech debt projects. It becomes much more about seeing broader things and getting others on board. Suddenly, communication, leadership and persuasion are even more important than they were previously.&lt;/p>
&lt;p>&lt;em>&lt;strong>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I actually managed for about a year and a half in the middle of my time at Box and found that I hated it (you can find more about that in my &lt;a href="https://code.likeagirl.io/why-i-left-management-the-engineering-technical-track-vs-management-track-abef5b1d914d">blog post on that topic&lt;/a>). That said, I found that there is actually a lot of overlap between management and staff+ roles in most companies. Both roles require mentoring others, leading and the ability to persuade people. They require thinking bigger and more attention to longer term - both in terms of technologies and people. While I don’t plan to go back to management, I did &lt;a href="https://medium.com/box-tech-blog/no-regrets-my-time-in-management-wasnt-wasted-140b40ded0e6">learn a lot during my time managing&lt;/a> and the experience has actually helped me as I’ve advanced to Staff and beyond.&lt;/p>
&lt;p>&lt;em>&lt;strong>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I don’t tend to follow any particular person, but instead learn from and find inspiration from almost everyone around me. I’ll list a few here, but in all honesty, I would say that I’ve learned from countless different people at all levels (including many more junior than myself).&lt;/p>
&lt;p>I had a manager who every time I came to him with a problem, he would always turn it around on me and ask me what I thought I should do. This got to the point where I could hear him telling me to give feedback to someone directly or telling me to figure out how to fix something without me ever having to talk to him. He really taught me that while, as a manager, he was willing to support me, I would learn the most and be the best version of myself if I could do it on my own. He taught me to take responsibility for everything.&lt;/p>
&lt;p>As a counterpoint, I would also mention a principal engineer I worked with, who later taught me that I didn’t need to try to do everything myself. After I learned to take responsibility, I started to forget that I wasn’t alone. Of course I had heard people talk about delegation, but it’s one thing to hear about it or think about it in terms of sprint tasks, but it&amp;rsquo;s another to delegate getting something prioritized or delegate figuring out tech vision for a team or delegate following up on an initiative.&lt;/p>
&lt;p>There was another co-worker that I worked with who would drive me completely bonkers sometimes because her approach to solving problems was so different from mine. She would ask for clarification when I thought it was obvious and she would ask for detailed explanations when I thought everyone was on the same page. However, she’s also one of the smartest engineers I’ve ever worked with and working with her made me realize that not only can different styles be just as good, but that sometimes putting together two clashing styles can result in much better results than either of us would have gotten on our own. She found holes in things I thought were obvious and while she drove me nuts sometimes, we got some amazing things accomplished and I am better for it.&lt;/p></description></item><item><title>Dan Na - Staff Engineer and Team Lead at Squarespace</title><link>https://staffeng.com/stories/dan-na/</link><pubDate>Thu, 26 Mar 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/dan-na/</guid><description>&lt;p>&lt;em>Story recorded in March, 2020. Learn more about Dan on his &lt;a href="https://blog.danielna.com/">blog&lt;/a>, &lt;a href="https://twitter.com/dxna">Twitter&lt;/a>, and &lt;a href="https://www.linkedin.com/in/danielna/">Linkedin&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;strong>Tell us a little about your current role: your title, the company you work at, and generally what sort of work does your team do?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I&amp;rsquo;m a Staff Engineer at Squarespace. Squarespace is the leading all-in-one platform to build a beautiful online presence: websites, domains, online stores, marketing tools, scheduling appointments, etc. I also operate as the Team Lead of the Internationalization Platform team, which is responsible for building and maintaining the foundational primitives of internationalization across Squarespace products. Engineers use the tools and libraries we own to create localized products.&lt;/p>
&lt;p>&lt;em>&lt;strong>What does a Staff-plus engineer do at Squarespace? How do you spend your time?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I think in practice the day-to-day responsibilities of Staff-plus engineers vary, depending on both your precise role and how your responsibilities map in the organization.&lt;/p>
&lt;p>My position as a Team Lead means I&amp;rsquo;m fully accountable for the output of my team, both from a business and technical perspective. On the business side, I spend a lot of time meeting with different teams and functions across the company. These stakeholders include product, strategy, customer operations, etc. I want to ensure that I have as many inputs as possible to validate that my team&amp;rsquo;s roadmap reflects our company&amp;rsquo;s most important priorities.&lt;/p>
&lt;p>On the technical side, I often find myself reviewing technical documents or scoping work in front of a whiteboard for my team&amp;rsquo;s work in flight. My role has evolved to less hands on coding work and more asking probing questions about architectural decisions and deployment strategies. One irony is that as a Staff Engineer I actually code significantly less than I did as a non-Staff. By no means is that universally true across the role, but in the context of my team, closing vim and operating in more of a strategic/oversight role was the highest leverage use of my time. I’m lucky in that my team is already composed of awesome engineers so my specific code contributions are less material to our output.&lt;/p>
&lt;p>But many Staff-plus engineers at Squarespace are not Team Leads and code a lot. Others focus on engineering process and culture. In general I&amp;rsquo;d say Staff-plus Engineer responsibilities are highly contextual.&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>Some of Dan's writing on engineering leadership&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.danielna.com/boogeyman-problems/">Boogeyman Problems&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.danielna.com/questionstorms/">Questionstorms&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.danielna.com/understanding-project-management-will-improve-your-developer-job/">Understanding Project Management Will Improve Your Developer Job&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.danielna.com/my-management-philosophy/">My Management Philosophy&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;em>&lt;strong>Where do you feel most impactful as a Staff-plus engineer? What’s something you’ve done as a Staff-plus engineer that you weren’t able to or wouldn’t have done in earlier roles?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I have a seat at the table at higher level engineering discussions that occur at a level above individual projects and teams. We have recurring staff engineering meetings where we discuss problems that span teams which are both technical and non-technical in nature. As a hypothetical example, I&amp;rsquo;d feel comfortable surfacing what I perceive as shortcomings in the engineering onboarding process in this type of meeting. It can be hard to attribute a topic like engineering onboarding to a specific team but a lack of formal ownership doesn&amp;rsquo;t make it less important. I think a key responsibility of Staff-plus is a willingness to own all of the things that contribute to (or block) engineering output, which includes both technical strategy and culture.&lt;/p>
&lt;p>Regarding something that’s changed, on an everyday basis my title affords a high level of credibility at the outset of conversations. While I&amp;rsquo;m not advocating for a culture that values titles over ideas, I&amp;rsquo;d be lying if I said it didn&amp;rsquo;t help me escalate or push through issues that I previously might&amp;rsquo;ve had a harder time getting through.&lt;/p>
&lt;p>&lt;em>&lt;strong>Do you spend time advocating for technology, practice, process or architectural change? Can you share a story of influencing your organization?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I don&amp;rsquo;t really think about advocacy in terms of categories. I mostly just want our engineering team and product to be the best it can be and address things that experience tells me I can help change.&lt;/p>
&lt;p>Some examples:&lt;/p>
&lt;ul>
&lt;li>When I first joined the company we were in the midst of enormous employee growth, and I noticed it felt hard to get to know anyone on other teams unless you happened to work on a project together. As a result I created a slack room — #connect-engineering — that uses a bot to randomly pair two people in engineering for coffee every two weeks. That room has been pairing people for coffee for over two years now.&lt;/li>
&lt;li>I knew based on personal experience that engineering leadership roles can feel isolating and talking to coworkers I could hear some of those feelings of loneliness. As a result some peers and I &lt;a href="https://blog.danielna.com/starting-an-engineering-management-book-club/">created an unofficial Engineering Management Book Club&lt;/a>, open to Team Leads and Engineering Managers. There are now two self-organized book clubs with ~10 participants each, providing a safe space for both new and experienced leaders to support each other. The feedback about book club has been enormously positive.&lt;/li>
&lt;/ul>
&lt;p>To be fair, neither of these examples required a Staff-plus title. But I do think part of being an effective Staff-plus engineer is caring about and addressing cultural gaps as much as technical gaps.&lt;/p>
&lt;p>&lt;em>&lt;strong>You first got the title Staff engineer at Squarespace. What was the process of getting promoted to Staff?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I was hired as a Senior Software Engineer II (one level below Staff). I was fortunate to land on a team working on a high impact project that I was able to contribute to immediately. The hardest parts about the project concerned a problem space I was already familiar with — wide, sweeping changes across codebases — and I proposed, prototyped and eventually shipped an alternative architecture that I felt would better position the company for success. That became our frontend translation system, which I wrote about on our engineering blog: &lt;a href="https://engineering.squarespace.com/blog/2018/building-a-system-for-front-end-translations">Building a System for Frontend Translations&lt;/a>.&lt;/p>
&lt;p>I also owned the communication and education effort around the new translation system, presenting the architecture at internal meetings and sending relevant emails about the status of the project. Grouping this technical contribution to some meaningful cultural initiatives — other internal presentations, #connect-engineering, etc. — my manager had a good case for promotion that was agreed upon by the Engineering Directors.&lt;/p>
&lt;p>&lt;em>&lt;strong>What about a piece of advice for someone who has just started as a Staff engineer?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I feel like progressing up a career ladder is an additive exercise in forcing you to care about more things than you previously cared about. Caring about more things is hard.&lt;/p>
&lt;p>As a trivial example: The intern cares about the small aspect of a feature they can build in three months. The full-time engineer on the team cares about the entire lifecycle of that feature. The team lead/manager cares about the suite of features that compose a product. The director cares about the suite of products owned by their organization. And so on.&lt;/p>
&lt;p>Every rung up the ladder means you care about another layer of abstraction, in addition to caring about all the layers beneath your current one.&lt;/p>
&lt;p>I feel like a Staff Engineering role is similar in that you&amp;rsquo;re leaving the comfort zone of a specific technical domain to a more general problem domain: engineering. And as leaders you&amp;rsquo;re leaving a potential technical comfort zone to the realm of the system of challenges that impact engineering output. What are the biggest problems holding back engineering teams that fall between the cracks of team ownership? Those are your problems now, in addition to all of the problems of your technical domain.&lt;/p>
&lt;p>So while Staff is an aspirational title to achieve, it also includes significant added responsibility. You’re a leader now, whether you want to be or not.&lt;/p>
&lt;p>&lt;em>&lt;strong>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I think sponsorship is a key responsibility of any senior role and material to the growth of any engineering organization. I suppose the definition of “sponsorship” varies, but to me one tangible way is to provide opportunities for exposure. For example:&lt;/p>
&lt;ul>
&lt;li>Giving less senior teammates the opportunity to own and present their work at wider meetings.&lt;/li>
&lt;li>Reaching out to a team who just shipped an awesome feature to write a post for our engineering blog.&lt;/li>
&lt;li>Encouraging someone I met in a #connect-engineering coffee who has unique experience or perspective to give an internal presentation.&lt;/li>
&lt;li>Ensuring that meetings are not dominated by the perspectives of a vocal minority and soliciting opinions from everyone in the room.&lt;/li>
&lt;li>Giving public kudos in a large slack room to someone who just did something great that everyone didn’t see.&lt;/li>
&lt;/ul>
&lt;p>Lara Hogan has a great post on sponsorship in practice: &lt;a href="https://larahogan.me/blog/what-sponsorship-looks-like/">What does sponsorship look like?&lt;/a>&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>Talks by Dan Na&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://blog.danielna.com/talks/pushing-through-friction/">Pushing through Friction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.danielna.com/talks/transitioning-to-sass-at-scale/">Transitioning to Sass at Scale&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;em>&lt;strong>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Yes, and I still actively consider it. I know it’s more convenient to think about the two ladders as mutually exclusive but I don’t.&lt;/p>
&lt;p>I still enjoy both shipping code and running teams, and I think the ability to do both at a high level is critical for long-term engineering success. Charity Majors has a fantastic blog post on this topic that I recommend reading: &amp;ldquo;&lt;a href="https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/">The Engineer/Manager Pendulum&lt;/a>&amp;rdquo;.&lt;/p>
&lt;p>Charity argues that &amp;ldquo;manager career path vs engineering career path&amp;rdquo; is a false dichotomy, and taking time to alternate between both roles makes you better at both. This maps to my own experience. I&amp;rsquo;m a better manager because I know how terrible it is to be an IC on a poorly planned project, and I&amp;rsquo;m a better IC because I know how and when to sound an alarm when a project is going poorly.&lt;/p>
&lt;p>I think one of the most important strategic skills for building software is the ability to converge towards pragmatic decision making. A failure mode I’ve seen repeatedly is when a product manager comes with business requirements and an engineer comes with technical pushback and neither are willing to budge. The ability to empathize with both sets of incentives and navigate that tension is the only way to get anything done, and the best way to build that empathy is to sit in both seats.&lt;/p>
&lt;p>To specifically answer this question: my previous role prior to joining Squarespace was an Engineering Manager. I love being an Engineering Manager but I wanted to keep my technical skills sharp so I accepted an IC role. Then I was promoted to Staff.&lt;/p>
&lt;p>&lt;em>&lt;strong>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>In the context of engineering leadership, two books stand out.&lt;/p>
&lt;p>My favorite engineering leadership book of all time is &lt;a href="https://www.amazon.com/dp/B015VACHOK/">High Output Management by Andrew Grove&lt;/a>. I pick it up from my bookshelf once a year and end up unintentionally re-reading it. Many ideas from Grove&amp;rsquo;s book have significantly shaped how I view work and leadership: &amp;ldquo;the measure of a manager is the output of the organization underneath them,&amp;rdquo; &amp;ldquo;delegation is not abdication,&amp;rdquo; the concept of engineering/managerial leverage, etc. In terms of communicating the tactical aspects of engineering leadership I still think Grove&amp;rsquo;s book is best.&lt;/p>
&lt;p>On the human side of leadership, I really loved &lt;a href="http://larahogan.me">Lara Hogan&lt;/a>&amp;rsquo;s book: &lt;a href="https://resilient-management.com/">Resilient Management&lt;/a>. I had the absurdly good fortune of starting my NYC tech career at Etsy in 2013 where Lara was my first engineering manager. Lara is a master of unpacking and addressing the hardest parts about navigating emotions and personalities, fostering psychological safety, and sponsoring coworkers. And having worked directly under her for close to four years, she is totally the real deal and practices what she preaches.&lt;/p>
&lt;p>In terms of non-books, I subscribe to and enjoy reading &amp;ldquo;&lt;a href="https://lethain.com/">Irrational Exuberance&lt;/a>,&amp;rdquo; where Will Larson regularly blogs about engineering management with a highly pragmatic and strategic perspective. I&amp;rsquo;ve also recently discovered and enjoyed reading Marty Cagan&amp;rsquo;s &amp;ldquo;&lt;a href="https://svpg.com/articles/">Insights Blog&lt;/a>,&amp;rdquo; mostly because product leadership is a domain I&amp;rsquo;m less familiar with and am interested in learning more about.&lt;/p>
&lt;p>My role models are some of the amazing coworkers I&amp;rsquo;ve worked closely with over the years. I sat next to &lt;a href="http://www.danielespeset.com">Daniel Espeset&lt;/a> for four years at Etsy and learned an immeasurable amount about coupling technical execution with cultural impact. I learned a lot watching Lara do things like advocate for and achieve pay equity across our engineering group. I learn a lot watching current coworkers like &lt;a href="http://noidea.dog">Tanya Reilly&lt;/a> institute and evolve our engineering processes to match our ever-growing scale. I’m inspired most by people whom I&amp;rsquo;ve personally witnessed have the courage to change companies for the better, despite whatever friction they encountered along the way.&lt;/p></description></item><item><title>Keavy McMinn - Senior Principal Engineer at Fastly</title><link>https://staffeng.com/stories/keavy-mcminn/</link><pubDate>Tue, 24 Mar 2020 00:00:00 +0000</pubDate><guid>https://staffeng.com/stories/keavy-mcminn/</guid><description>&lt;p>&lt;em>This story was recorded in March, 2020. Learn more about Keavy on her &lt;a href="https://keavy.com/">blog&lt;/a>, &lt;a href="https://twitter.com/keavy">Twitter&lt;/a>, and &lt;a href="https://www.linkedin.com/in/keavy/">Linkedin&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;em>&lt;strong>Tell us a little about your current role: your title, the company you work at, and generally what sort of work does your team do?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I&amp;rsquo;m a senior principal engineer at &lt;a href="https://www.fastly.com/">Fastly&lt;/a>. Fastly is an edge cloud platform that provides services like a CDN. I work in OCTO, the Office of the CTO, which is composed of about ten principal or distinguished engineers who report directly to the CTO. Each member of OCTO tends to have their own focus, and mine is being the API Lead.&lt;/p>
&lt;p>&lt;em>&lt;strong>What does a Staff-plus engineer do at your company? How do you spend your time?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>There are several quite different types of principal and distinguished engineers in OCTO. There are also principal engineers that work within engineering teams directly, rather than within OCTO. In the OCTO group, some work on internet standards or academic research, some do deep technical research and prototyping, some help incubate a team building something completely new. I’m closely involved with the broader engineering organization in my API Lead role.&lt;/p>
&lt;p>We all work on different things, but we have a common goal of taking a holistic, long-term and system-wide view on things. We also try to find and help with the sort of things across engineering that might get overlooked or fall between the cracks. Our CTO supports our work, but doesn’t identify the projects to work on, that’s up to us.&lt;/p>
&lt;p>I’ve never thought about my time in terms of percentages. Some of my work goes in phases, with more of one thing this week, more of that the next. A massive amount of my time is spent doing written work, research, and talking to people. I’ll have regular meetings with the teams and managers that build APIs. I’ll spend time breaking a long-term strategy into little chunks, doing research, and writing a proposal on that. Then I’ll have to market that proposal around the company. Less on writing code lately, but in other phases I’ll build demos or tooling to support the wider work. That coding work is still really enjoyable.&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>Some of Keavy's writing on engineering leadership&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://keavy.com/work/thriving-on-the-technical-leadership-path/">Thriving on the Technical Leadership Path&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://keavy.com/work/building-bridges/">Building Bridges as a Technical Leader&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://keavy.com/work/where-to-start/">Where to Start&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://keavy.com/work/technical-preparation/">Technical Research and Preparation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;em>&lt;strong>Where do you feel most impactful as a Staff-plus engineer? What’s something you’ve done as a Staff-plus engineer that you wouldn’t have done earlier in your career?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>As a regular engineer, it can be hard to carve out time. You have to work more within the constraints and cadence of regularly scheduled projects. As a principal, you have the trust, the time and the space to try something out.&lt;/p>
&lt;p>When you have a title, you don’t have to spend so much energy putting your credentials on the table. It helps set the context for others. You’re more respected from the outset, and that’s been really noticeable. You also get access to executives, so you get information earlier and might have a seat at the table to influence things.&lt;/p>
&lt;p>&lt;em>&lt;strong>Do you spend time advocating for technology, practice, process or architectural change?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I was hired specifically to set the direction for strategy for the API. Part of that is steering the technical direction and choices we make. I approach it as a collaborative exercise. You know I’ll do the grind work of doing the research, I analyse all the information, present tradeoffs, and make a recommendation. I’ll take in all the organizational and engineering group context.&lt;/p>
&lt;p>I present what I think is the best case for us, and people can disagree with that. And, you know, they often do. I’m steering and influencing more than saying, “I’ve got the authority to just tell you what to do.” I’ve never seen that style work well.&lt;/p>
&lt;p>For controversial decisions, I’ll meet up with representatives from different, relevant groups. I’ll meet with a group of engineers, tell them what I’m going to recommend, and ask “What do y’all think about that? What am I missing?” I’ll also meet with the management and product side, and maybe legal, docs, security or different people depending on the project. I’ve also done it the opposite direction of just presenting the thing first, and then having calls to get feedback instead of just waiting for people to leave a comment in the document.&lt;/p>
&lt;p>&lt;em>&lt;strong>What’s something you’ve advocated for?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>One of the things that I’ve been advocating hard for in my current job is design documents for API changes. So before anybody writes any code, when the cost of making changes is low, they write down the user workflows and what would an interface look like that could enable those workflows. Sometimes it turns out that a seemingly simple thing is really difficult, particularly when the group isn’t used to flexing those muscles.&lt;/p>
&lt;p>My approach to advocacy is to remind ourselves what the pain points are that everyone felt that led us to trying to make a change. We’re not trying to be perfect for sake of theory, code beauty, or a lofty concern. I bring it back to “These are the pain points that everybody said they felt, and this is an approach that you know ultimately is going to help with that.”&lt;/p>
&lt;p>I help get other people to care about the same things, like I’m going to start pairing with more engineers on API reviews. While I do the reviews, I try to help teach others what I’m looking at, and be encouraging through the processes and conversations.&lt;/p>
&lt;p>&lt;em>&lt;strong>How have you sponsored other engineers? Is sponsoring other engineers an important aspect of your role?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>This hasn’t been as much of a focus for me in my current role. At GitHub I was conscious that I had privileges from my seniority and tenure, and sponsored an engineer there. I would give him more and more challenging things to work on, encouraged him to question anything that was unclear or curious to him about my work, and advocated for further responsibility and recognition for him.&lt;/p>
&lt;p>&lt;em>&lt;strong>How did you build organizational trust?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>At Fastly, I was given trust from the beginning. When I joined, I was hired to come in and work on specific things. I remember asking, “Is there a time scale for this?” and for their notions about strategy, and being told explicitly that they wanted &lt;em>me&lt;/em> to figure it out and tell &lt;em>them&lt;/em>. So definitely a lot of trust and responsibility.&lt;/p>
&lt;p>There are pros and cons of when you build that trust instead of being hired with it. As you build up trust, you simultaneously build up a lot of context, which is how it worked for me at GitHub. Although, I find in my current job that it was actually really useful to come in without context and be a set of fresh eyes. That makes it easy to question when folks think, “Oh, well, maybe we’ve just always done it this way.” It can be liberating not to be tied to the past.&lt;/p>
&lt;p>&lt;em>&lt;strong>There is a popular idea that becoming a Staff engineer requires completing a “Staff Project.” Did you have a &amp;ldquo;Staff Project,&amp;rdquo; and if so what was it?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I’ve never heard it given a name, but I understand the idea. I did lead and architect that type of project - solving gnarly engineering problems, with large impact for the company - a few times, but unfortunately they didn’t lead to me being promoted. They did lead to my career progression though. Those projects gave me the experience, knowledge and confidence to position myself differently. Even to give public conference talks or know that “I’ve done X and could do X again.”&lt;/p>
&lt;p>&lt;em>&lt;strong>Were public speaking or public visibility important to reaching your current level?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Yeah, I think it’s been a huge factor for my career development in general. I don’t think it’s necessary, but I think it can definitely be helpful, it’s been helpful for me. My very first conference talk I was asked to do - because the organizers thought I had an interesting perspective to share, coming from an art background. It was terrifying, and initially I wanted to say no. But my mother persuaded me to say yes. So public speaking was a slightly more accidental than deliberate strategy to start with.&lt;/p>
&lt;p>Mostly, I enjoyed the people I met at conferences. Later the speaker networks led to job opportunities for me.&lt;/p>
&lt;p>&lt;em>&lt;strong>How did you first get a Staff or Principal title? What factors contributed most in you reaching that title?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I was hired at Fastly as a Principal Engineer. So, to be honest, for me the biggest factor was changing companies. The type of work I was doing didn’t dramatically change, but changing companies was the thing that ultimately enabled me to get the title.&lt;/p>
&lt;p>There was someone that was a strong advocate for hiring me specifically, and I’m sure that helped. They weren’t someone I’d directly worked with before, but they were familiar with my work.&lt;/p>
&lt;p>&lt;em>&lt;strong>Has working remotely impacted your career trajectory?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Not that I’m aware of. I’ve always been a remote employee and I’m sure it’s been a factor in being able to have serendipitous conversations but I’ve just been doing it so long. You make a deliberate effort to have the conversations and build relationships. Also, my companies have been largely distributed. I can imagine it being more of a potential issue if being remote is the minority, or the company doesn’t fully embrace being distributed.&lt;/p>
&lt;p>&lt;em>&lt;strong>Did you get any advice on reaching Staff that was particularly helpful for you?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Not really, I got some bad advice. It’s such a cliche, but the “This is great. Now you have to prove it again.” There’s some advice that pushes people more in the sort of hero direction, like saying that you need to invent something unusual or magical to qualify. There are so many different directions one can make it. Engineering ladders often contribute to these beliefs.&lt;/p>
&lt;div class="pull">
&lt;p>&lt;strong>Book recommendations&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.amazon.com/Passionate-Programmer-Remarkable-Development-Pragmatic-ebook/dp/B00AYQNR5U/">The Passionate Programmer&lt;/a>&lt;/li>
&lt;li> &lt;a href="https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X">The Pragmatic Programmer&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>&lt;em>&lt;strong>What about a piece of advice for someone who has just started as a Staff engineer?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>The thing that springs to mind is to find your peers or support network. Just like management, it gets lonely the higher up you go and it’s important to find peers that will still challenge you and you can brainstorm ideas with. It doesn’t even matter if they’re in your similar area of work or even are in different companies.&lt;/p>
&lt;p>&lt;em>&lt;strong>Did you ever consider engineering management, and if so how did you decide to pursue the staff engineer path?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>I tried it once and didn’t have a good experience. I realized it’s just not where my passions lie. I have too much respect for engineering management to do it for anything other than the right reason. The right reason is to support other people.&lt;/p>
&lt;p>&lt;em>&lt;strong>What are some resources (books, blogs, people, etc) you’ve learned from? Who are your role models in the field?&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Conferences have been a resource for me, as well as getting to work with mature, low-ego, wonderful engineering leaders and engineers. Chad Fowler, and his book &lt;a href="https://www.amazon.com/Passionate-Programmer-Remarkable-Development-Pragmatic-ebook/dp/B00AYQNR5U/">The Passionate Programmer&lt;/a>, is at top of that list. Dave Thomas is another one of those people whose workshops I used to go to when I was first learning Ruby and his book &lt;a href="https://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X">The Pragmatic Programmer&lt;/a> is another great one.&lt;/p></description></item><item><title>Introduction to systems thinking</title><link>https://staffeng.com/guides/systems-thinking/</link><pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/systems-thinking/</guid><description>&lt;p>Many effective leaders I&amp;rsquo;ve worked with have the uncanny knack for working on &lt;a href="https://lethain.com/building-technical-leverage/">leveraged&lt;/a> problems. In some problem domains, the &lt;a href="https://lethain.com/intro-product-management/">product management skillset&lt;/a> is extraordinarily effective for identifying useful problems, but systems thinking is the most universally useful toolkit I&amp;rsquo;ve found.&lt;/p>
&lt;p>If you really want a solid grasp on systems thinking fundamentals, you should read &lt;a href="https://www.amazon.com/Thinking-Systems-Donella-H-Meadows/dp/1603580557">Thinking in Systems: A Primer&lt;/a> by Donella Meadows, but I&amp;rsquo;ll do my best to describe some of the basics and work through a recent scenario where I found the systems thinking approach to be exceptionally useful.&lt;/p>
&lt;h2 id="stocks-and-flows">Stocks and flows&lt;/h2>
&lt;p>The fundamental observation of systems thinking is that the links between events are often more subtle than they appear. We want to describe events causally&amp;ndash;our managers are too busy because we&amp;rsquo;re trying to ship our current project&amp;ndash;but few events occur in a vacuum.&lt;/p>
&lt;p>Big changes appear to happen in a moment, but if you look closely underneath the big change, there is usually
a slow accumulation of small changes.
In this example, perhaps the managers are busy because no one hired and trained the managers required to support this year&amp;rsquo;s project deadlines. These accumulations are called &lt;em>stocks&lt;/em>, and are the memory of changes over time. A stock might be the number of trained managers at your company.&lt;/p>
&lt;p>Changes to stocks are called &lt;em>flows&lt;/em>. These can be either &lt;em>inflows&lt;/em> or &lt;em>outflows&lt;/em>. Training a new manager is an inflow, and a trained manager who departs the company is an outflow. Diagrams in this article represent flows with solid dark lines.&lt;/p>
&lt;p>&lt;img src="https://staffeng.com/static/systems/sys-loop-clouds.png" alt="System diagram for hiring and training new managers.">&lt;/p>
&lt;p>The other relationship, represented in this article by a dashed line, is an &lt;em>information link&lt;/em>. These indicate that the value of a stock is a factor in the size of a flow. Indicated in this diagram by a dashed line. The link here shows that the time available for developing features depends on the number of trained managers.&lt;/p>
&lt;p>Often stocks outside of a diagrams scope will be represented as a cloud, indicating that there is something complex that happened there that we&amp;rsquo;re not currently exploring. It&amp;rsquo;s best practice to label every flow, and to keep in mind that every flow is a rate, whereas every stock is a quantity.&lt;/p>
&lt;h2 id="developer-velocity">Developer velocity&lt;/h2>
&lt;p>When I started thinking of a useful example of where systems thinking is useful, one came to mind immediately.
Since reading Forsgren&amp;rsquo;s &lt;a href="https://lethain.com/accelerate-developer-productivity/">Accelerate&lt;/a> earlier this year, I&amp;rsquo;ve spent a lot of time pondering their definition of velocity.&lt;/p>
&lt;p>They focus on four measures of developer velocity:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Delivery lead time&lt;/strong> is time from code being written to it being used in production.&lt;/li>
&lt;li>&lt;strong>Deployment frequency&lt;/strong> is how often you deploy code.&lt;/li>
&lt;li>&lt;strong>Change fail rate&lt;/strong> is how frequently changes fail.&lt;/li>
&lt;li>&lt;strong>Time to restore service&lt;/strong> is time spent recovering from defects.&lt;/li>
&lt;/ol>
&lt;p>The book uses surveys from tens of thousands of organizations to assess their
overall productivity and show how it correlates to their performance on those
four dimensions.&lt;/p>
&lt;p>&lt;img src="https://staffeng.com/static/systems/dev-velocity-sys.png" alt="System diagram for developer productivity.">&lt;/p>
&lt;p>These kind of intuitively make sense as measures of productivity, but let&amp;rsquo;s see if we can model these measures into a system we can use to reason about developer productivity:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;em>pull requests&lt;/em>&lt;/strong> are converted into &lt;strong>ready commits&lt;/strong> based on our &lt;em>code review rate,&lt;/em>&lt;/li>
&lt;li>&lt;strong>ready commits&lt;/strong> convert into &lt;strong>deployed commits&lt;/strong> at &lt;em>deploy rate,&lt;/em>&lt;/li>
&lt;li>&lt;strong>deployed commits&lt;/strong> convert into &lt;strong>incidents&lt;/strong> at &lt;em>defect rate,&lt;/em>&lt;/li>
&lt;li>&lt;strong>incidents&lt;/strong> are remediated into &lt;strong>reverted commits&lt;/strong> at &lt;em>recovery rate&lt;/em>,&lt;/li>
&lt;li>&lt;strong>reverted commits&lt;/strong> are debugged into new &lt;strong>pull requests&lt;/strong> at &lt;em>debug rate&lt;/em>.&lt;/li>
&lt;/ul>
&lt;p>Linking these pieces together, we see a &lt;em>feedback loop&lt;/em>, where the system&amp;rsquo;s downstream behavior impacts its upstream behavior. With a sufficiently high &lt;em>defect rate&lt;/em> or slow &lt;em>recovery rate&lt;/em>, you could easily see a world where each deploy leaves you even further behind.&lt;/p>
&lt;p>If your model is a good one, opportunities for improvement should be immediately obvious, which I believe is true in this case. However, to truly identify where to invest, you need to identify the true values of these stocks and flows! For example, if you don&amp;rsquo;t have a backlog of &lt;strong>ready commits&lt;/strong>, then speeding up your &lt;em>deploy rate&lt;/em> may not be valuable. Likewise, if your &lt;em>defect rate&lt;/em> is very low, than reducing your &lt;em>recovery time&lt;/em> will have little impact on the system.&lt;/p>
&lt;p>Creating an arena for quickly testing hypothesis about how things work, without having to do the underlying work beforehand, is the aspect of system thinking that I appreciate most.&lt;/p>
&lt;h2 id="model-away">Model away&lt;/h2>
&lt;p>Once you start thinking about systems, you&amp;rsquo;ll find it&amp;rsquo;s hard to stop. Pretty much any difficult problem is worth trying to represent as a system, and even without numbers plugged in I find them powerful thinking aids.&lt;/p>
&lt;p>If you do want the full experience, there are relatively few tools out there to support you. &lt;a href="https://www.iseesystems.com/">Stella&lt;/a> is the gold standard, but the price is quite steep, costing more than a new laptop for non-academic licenses. The best cheap alternative I&amp;rsquo;ve found is &lt;a href="https://insightmaker.com/">InsightMaker&lt;/a>, which has some UI quirks but has a donation based payment model.&lt;/p></description></item><item><title>Stories introduction</title><link>https://staffeng.com/guides/stories/</link><pubDate>Sat, 01 Jan 2000 00:00:00 +0000</pubDate><guid>https://staffeng.com/guides/stories/</guid><description>&lt;p>It didn&amp;rsquo;t take me long to realize after publishing my first book that I wasn&amp;rsquo;t
the sort of person who enjoyed reading reviews of my work. At best, I felt good
about myself for a moment, but often I just felt sad. During that window when
I was still reading reviews, and I read one commenting that it was too Silicon Valley-centric
for most folks to benefit.&lt;/p>
&lt;p>That line stuck with me as I started to brainstorm what eventually became this book,
and I wanted to avoid centering my own experiences to the exclusion of all others.
Even more importantly, it&amp;rsquo;s clear to me that my career is built on a particular set
of perspectives, luck, and privilege, and I wanted this book to be a useful guide
for folks who experience the industry differently.&lt;/p>
&lt;p>All of that is to say that the best parts of this book rest heavily on the candid
and insightful interviews from industry practitioners, and I&amp;rsquo;m grateful
to be able to include those interviews in this final, following chapter.
Even if you didn&amp;rsquo;t get much from the book thus far, I hope you&amp;rsquo;ll find something
unique in these career stories.&lt;/p></description></item></channel></rss>